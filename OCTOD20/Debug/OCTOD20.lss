
OCTOD20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e70  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000078  20000000  00003e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000210  20000078  00003ee8  00020078  2**2
                  ALLOC
  3 .stack        00002000  20000288  000040f8  00020078  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  6 .debug_info   000495a8  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006bb1  00000000  00000000  000696a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00008dc7  00000000  00000000  00070252  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000009b0  00000000  00000000  00079019  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b08  00000000  00000000  000799c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016ef6  00000000  00000000  0007a4d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015baa  00000000  00000000  000913c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005ce31  00000000  00000000  000a6f71  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001a28  00000000  00000000  00103da4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	88 22 00 20 f5 28 00 00 f1 28 00 00 f1 28 00 00     .". .(...(...(..
	...
      2c:	f1 28 00 00 00 00 00 00 00 00 00 00 f1 28 00 00     .(...........(..
      3c:	f1 28 00 00 f1 28 00 00 f1 28 00 00 f1 28 00 00     .(...(...(...(..
      4c:	3d 0c 00 00 f5 08 00 00 f1 28 00 00 f1 28 00 00     =........(...(..
      5c:	8d 16 00 00 9d 16 00 00 ad 16 00 00 bd 16 00 00     ................
	...
      74:	f1 28 00 00 f1 28 00 00 f1 28 00 00 f1 28 00 00     .(...(...(...(..
      84:	f1 28 00 00 f1 28 00 00 00 00 00 00 00 00 00 00     .(...(..........
      94:	45 06 00 00 f1 28 00 00 4d 08 00 00 f1 28 00 00     E....(..M....(..

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	20000078 	.word	0x20000078
      c4:	00000000 	.word	0x00000000
      c8:	00003e70 	.word	0x00003e70

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	2000007c 	.word	0x2000007c
      f8:	00003e70 	.word	0x00003e70
      fc:	00003e70 	.word	0x00003e70
     100:	00000000 	.word	0x00000000

00000104 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     104:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     106:	2000      	movs	r0, #0
     108:	4b08      	ldr	r3, [pc, #32]	; (12c <delay_init+0x28>)
     10a:	4798      	blx	r3
     10c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     10e:	4c08      	ldr	r4, [pc, #32]	; (130 <delay_init+0x2c>)
     110:	21fa      	movs	r1, #250	; 0xfa
     112:	0089      	lsls	r1, r1, #2
     114:	47a0      	blx	r4
     116:	4b07      	ldr	r3, [pc, #28]	; (134 <delay_init+0x30>)
     118:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     11a:	4907      	ldr	r1, [pc, #28]	; (138 <delay_init+0x34>)
     11c:	0028      	movs	r0, r5
     11e:	47a0      	blx	r4
     120:	4b06      	ldr	r3, [pc, #24]	; (13c <delay_init+0x38>)
     122:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     124:	2205      	movs	r2, #5
     126:	4b06      	ldr	r3, [pc, #24]	; (140 <delay_init+0x3c>)
     128:	601a      	str	r2, [r3, #0]
}
     12a:	bd70      	pop	{r4, r5, r6, pc}
     12c:	00002681 	.word	0x00002681
     130:	00003059 	.word	0x00003059
     134:	20000000 	.word	0x20000000
     138:	000f4240 	.word	0x000f4240
     13c:	20000004 	.word	0x20000004
     140:	e000e010 	.word	0xe000e010

00000144 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     144:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     146:	4b08      	ldr	r3, [pc, #32]	; (168 <delay_cycles_us+0x24>)
     148:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     14a:	4a08      	ldr	r2, [pc, #32]	; (16c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     14c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     14e:	2180      	movs	r1, #128	; 0x80
     150:	0249      	lsls	r1, r1, #9
	while (n--) {
     152:	3801      	subs	r0, #1
     154:	d307      	bcc.n	166 <delay_cycles_us+0x22>
	if (n > 0) {
     156:	2c00      	cmp	r4, #0
     158:	d0fb      	beq.n	152 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     15a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     15c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	6813      	ldr	r3, [r2, #0]
     160:	420b      	tst	r3, r1
     162:	d0fc      	beq.n	15e <delay_cycles_us+0x1a>
     164:	e7f5      	b.n	152 <delay_cycles_us+0xe>
	}
}
     166:	bd30      	pop	{r4, r5, pc}
     168:	20000004 	.word	0x20000004
     16c:	e000e010 	.word	0xe000e010

00000170 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     170:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     172:	4b08      	ldr	r3, [pc, #32]	; (194 <delay_cycles_ms+0x24>)
     174:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     176:	4a08      	ldr	r2, [pc, #32]	; (198 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     178:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     17a:	2180      	movs	r1, #128	; 0x80
     17c:	0249      	lsls	r1, r1, #9
	while (n--) {
     17e:	3801      	subs	r0, #1
     180:	d307      	bcc.n	192 <delay_cycles_ms+0x22>
	if (n > 0) {
     182:	2c00      	cmp	r4, #0
     184:	d0fb      	beq.n	17e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     186:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     188:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     18a:	6813      	ldr	r3, [r2, #0]
     18c:	420b      	tst	r3, r1
     18e:	d0fc      	beq.n	18a <delay_cycles_ms+0x1a>
     190:	e7f5      	b.n	17e <delay_cycles_ms+0xe>
	}
}
     192:	bd30      	pop	{r4, r5, pc}
     194:	20000000 	.word	0x20000000
     198:	e000e010 	.word	0xe000e010

0000019c <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     19c:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     19e:	2200      	movs	r2, #0
     1a0:	2300      	movs	r3, #0
     1a2:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     1a4:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     1a6:	2100      	movs	r1, #0
     1a8:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     1aa:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     1ac:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     1ae:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     1b0:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     1b2:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     1b4:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     1b6:	24c0      	movs	r4, #192	; 0xc0
     1b8:	0164      	lsls	r4, r4, #5
     1ba:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     1bc:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     1be:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     1c0:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     1c2:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     1c4:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     1c6:	242a      	movs	r4, #42	; 0x2a
     1c8:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     1ca:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     1cc:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     1ce:	3c06      	subs	r4, #6
     1d0:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     1d2:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     1d4:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     1d6:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     1d8:	232b      	movs	r3, #43	; 0x2b
     1da:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     1dc:	3301      	adds	r3, #1
     1de:	54c1      	strb	r1, [r0, r3]
}
     1e0:	bd10      	pop	{r4, pc}
	...

000001e4 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     1e6:	46de      	mov	lr, fp
     1e8:	4657      	mov	r7, sl
     1ea:	464e      	mov	r6, r9
     1ec:	4645      	mov	r5, r8
     1ee:	b5e0      	push	{r5, r6, r7, lr}
     1f0:	b097      	sub	sp, #92	; 0x5c
     1f2:	0007      	movs	r7, r0
     1f4:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     1f6:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1f8:	4a79      	ldr	r2, [pc, #484]	; (3e0 <adc_init+0x1fc>)
     1fa:	6a10      	ldr	r0, [r2, #32]
     1fc:	2380      	movs	r3, #128	; 0x80
     1fe:	025b      	lsls	r3, r3, #9
     200:	4303      	orrs	r3, r0
     202:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     204:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     206:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     208:	07db      	lsls	r3, r3, #31
     20a:	d506      	bpl.n	21a <adc_init+0x36>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     20c:	b017      	add	sp, #92	; 0x5c
     20e:	bc3c      	pop	{r2, r3, r4, r5}
     210:	4690      	mov	r8, r2
     212:	4699      	mov	r9, r3
     214:	46a2      	mov	sl, r4
     216:	46ab      	mov	fp, r5
     218:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     21a:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     21c:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     21e:	079b      	lsls	r3, r3, #30
     220:	d4f4      	bmi.n	20c <adc_init+0x28>
	module_inst->reference = config->reference;
     222:	7873      	ldrb	r3, [r6, #1]
     224:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     226:	2b00      	cmp	r3, #0
     228:	d104      	bne.n	234 <adc_init+0x50>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     22a:	4a6e      	ldr	r2, [pc, #440]	; (3e4 <adc_init+0x200>)
     22c:	6c13      	ldr	r3, [r2, #64]	; 0x40
     22e:	2104      	movs	r1, #4
     230:	430b      	orrs	r3, r1
     232:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     234:	2300      	movs	r3, #0
     236:	60bb      	str	r3, [r7, #8]
     238:	60fb      	str	r3, [r7, #12]
     23a:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     23c:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     23e:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     240:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     242:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     244:	4b68      	ldr	r3, [pc, #416]	; (3e8 <adc_init+0x204>)
     246:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     248:	232a      	movs	r3, #42	; 0x2a
     24a:	5cf3      	ldrb	r3, [r6, r3]
     24c:	2b00      	cmp	r3, #0
     24e:	d105      	bne.n	25c <adc_init+0x78>
     250:	7d33      	ldrb	r3, [r6, #20]
     252:	2b00      	cmp	r3, #0
     254:	d102      	bne.n	25c <adc_init+0x78>
		module_inst->software_trigger = true;
     256:	3301      	adds	r3, #1
     258:	777b      	strb	r3, [r7, #29]
     25a:	e001      	b.n	260 <adc_init+0x7c>
		module_inst->software_trigger = false;
     25c:	2300      	movs	r3, #0
     25e:	777b      	strb	r3, [r7, #29]
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
     260:	4b62      	ldr	r3, [pc, #392]	; (3ec <adc_init+0x208>)
     262:	681b      	ldr	r3, [r3, #0]
     264:	041b      	lsls	r3, r3, #16
     266:	0f1b      	lsrs	r3, r3, #28
     268:	4698      	mov	r8, r3
	Adc *const adc_module = module_inst->hw;
     26a:	683b      	ldr	r3, [r7, #0]
     26c:	469b      	mov	fp, r3
	gclk_chan_conf.source_generator = config->clock_source;
     26e:	7833      	ldrb	r3, [r6, #0]
     270:	466a      	mov	r2, sp
     272:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     274:	4669      	mov	r1, sp
     276:	2017      	movs	r0, #23
     278:	4b5d      	ldr	r3, [pc, #372]	; (3f0 <adc_init+0x20c>)
     27a:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     27c:	2017      	movs	r0, #23
     27e:	4b5d      	ldr	r3, [pc, #372]	; (3f4 <adc_init+0x210>)
     280:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     282:	232c      	movs	r3, #44	; 0x2c
     284:	5cf2      	ldrb	r2, [r6, r3]
     286:	2a00      	cmp	r2, #0
     288:	d05a      	beq.n	340 <adc_init+0x15c>
		uint8_t offset = config->pin_scan.offset_start_scan;
     28a:	3b01      	subs	r3, #1
     28c:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     28e:	7b33      	ldrb	r3, [r6, #12]
     290:	18eb      	adds	r3, r5, r3
     292:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     294:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     296:	b2c9      	uxtb	r1, r1
     298:	428b      	cmp	r3, r1
     29a:	d227      	bcs.n	2ec <adc_init+0x108>
     29c:	1952      	adds	r2, r2, r5
     29e:	b2d3      	uxtb	r3, r2
     2a0:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     2a2:	4b55      	ldr	r3, [pc, #340]	; (3f8 <adc_init+0x214>)
     2a4:	469a      	mov	sl, r3
		system_pinmux_pin_set_config(pin_map_result, &config);
     2a6:	0033      	movs	r3, r6
     2a8:	464e      	mov	r6, r9
     2aa:	46b9      	mov	r9, r7
     2ac:	001f      	movs	r7, r3
     2ae:	e003      	b.n	2b8 <adc_init+0xd4>
			offset++;
     2b0:	3501      	adds	r5, #1
     2b2:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     2b4:	42b5      	cmp	r5, r6
     2b6:	d017      	beq.n	2e8 <adc_init+0x104>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     2b8:	240f      	movs	r4, #15
     2ba:	402c      	ands	r4, r5
     2bc:	7b3b      	ldrb	r3, [r7, #12]
     2be:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     2c0:	2250      	movs	r2, #80	; 0x50
     2c2:	494e      	ldr	r1, [pc, #312]	; (3fc <adc_init+0x218>)
     2c4:	a802      	add	r0, sp, #8
     2c6:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2c8:	2c13      	cmp	r4, #19
     2ca:	d8f1      	bhi.n	2b0 <adc_init+0xcc>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2cc:	00a4      	lsls	r4, r4, #2
     2ce:	ab02      	add	r3, sp, #8
     2d0:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2d2:	a901      	add	r1, sp, #4
     2d4:	2300      	movs	r3, #0
     2d6:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     2d8:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2da:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2dc:	3301      	adds	r3, #1
     2de:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2e0:	b2c0      	uxtb	r0, r0
     2e2:	4b47      	ldr	r3, [pc, #284]	; (400 <adc_init+0x21c>)
     2e4:	4798      	blx	r3
     2e6:	e7e3      	b.n	2b0 <adc_init+0xcc>
     2e8:	003e      	movs	r6, r7
     2ea:	464f      	mov	r7, r9
		_adc_configure_ain_pin(config->negative_input);
     2ec:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     2ee:	2250      	movs	r2, #80	; 0x50
     2f0:	4942      	ldr	r1, [pc, #264]	; (3fc <adc_init+0x218>)
     2f2:	a802      	add	r0, sp, #8
     2f4:	4b40      	ldr	r3, [pc, #256]	; (3f8 <adc_init+0x214>)
     2f6:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2f8:	2c13      	cmp	r4, #19
     2fa:	d913      	bls.n	324 <adc_init+0x140>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     2fc:	7d73      	ldrb	r3, [r6, #21]
     2fe:	009b      	lsls	r3, r3, #2
     300:	b2db      	uxtb	r3, r3
     302:	465a      	mov	r2, fp
     304:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     306:	7db3      	ldrb	r3, [r6, #22]
     308:	01db      	lsls	r3, r3, #7
     30a:	7872      	ldrb	r2, [r6, #1]
     30c:	4313      	orrs	r3, r2
     30e:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     310:	465a      	mov	r2, fp
     312:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     314:	7933      	ldrb	r3, [r6, #4]
     316:	2b34      	cmp	r3, #52	; 0x34
     318:	d900      	bls.n	31c <adc_init+0x138>
     31a:	e186      	b.n	62a <adc_init+0x446>
     31c:	009b      	lsls	r3, r3, #2
     31e:	4a39      	ldr	r2, [pc, #228]	; (404 <adc_init+0x220>)
     320:	58d3      	ldr	r3, [r2, r3]
     322:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     324:	00a4      	lsls	r4, r4, #2
     326:	ab02      	add	r3, sp, #8
     328:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     32a:	a901      	add	r1, sp, #4
     32c:	2300      	movs	r3, #0
     32e:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     330:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     332:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     334:	3301      	adds	r3, #1
     336:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     338:	b2c0      	uxtb	r0, r0
     33a:	4b31      	ldr	r3, [pc, #196]	; (400 <adc_init+0x21c>)
     33c:	4798      	blx	r3
     33e:	e7dd      	b.n	2fc <adc_init+0x118>
		_adc_configure_ain_pin(config->positive_input);
     340:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     342:	2250      	movs	r2, #80	; 0x50
     344:	492d      	ldr	r1, [pc, #180]	; (3fc <adc_init+0x218>)
     346:	a802      	add	r0, sp, #8
     348:	4b2b      	ldr	r3, [pc, #172]	; (3f8 <adc_init+0x214>)
     34a:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     34c:	2c13      	cmp	r4, #19
     34e:	d915      	bls.n	37c <adc_init+0x198>
		_adc_configure_ain_pin(config->negative_input);
     350:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     352:	2250      	movs	r2, #80	; 0x50
     354:	4929      	ldr	r1, [pc, #164]	; (3fc <adc_init+0x218>)
     356:	a802      	add	r0, sp, #8
     358:	4b27      	ldr	r3, [pc, #156]	; (3f8 <adc_init+0x214>)
     35a:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     35c:	2c13      	cmp	r4, #19
     35e:	d8cd      	bhi.n	2fc <adc_init+0x118>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     360:	00a4      	lsls	r4, r4, #2
     362:	ab02      	add	r3, sp, #8
     364:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     366:	a901      	add	r1, sp, #4
     368:	2300      	movs	r3, #0
     36a:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     36c:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     36e:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     370:	3301      	adds	r3, #1
     372:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     374:	b2c0      	uxtb	r0, r0
     376:	4b22      	ldr	r3, [pc, #136]	; (400 <adc_init+0x21c>)
     378:	4798      	blx	r3
     37a:	e7bf      	b.n	2fc <adc_init+0x118>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     37c:	00a4      	lsls	r4, r4, #2
     37e:	ab02      	add	r3, sp, #8
     380:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     382:	a901      	add	r1, sp, #4
     384:	2300      	movs	r3, #0
     386:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     388:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     38a:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     38c:	3301      	adds	r3, #1
     38e:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     390:	b2c0      	uxtb	r0, r0
     392:	4b1b      	ldr	r3, [pc, #108]	; (400 <adc_init+0x21c>)
     394:	4798      	blx	r3
     396:	e7db      	b.n	350 <adc_init+0x16c>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     398:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     39a:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     39c:	2102      	movs	r1, #2
     39e:	e036      	b.n	40e <adc_init+0x22a>
		adjres = config->divide_result;
     3a0:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     3a2:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     3a4:	2410      	movs	r4, #16
     3a6:	e032      	b.n	40e <adc_init+0x22a>
		if(revision_num < REVISON_D_NUM) {
     3a8:	4643      	mov	r3, r8
     3aa:	2b02      	cmp	r3, #2
     3ac:	d800      	bhi.n	3b0 <adc_init+0x1cc>
     3ae:	e0d8      	b.n	562 <adc_init+0x37e>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     3b0:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     3b2:	2410      	movs	r4, #16
			adjres = ADC_DIVIDE_RESULT_2;
     3b4:	2101      	movs	r1, #1
     3b6:	e02a      	b.n	40e <adc_init+0x22a>
		if(revision_num < REVISON_D_NUM) {
     3b8:	4643      	mov	r3, r8
     3ba:	2b02      	cmp	r3, #2
     3bc:	d800      	bhi.n	3c0 <adc_init+0x1dc>
     3be:	e0d4      	b.n	56a <adc_init+0x386>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     3c0:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     3c2:	2410      	movs	r4, #16
			adjres = ADC_DIVIDE_RESULT_DISABLE;
     3c4:	2100      	movs	r1, #0
     3c6:	e022      	b.n	40e <adc_init+0x22a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3c8:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     3ca:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     3cc:	2100      	movs	r1, #0
     3ce:	e01e      	b.n	40e <adc_init+0x22a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3d0:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     3d2:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     3d4:	2100      	movs	r1, #0
     3d6:	e01a      	b.n	40e <adc_init+0x22a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3d8:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     3da:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     3dc:	2100      	movs	r1, #0
     3de:	e016      	b.n	40e <adc_init+0x22a>
     3e0:	40000400 	.word	0x40000400
     3e4:	40000800 	.word	0x40000800
     3e8:	200000e0 	.word	0x200000e0
     3ec:	41002018 	.word	0x41002018
     3f0:	00002799 	.word	0x00002799
     3f4:	0000270d 	.word	0x0000270d
     3f8:	000033e1 	.word	0x000033e1
     3fc:	00003d0c 	.word	0x00003d0c
     400:	00002891 	.word	0x00002891
     404:	00003c38 	.word	0x00003c38
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     408:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     40a:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     40c:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     40e:	0109      	lsls	r1, r1, #4
     410:	2270      	movs	r2, #112	; 0x70
     412:	400a      	ands	r2, r1
     414:	4313      	orrs	r3, r2
     416:	465a      	mov	r2, fp
     418:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     41a:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     41c:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     41e:	2b3f      	cmp	r3, #63	; 0x3f
     420:	d900      	bls.n	424 <adc_init+0x240>
     422:	e6f3      	b.n	20c <adc_init+0x28>
		adc_module->SAMPCTRL.reg =
     424:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     426:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     428:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     42a:	b25b      	sxtb	r3, r3
     42c:	2b00      	cmp	r3, #0
     42e:	dbfb      	blt.n	428 <adc_init+0x244>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     430:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     432:	8872      	ldrh	r2, [r6, #2]
     434:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     436:	2224      	movs	r2, #36	; 0x24
     438:	5cb2      	ldrb	r2, [r6, r2]
     43a:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     43c:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     43e:	7d32      	ldrb	r2, [r6, #20]
     440:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     442:	4313      	orrs	r3, r2
     444:	7cb2      	ldrb	r2, [r6, #18]
     446:	0052      	lsls	r2, r2, #1
     448:	4313      	orrs	r3, r2
     44a:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     44c:	465a      	mov	r2, fp
     44e:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     450:	7e33      	ldrb	r3, [r6, #24]
     452:	2b00      	cmp	r3, #0
     454:	d020      	beq.n	498 <adc_init+0x2b4>
		switch (resolution) {
     456:	2c10      	cmp	r4, #16
     458:	d100      	bne.n	45c <adc_init+0x278>
     45a:	e0c8      	b.n	5ee <adc_init+0x40a>
     45c:	d800      	bhi.n	460 <adc_init+0x27c>
     45e:	e088      	b.n	572 <adc_init+0x38e>
     460:	2c20      	cmp	r4, #32
     462:	d100      	bne.n	466 <adc_init+0x282>
     464:	e0a5      	b.n	5b2 <adc_init+0x3ce>
     466:	2c30      	cmp	r4, #48	; 0x30
     468:	d116      	bne.n	498 <adc_init+0x2b4>
			if (config->differential_mode &&
     46a:	7cf2      	ldrb	r2, [r6, #19]
     46c:	2a00      	cmp	r2, #0
     46e:	d00a      	beq.n	486 <adc_init+0x2a2>
					(config->window.window_lower_value > 127 ||
     470:	69f2      	ldr	r2, [r6, #28]
     472:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     474:	2017      	movs	r0, #23
			if (config->differential_mode &&
     476:	2aff      	cmp	r2, #255	; 0xff
     478:	d900      	bls.n	47c <adc_init+0x298>
     47a:	e6c7      	b.n	20c <adc_init+0x28>
					config->window.window_lower_value < -128 ||
     47c:	6a32      	ldr	r2, [r6, #32]
     47e:	3280      	adds	r2, #128	; 0x80
     480:	2aff      	cmp	r2, #255	; 0xff
     482:	d900      	bls.n	486 <adc_init+0x2a2>
     484:	e6c2      	b.n	20c <adc_init+0x28>
				return STATUS_ERR_INVALID_ARG;
     486:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     488:	69f2      	ldr	r2, [r6, #28]
     48a:	2aff      	cmp	r2, #255	; 0xff
     48c:	dd00      	ble.n	490 <adc_init+0x2ac>
     48e:	e6bd      	b.n	20c <adc_init+0x28>
     490:	6a32      	ldr	r2, [r6, #32]
     492:	2aff      	cmp	r2, #255	; 0xff
     494:	dd00      	ble.n	498 <adc_init+0x2b4>
     496:	e6b9      	b.n	20c <adc_init+0x28>
	Adc *const adc_module = module_inst->hw;
     498:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     49a:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     49c:	b252      	sxtb	r2, r2
     49e:	2a00      	cmp	r2, #0
     4a0:	dbfb      	blt.n	49a <adc_init+0x2b6>
	adc_module->WINCTRL.reg = config->window.window_mode;
     4a2:	465a      	mov	r2, fp
     4a4:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     4a6:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4a8:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     4aa:	b25b      	sxtb	r3, r3
     4ac:	2b00      	cmp	r3, #0
     4ae:	dbfb      	blt.n	4a8 <adc_init+0x2c4>
	adc_module->WINLT.reg =
     4b0:	8bb3      	ldrh	r3, [r6, #28]
     4b2:	465a      	mov	r2, fp
     4b4:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     4b6:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4b8:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     4ba:	b25b      	sxtb	r3, r3
     4bc:	2b00      	cmp	r3, #0
     4be:	dbfb      	blt.n	4b8 <adc_init+0x2d4>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     4c0:	8c33      	ldrh	r3, [r6, #32]
     4c2:	465a      	mov	r2, fp
     4c4:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     4c6:	232c      	movs	r3, #44	; 0x2c
     4c8:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     4ca:	2b00      	cmp	r3, #0
     4cc:	d005      	beq.n	4da <adc_init+0x2f6>
		inputs_to_scan--;
     4ce:	3b01      	subs	r3, #1
     4d0:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     4d2:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     4d4:	2b0f      	cmp	r3, #15
     4d6:	d900      	bls.n	4da <adc_init+0x2f6>
     4d8:	e698      	b.n	20c <adc_init+0x28>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     4da:	222b      	movs	r2, #43	; 0x2b
     4dc:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     4de:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     4e0:	290f      	cmp	r1, #15
     4e2:	d900      	bls.n	4e6 <adc_init+0x302>
     4e4:	e692      	b.n	20c <adc_init+0x28>
	Adc *const adc_module = module_inst->hw;
     4e6:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4e8:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     4ea:	b252      	sxtb	r2, r2
     4ec:	2a00      	cmp	r2, #0
     4ee:	dbfb      	blt.n	4e8 <adc_init+0x304>
			config->negative_input |
     4f0:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     4f2:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     4f4:	4302      	orrs	r2, r0
     4f6:	68b0      	ldr	r0, [r6, #8]
     4f8:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     4fa:	0509      	lsls	r1, r1, #20
			config->negative_input |
     4fc:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     4fe:	041b      	lsls	r3, r3, #16
			config->negative_input |
     500:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     502:	465a      	mov	r2, fp
     504:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     506:	232a      	movs	r3, #42	; 0x2a
     508:	5cf3      	ldrb	r3, [r6, r3]
     50a:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     50c:	230f      	movs	r3, #15
     50e:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     510:	3315      	adds	r3, #21
     512:	5cf3      	ldrb	r3, [r6, r3]
     514:	2b00      	cmp	r3, #0
     516:	d012      	beq.n	53e <adc_init+0x35a>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     518:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     51a:	4a45      	ldr	r2, [pc, #276]	; (630 <adc_init+0x44c>)
			return STATUS_ERR_INVALID_ARG;
     51c:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     51e:	4293      	cmp	r3, r2
     520:	d900      	bls.n	524 <adc_init+0x340>
     522:	e673      	b.n	20c <adc_init+0x28>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     524:	465a      	mov	r2, fp
     526:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     528:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     52a:	2380      	movs	r3, #128	; 0x80
     52c:	011b      	lsls	r3, r3, #4
     52e:	18d3      	adds	r3, r2, r3
     530:	493f      	ldr	r1, [pc, #252]	; (630 <adc_init+0x44c>)
     532:	b29b      	uxth	r3, r3
     534:	428b      	cmp	r3, r1
     536:	d900      	bls.n	53a <adc_init+0x356>
     538:	e668      	b.n	20c <adc_init+0x28>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     53a:	465b      	mov	r3, fp
     53c:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     53e:	4b3d      	ldr	r3, [pc, #244]	; (634 <adc_init+0x450>)
     540:	681b      	ldr	r3, [r3, #0]
     542:	015b      	lsls	r3, r3, #5
     544:	22e0      	movs	r2, #224	; 0xe0
     546:	00d2      	lsls	r2, r2, #3
     548:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     54a:	4a3b      	ldr	r2, [pc, #236]	; (638 <adc_init+0x454>)
     54c:	6851      	ldr	r1, [r2, #4]
     54e:	0149      	lsls	r1, r1, #5
     550:	6812      	ldr	r2, [r2, #0]
     552:	0ed2      	lsrs	r2, r2, #27
     554:	430a      	orrs	r2, r1
     556:	b2d2      	uxtb	r2, r2
			) |
     558:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     55a:	465a      	mov	r2, fp
     55c:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     55e:	2000      	movs	r0, #0
     560:	e654      	b.n	20c <adc_init+0x28>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     562:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     564:	2410      	movs	r4, #16
			adjres = ADC_DIVIDE_RESULT_8;
     566:	2103      	movs	r1, #3
     568:	e751      	b.n	40e <adc_init+0x22a>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     56a:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     56c:	2410      	movs	r4, #16
			adjres = ADC_DIVIDE_RESULT_16;
     56e:	2104      	movs	r1, #4
     570:	e74d      	b.n	40e <adc_init+0x22a>
		switch (resolution) {
     572:	2c00      	cmp	r4, #0
     574:	d190      	bne.n	498 <adc_init+0x2b4>
			if (config->differential_mode &&
     576:	7cf2      	ldrb	r2, [r6, #19]
     578:	2a00      	cmp	r2, #0
     57a:	d00f      	beq.n	59c <adc_init+0x3b8>
					(config->window.window_lower_value > 2047 ||
     57c:	69f2      	ldr	r2, [r6, #28]
     57e:	2180      	movs	r1, #128	; 0x80
     580:	0109      	lsls	r1, r1, #4
     582:	468c      	mov	ip, r1
     584:	4462      	add	r2, ip
			if (config->differential_mode &&
     586:	492a      	ldr	r1, [pc, #168]	; (630 <adc_init+0x44c>)
				return STATUS_ERR_INVALID_ARG;
     588:	2017      	movs	r0, #23
			if (config->differential_mode &&
     58a:	428a      	cmp	r2, r1
     58c:	d900      	bls.n	590 <adc_init+0x3ac>
     58e:	e63d      	b.n	20c <adc_init+0x28>
					config->window.window_lower_value < -2048 ||
     590:	6a32      	ldr	r2, [r6, #32]
     592:	4462      	add	r2, ip
     594:	4926      	ldr	r1, [pc, #152]	; (630 <adc_init+0x44c>)
     596:	428a      	cmp	r2, r1
     598:	d900      	bls.n	59c <adc_init+0x3b8>
     59a:	e637      	b.n	20c <adc_init+0x28>
			} else if (config->window.window_lower_value > 4095 ||
     59c:	4a24      	ldr	r2, [pc, #144]	; (630 <adc_init+0x44c>)
				return STATUS_ERR_INVALID_ARG;
     59e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     5a0:	69f1      	ldr	r1, [r6, #28]
     5a2:	4291      	cmp	r1, r2
     5a4:	dd00      	ble.n	5a8 <adc_init+0x3c4>
     5a6:	e631      	b.n	20c <adc_init+0x28>
     5a8:	6a31      	ldr	r1, [r6, #32]
     5aa:	4291      	cmp	r1, r2
     5ac:	dd00      	ble.n	5b0 <adc_init+0x3cc>
     5ae:	e62d      	b.n	20c <adc_init+0x28>
     5b0:	e772      	b.n	498 <adc_init+0x2b4>
			if (config->differential_mode &&
     5b2:	7cf2      	ldrb	r2, [r6, #19]
     5b4:	2a00      	cmp	r2, #0
     5b6:	d00f      	beq.n	5d8 <adc_init+0x3f4>
					(config->window.window_lower_value > 511 ||
     5b8:	69f2      	ldr	r2, [r6, #28]
     5ba:	2180      	movs	r1, #128	; 0x80
     5bc:	0089      	lsls	r1, r1, #2
     5be:	468c      	mov	ip, r1
     5c0:	4462      	add	r2, ip
			if (config->differential_mode &&
     5c2:	491e      	ldr	r1, [pc, #120]	; (63c <adc_init+0x458>)
				return STATUS_ERR_INVALID_ARG;
     5c4:	2017      	movs	r0, #23
			if (config->differential_mode &&
     5c6:	428a      	cmp	r2, r1
     5c8:	d900      	bls.n	5cc <adc_init+0x3e8>
     5ca:	e61f      	b.n	20c <adc_init+0x28>
					config->window.window_lower_value < -512 ||
     5cc:	6a32      	ldr	r2, [r6, #32]
     5ce:	4462      	add	r2, ip
     5d0:	491a      	ldr	r1, [pc, #104]	; (63c <adc_init+0x458>)
     5d2:	428a      	cmp	r2, r1
     5d4:	d900      	bls.n	5d8 <adc_init+0x3f4>
     5d6:	e619      	b.n	20c <adc_init+0x28>
			} else if (config->window.window_lower_value > 1023 ||
     5d8:	4a18      	ldr	r2, [pc, #96]	; (63c <adc_init+0x458>)
				return STATUS_ERR_INVALID_ARG;
     5da:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     5dc:	69f1      	ldr	r1, [r6, #28]
     5de:	4291      	cmp	r1, r2
     5e0:	dd00      	ble.n	5e4 <adc_init+0x400>
     5e2:	e613      	b.n	20c <adc_init+0x28>
     5e4:	6a31      	ldr	r1, [r6, #32]
     5e6:	4291      	cmp	r1, r2
     5e8:	dd00      	ble.n	5ec <adc_init+0x408>
     5ea:	e60f      	b.n	20c <adc_init+0x28>
     5ec:	e754      	b.n	498 <adc_init+0x2b4>
			if (config->differential_mode &&
     5ee:	7cf2      	ldrb	r2, [r6, #19]
     5f0:	2a00      	cmp	r2, #0
     5f2:	d00f      	beq.n	614 <adc_init+0x430>
					(config->window.window_lower_value > 32767 ||
     5f4:	69f2      	ldr	r2, [r6, #28]
     5f6:	2180      	movs	r1, #128	; 0x80
     5f8:	0209      	lsls	r1, r1, #8
     5fa:	468c      	mov	ip, r1
     5fc:	4462      	add	r2, ip
			if (config->differential_mode &&
     5fe:	4910      	ldr	r1, [pc, #64]	; (640 <adc_init+0x45c>)
				return STATUS_ERR_INVALID_ARG;
     600:	2017      	movs	r0, #23
			if (config->differential_mode &&
     602:	428a      	cmp	r2, r1
     604:	d900      	bls.n	608 <adc_init+0x424>
     606:	e601      	b.n	20c <adc_init+0x28>
					config->window.window_lower_value < -32768 ||
     608:	6a32      	ldr	r2, [r6, #32]
     60a:	4462      	add	r2, ip
     60c:	490c      	ldr	r1, [pc, #48]	; (640 <adc_init+0x45c>)
     60e:	428a      	cmp	r2, r1
     610:	d900      	bls.n	614 <adc_init+0x430>
     612:	e5fb      	b.n	20c <adc_init+0x28>
			} else if (config->window.window_lower_value > 65535 ||
     614:	4a0a      	ldr	r2, [pc, #40]	; (640 <adc_init+0x45c>)
				return STATUS_ERR_INVALID_ARG;
     616:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     618:	69f1      	ldr	r1, [r6, #28]
     61a:	4291      	cmp	r1, r2
     61c:	dd00      	ble.n	620 <adc_init+0x43c>
     61e:	e5f5      	b.n	20c <adc_init+0x28>
     620:	6a31      	ldr	r1, [r6, #32]
     622:	4291      	cmp	r1, r2
     624:	dd00      	ble.n	628 <adc_init+0x444>
     626:	e5f1      	b.n	20c <adc_init+0x28>
     628:	e736      	b.n	498 <adc_init+0x2b4>
		return STATUS_ERR_INVALID_ARG;
     62a:	2017      	movs	r0, #23
     62c:	e5ee      	b.n	20c <adc_init+0x28>
     62e:	46c0      	nop			; (mov r8, r8)
     630:	00000fff 	.word	0x00000fff
     634:	00806024 	.word	0x00806024
     638:	00806020 	.word	0x00806020
     63c:	000003ff 	.word	0x000003ff
     640:	0000ffff 	.word	0x0000ffff

00000644 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     644:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     646:	4b2e      	ldr	r3, [pc, #184]	; (700 <ADC_Handler+0xbc>)
     648:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
     64a:	6823      	ldr	r3, [r4, #0]
     64c:	7e1d      	ldrb	r5, [r3, #24]
     64e:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
     650:	07ea      	lsls	r2, r5, #31
     652:	d505      	bpl.n	660 <ADC_Handler+0x1c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     654:	7ee2      	ldrb	r2, [r4, #27]
     656:	07d2      	lsls	r2, r2, #31
     658:	d502      	bpl.n	660 <ADC_Handler+0x1c>
     65a:	7ea2      	ldrb	r2, [r4, #26]
     65c:	07d2      	lsls	r2, r2, #31
     65e:	d416      	bmi.n	68e <ADC_Handler+0x4a>
	if (flags & ADC_INTFLAG_WINMON) {
     660:	076b      	lsls	r3, r5, #29
     662:	d508      	bpl.n	676 <ADC_Handler+0x32>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     664:	2304      	movs	r3, #4
     666:	6822      	ldr	r2, [r4, #0]
     668:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     66a:	7ee3      	ldrb	r3, [r4, #27]
     66c:	079b      	lsls	r3, r3, #30
     66e:	d502      	bpl.n	676 <ADC_Handler+0x32>
     670:	7ea3      	ldrb	r3, [r4, #26]
     672:	079b      	lsls	r3, r3, #30
     674:	d43c      	bmi.n	6f0 <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
     676:	07ab      	lsls	r3, r5, #30
     678:	d508      	bpl.n	68c <ADC_Handler+0x48>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     67a:	2302      	movs	r3, #2
     67c:	6822      	ldr	r2, [r4, #0]
     67e:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     680:	7ee3      	ldrb	r3, [r4, #27]
     682:	075b      	lsls	r3, r3, #29
     684:	d502      	bpl.n	68c <ADC_Handler+0x48>
     686:	7ea3      	ldrb	r3, [r4, #26]
     688:	075b      	lsls	r3, r3, #29
     68a:	d435      	bmi.n	6f8 <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
     68c:	bd70      	pop	{r4, r5, r6, pc}
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     68e:	2201      	movs	r2, #1
     690:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     692:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     694:	7e53      	ldrb	r3, [r2, #25]
			while (adc_is_syncing(module)) {
     696:	b25b      	sxtb	r3, r3
     698:	2b00      	cmp	r3, #0
     69a:	dbfb      	blt.n	694 <ADC_Handler+0x50>
			*(module->job_buffer++) = module->hw->RESULT.reg;
     69c:	6961      	ldr	r1, [r4, #20]
     69e:	1c8b      	adds	r3, r1, #2
     6a0:	6163      	str	r3, [r4, #20]
     6a2:	8b53      	ldrh	r3, [r2, #26]
     6a4:	b29b      	uxth	r3, r3
     6a6:	800b      	strh	r3, [r1, #0]
			if (--module->remaining_conversions > 0) {
     6a8:	8b23      	ldrh	r3, [r4, #24]
     6aa:	3b01      	subs	r3, #1
     6ac:	b29b      	uxth	r3, r3
     6ae:	8323      	strh	r3, [r4, #24]
     6b0:	2b00      	cmp	r3, #0
     6b2:	d011      	beq.n	6d8 <ADC_Handler+0x94>
				if (module->software_trigger == true) {
     6b4:	7f63      	ldrb	r3, [r4, #29]
     6b6:	2b00      	cmp	r3, #0
     6b8:	d0d2      	beq.n	660 <ADC_Handler+0x1c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     6ba:	6822      	ldr	r2, [r4, #0]
     6bc:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     6be:	b25b      	sxtb	r3, r3
     6c0:	2b00      	cmp	r3, #0
     6c2:	dbfb      	blt.n	6bc <ADC_Handler+0x78>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     6c4:	7b13      	ldrb	r3, [r2, #12]
     6c6:	2102      	movs	r1, #2
     6c8:	430b      	orrs	r3, r1
     6ca:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     6cc:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     6ce:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     6d0:	b25b      	sxtb	r3, r3
     6d2:	2b00      	cmp	r3, #0
     6d4:	dbfb      	blt.n	6ce <ADC_Handler+0x8a>
     6d6:	e7c3      	b.n	660 <ADC_Handler+0x1c>
				if (module->job_status == STATUS_BUSY) {
     6d8:	7f23      	ldrb	r3, [r4, #28]
     6da:	2b05      	cmp	r3, #5
     6dc:	d1c0      	bne.n	660 <ADC_Handler+0x1c>
					module->job_status = STATUS_OK;
     6de:	2300      	movs	r3, #0
     6e0:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     6e2:	3301      	adds	r3, #1
     6e4:	6822      	ldr	r2, [r4, #0]
     6e6:	7593      	strb	r3, [r2, #22]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     6e8:	0020      	movs	r0, r4
     6ea:	68a3      	ldr	r3, [r4, #8]
     6ec:	4798      	blx	r3
     6ee:	e7b7      	b.n	660 <ADC_Handler+0x1c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     6f0:	0020      	movs	r0, r4
     6f2:	68e3      	ldr	r3, [r4, #12]
     6f4:	4798      	blx	r3
     6f6:	e7be      	b.n	676 <ADC_Handler+0x32>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     6f8:	6923      	ldr	r3, [r4, #16]
     6fa:	0020      	movs	r0, r4
     6fc:	4798      	blx	r3
}
     6fe:	e7c5      	b.n	68c <ADC_Handler+0x48>
     700:	200000e0 	.word	0x200000e0

00000704 <dac_is_syncing>:
		struct dac_module *const dev_inst)
{
	/* Sanity check arguments */
	Assert(dev_inst);

	Dac *const dac_module = dev_inst->hw;
     704:	6803      	ldr	r3, [r0, #0]

#if (SAMC21)
	if (dac_module->SYNCBUSY.reg) {
#else
	if (dac_module->STATUS.reg & DAC_STATUS_SYNCBUSY) {
     706:	79d8      	ldrb	r0, [r3, #7]
     708:	09c0      	lsrs	r0, r0, #7
#endif
		return true;
	}

	return false;
}
     70a:	4770      	bx	lr

0000070c <dac_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->reference      = DAC_REFERENCE_INT1V;
     70c:	2300      	movs	r3, #0
     70e:	7003      	strb	r3, [r0, #0]
	config->output         = DAC_OUTPUT_EXTERNAL;
     710:	2201      	movs	r2, #1
     712:	7042      	strb	r2, [r0, #1]
	config->left_adjust    = false;
     714:	7083      	strb	r3, [r0, #2]
#ifdef FEATURE_DAC_DATABUF_WRITE_PROTECTION
	config->databuf_protection_bypass = false;
#endif
	config->voltage_pump_disable = false;
     716:	7103      	strb	r3, [r0, #4]
	config->clock_source   = GCLK_GENERATOR_0;
     718:	70c3      	strb	r3, [r0, #3]
	config->run_in_standby = false;
     71a:	7143      	strb	r3, [r0, #5]
#if (SAMC21)
	config->dither_mode    = false;
#endif
}
     71c:	4770      	bx	lr
	...

00000720 <dac_init>:
 */
enum status_code dac_init(
		struct dac_module *const module_inst,
		Dac *const module,
		struct dac_config *const config)
{
     720:	b5f0      	push	{r4, r5, r6, r7, lr}
     722:	46c6      	mov	lr, r8
     724:	b500      	push	{lr}
     726:	b082      	sub	sp, #8
     728:	0005      	movs	r5, r0
     72a:	0014      	movs	r4, r2
	Assert(module_inst);
	Assert(module);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = module;
     72c:	6001      	str	r1, [r0, #0]
     72e:	4a28      	ldr	r2, [pc, #160]	; (7d0 <dac_init+0xb0>)
     730:	6a10      	ldr	r0, [r2, #32]
     732:	2380      	movs	r3, #128	; 0x80
     734:	02db      	lsls	r3, r3, #11
     736:	4303      	orrs	r3, r0
     738:	6213      	str	r3, [r2, #32]
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_DAC);
#endif

	/* Check if module is enabled. */
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
     73a:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     73c:	201c      	movs	r0, #28
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
     73e:	079b      	lsls	r3, r3, #30
     740:	d503      	bpl.n	74a <dac_init+0x2a>

	_dac_instances[0] = module_inst;
#endif

	return STATUS_OK;
}
     742:	b002      	add	sp, #8
     744:	bc04      	pop	{r2}
     746:	4690      	mov	r8, r2
     748:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
     74a:	780b      	ldrb	r3, [r1, #0]
		return STATUS_BUSY;
     74c:	3817      	subs	r0, #23
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
     74e:	07db      	lsls	r3, r3, #31
     750:	d4f7      	bmi.n	742 <dac_init+0x22>
	gclk_chan_conf.source_generator = config->clock_source;
     752:	a901      	add	r1, sp, #4
     754:	78e3      	ldrb	r3, [r4, #3]
     756:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(DAC_GCLK_ID, &gclk_chan_conf);
     758:	3015      	adds	r0, #21
     75a:	4b1e      	ldr	r3, [pc, #120]	; (7d4 <dac_init+0xb4>)
     75c:	4798      	blx	r3
	system_gclk_chan_enable(DAC_GCLK_ID);
     75e:	201a      	movs	r0, #26
     760:	4b1d      	ldr	r3, [pc, #116]	; (7d8 <dac_init+0xb8>)
     762:	4798      	blx	r3
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     764:	2600      	movs	r6, #0
     766:	466b      	mov	r3, sp
     768:	705e      	strb	r6, [r3, #1]
	config->powersave    = false;
     76a:	70de      	strb	r6, [r3, #3]
	pin_conf.mux_position = MUX_PA02B_DAC_VOUT;
     76c:	2301      	movs	r3, #1
     76e:	466a      	mov	r2, sp
     770:	7013      	strb	r3, [r2, #0]
	pin_conf.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     772:	7096      	strb	r6, [r2, #2]
	system_pinmux_pin_set_config(PIN_PA02B_DAC_VOUT, &pin_conf);
     774:	4669      	mov	r1, sp
     776:	2002      	movs	r0, #2
     778:	4b18      	ldr	r3, [pc, #96]	; (7dc <dac_init+0xbc>)
     77a:	4798      	blx	r3
	Dac *const dac_module = module_inst->hw;
     77c:	682f      	ldr	r7, [r5, #0]
	module_inst->output = config->output;
     77e:	7863      	ldrb	r3, [r4, #1]
     780:	712b      	strb	r3, [r5, #4]
	module_inst->start_on_event = false;
     782:	71ae      	strb	r6, [r5, #6]
	if (config->run_in_standby) {
     784:	7963      	ldrb	r3, [r4, #5]
		new_ctrla |= DAC_CTRLA_RUNSTDBY;
     786:	1e5a      	subs	r2, r3, #1
     788:	4193      	sbcs	r3, r2
     78a:	009b      	lsls	r3, r3, #2
	new_ctrlb |= config->reference;
     78c:	7822      	ldrb	r2, [r4, #0]
     78e:	4690      	mov	r8, r2
	if (config->left_adjust) {
     790:	78a2      	ldrb	r2, [r4, #2]
     792:	2a00      	cmp	r2, #0
     794:	d003      	beq.n	79e <dac_init+0x7e>
     796:	2204      	movs	r2, #4
     798:	4641      	mov	r1, r8
     79a:	4311      	orrs	r1, r2
     79c:	4688      	mov	r8, r1
	if (config->voltage_pump_disable) {
     79e:	7922      	ldrb	r2, [r4, #4]
     7a0:	2a00      	cmp	r2, #0
     7a2:	d003      	beq.n	7ac <dac_init+0x8c>
     7a4:	2208      	movs	r2, #8
     7a6:	4641      	mov	r1, r8
     7a8:	4311      	orrs	r1, r2
     7aa:	4688      	mov	r8, r1
	dac_module->CTRLA.reg = new_ctrla;
     7ac:	b2db      	uxtb	r3, r3
     7ae:	703b      	strb	r3, [r7, #0]
	while (dac_is_syncing(module_inst)) {
     7b0:	4e0b      	ldr	r6, [pc, #44]	; (7e0 <dac_init+0xc0>)
     7b2:	0028      	movs	r0, r5
     7b4:	47b0      	blx	r6
     7b6:	2800      	cmp	r0, #0
     7b8:	d1fb      	bne.n	7b2 <dac_init+0x92>
	dac_module->CTRLB.reg = new_ctrlb;
     7ba:	4643      	mov	r3, r8
     7bc:	707b      	strb	r3, [r7, #1]
	module_inst->reference = config->reference;
     7be:	7823      	ldrb	r3, [r4, #0]
     7c0:	716b      	strb	r3, [r5, #5]
		module_inst->callback[i] = NULL;
     7c2:	2300      	movs	r3, #0
     7c4:	616b      	str	r3, [r5, #20]
     7c6:	61ab      	str	r3, [r5, #24]
     7c8:	61eb      	str	r3, [r5, #28]
	_dac_instances[0] = module_inst;
     7ca:	4b06      	ldr	r3, [pc, #24]	; (7e4 <dac_init+0xc4>)
     7cc:	601d      	str	r5, [r3, #0]
	return STATUS_OK;
     7ce:	e7b8      	b.n	742 <dac_init+0x22>
     7d0:	40000400 	.word	0x40000400
     7d4:	00002799 	.word	0x00002799
     7d8:	0000270d 	.word	0x0000270d
     7dc:	00002891 	.word	0x00002891
     7e0:	00000705 	.word	0x00000705
     7e4:	200000e4 	.word	0x200000e4

000007e8 <dac_enable>:
 * \param[in] module_inst  Pointer to the DAC software instance struct
 *
 */
void dac_enable(
		struct dac_module *const module_inst)
{
     7e8:	b570      	push	{r4, r5, r6, lr}
     7ea:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Dac *const dac_module = module_inst->hw;
     7ec:	6806      	ldr	r6, [r0, #0]

	/* Enable selected output */
	dac_module->CTRLB.reg |= module_inst->output;
     7ee:	7873      	ldrb	r3, [r6, #1]
     7f0:	7902      	ldrb	r2, [r0, #4]
     7f2:	4313      	orrs	r3, r2
     7f4:	7073      	strb	r3, [r6, #1]

	while (dac_is_syncing(module_inst)) {
     7f6:	4d09      	ldr	r5, [pc, #36]	; (81c <dac_enable+0x34>)
     7f8:	0020      	movs	r0, r4
     7fa:	47a8      	blx	r5
     7fc:	2800      	cmp	r0, #0
     7fe:	d1fb      	bne.n	7f8 <dac_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	dac_module->CTRLA.reg |= DAC_CTRLA_ENABLE;
     800:	7833      	ldrb	r3, [r6, #0]
     802:	2202      	movs	r2, #2
     804:	4313      	orrs	r3, r2
     806:	7033      	strb	r3, [r6, #0]

	/* Enable internal bandgap reference if selected in the configuration */
	if (module_inst->reference == DAC_REFERENCE_INT1V) {
     808:	7963      	ldrb	r3, [r4, #5]
     80a:	2b00      	cmp	r3, #0
     80c:	d104      	bne.n	818 <dac_enable+0x30>
     80e:	4a04      	ldr	r2, [pc, #16]	; (820 <dac_enable+0x38>)
     810:	6c13      	ldr	r3, [r2, #64]	; 0x40
     812:	2104      	movs	r1, #4
     814:	430b      	orrs	r3, r1
     816:	6413      	str	r3, [r2, #64]	; 0x40
#else
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}

#endif
}
     818:	bd70      	pop	{r4, r5, r6, pc}
     81a:	46c0      	nop			; (mov r8, r8)
     81c:	00000705 	.word	0x00000705
     820:	40000800 	.word	0x40000800

00000824 <dac_chan_write>:
 */
enum status_code dac_chan_write(
		struct dac_module *const module_inst,
		enum dac_channel channel,
		const uint16_t data)
{
     824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     826:	0004      	movs	r4, r0
     828:	0017      	movs	r7, r2
	Assert(module_inst->hw);

	/* No channel support yet */
	UNUSED(channel);

	Dac *const dac_module = module_inst->hw;
     82a:	6806      	ldr	r6, [r0, #0]

	/* Wait until the synchronization is complete */
	while (dac_is_syncing(module_inst)) {
     82c:	4d06      	ldr	r5, [pc, #24]	; (848 <dac_chan_write+0x24>)
     82e:	0020      	movs	r0, r4
     830:	47a8      	blx	r5
     832:	2800      	cmp	r0, #0
     834:	d1fb      	bne.n	82e <dac_chan_write+0xa>
	};

	if (module_inst->start_on_event) {
     836:	79a3      	ldrb	r3, [r4, #6]
     838:	2b00      	cmp	r3, #0
     83a:	d102      	bne.n	842 <dac_chan_write+0x1e>
		/* Write the new value to the buffered DAC data register */
		dac_module->DATABUF.reg = data;
	} else {
		/* Write the new value to the DAC data register */
		dac_module->DATA.reg = data;
     83c:	8137      	strh	r7, [r6, #8]
	}

	return STATUS_OK;
}
     83e:	2000      	movs	r0, #0
     840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		dac_module->DATABUF.reg = data;
     842:	81b7      	strh	r7, [r6, #12]
     844:	e7fb      	b.n	83e <dac_chan_write+0x1a>
     846:	46c0      	nop			; (mov r8, r8)
     848:	00000705 	.word	0x00000705

0000084c <DAC_Handler>:
	}
}

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
     84c:	b570      	push	{r4, r5, r6, lr}
	struct dac_module *module = _dac_instances[instance];
     84e:	4b27      	ldr	r3, [pc, #156]	; (8ec <DAC_Handler+0xa0>)
     850:	681c      	ldr	r4, [r3, #0]
	Dac *const dac_hw = module->hw;
     852:	6825      	ldr	r5, [r4, #0]
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
     854:	79ab      	ldrb	r3, [r5, #6]
     856:	07db      	lsls	r3, r3, #31
     858:	d507      	bpl.n	86a <DAC_Handler+0x1e>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
     85a:	2301      	movs	r3, #1
     85c:	71ab      	strb	r3, [r5, #6]
		if ((module->callback) &&
     85e:	0023      	movs	r3, r4
     860:	3314      	adds	r3, #20
     862:	d002      	beq.n	86a <DAC_Handler+0x1e>
     864:	7c63      	ldrb	r3, [r4, #17]
     866:	2b00      	cmp	r3, #0
     868:	d131      	bne.n	8ce <DAC_Handler+0x82>
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
     86a:	79ab      	ldrb	r3, [r5, #6]
     86c:	079b      	lsls	r3, r3, #30
     86e:	d538      	bpl.n	8e2 <DAC_Handler+0x96>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
     870:	2302      	movs	r3, #2
     872:	71ab      	strb	r3, [r5, #6]
		if (module->remaining_conversions) {
     874:	89a3      	ldrh	r3, [r4, #12]
     876:	b29b      	uxth	r3, r3
     878:	2b00      	cmp	r3, #0
     87a:	d02c      	beq.n	8d6 <DAC_Handler+0x8a>
				module->job_buffer[module->transferred_conversions++];
     87c:	89e3      	ldrh	r3, [r4, #14]
     87e:	b29b      	uxth	r3, r3
     880:	1c5a      	adds	r2, r3, #1
     882:	b292      	uxth	r2, r2
     884:	81e2      	strh	r2, [r4, #14]
     886:	005b      	lsls	r3, r3, #1
     888:	68a2      	ldr	r2, [r4, #8]
     88a:	4694      	mov	ip, r2
     88c:	4463      	add	r3, ip
     88e:	881b      	ldrh	r3, [r3, #0]
     890:	b29b      	uxth	r3, r3
			dac_hw->DATABUF.reg =
     892:	81ab      	strh	r3, [r5, #12]
			module->remaining_conversions --;
     894:	89a3      	ldrh	r3, [r4, #12]
     896:	3b01      	subs	r3, #1
     898:	b29b      	uxth	r3, r3
     89a:	81a3      	strh	r3, [r4, #12]
			if (module->remaining_conversions == 0) {
     89c:	89a3      	ldrh	r3, [r4, #12]
     89e:	b29b      	uxth	r3, r3
     8a0:	2b00      	cmp	r3, #0
     8a2:	d118      	bne.n	8d6 <DAC_Handler+0x8a>
				module->job_status = STATUS_OK;
     8a4:	2200      	movs	r2, #0
     8a6:	3320      	adds	r3, #32
     8a8:	54e2      	strb	r2, [r4, r3]
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
     8aa:	3b1e      	subs	r3, #30
     8ac:	712b      	strb	r3, [r5, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
     8ae:	71ab      	strb	r3, [r5, #6]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     8b0:	2180      	movs	r1, #128	; 0x80
     8b2:	0409      	lsls	r1, r1, #16
     8b4:	337e      	adds	r3, #126	; 0x7e
     8b6:	4a0e      	ldr	r2, [pc, #56]	; (8f0 <DAC_Handler+0xa4>)
     8b8:	50d1      	str	r1, [r2, r3]
				if ((module->callback) &&
     8ba:	0023      	movs	r3, r4
     8bc:	3314      	adds	r3, #20
     8be:	d010      	beq.n	8e2 <DAC_Handler+0x96>
     8c0:	7ca3      	ldrb	r3, [r4, #18]
     8c2:	2b00      	cmp	r3, #0
     8c4:	d00a      	beq.n	8dc <DAC_Handler+0x90>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
     8c6:	2000      	movs	r0, #0
     8c8:	69e3      	ldr	r3, [r4, #28]
     8ca:	4798      	blx	r3
     8cc:	e006      	b.n	8dc <DAC_Handler+0x90>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
     8ce:	2000      	movs	r0, #0
     8d0:	69a3      	ldr	r3, [r4, #24]
     8d2:	4798      	blx	r3
     8d4:	e7c9      	b.n	86a <DAC_Handler+0x1e>
		if ((module->callback) &&
     8d6:	0023      	movs	r3, r4
     8d8:	3314      	adds	r3, #20
     8da:	d002      	beq.n	8e2 <DAC_Handler+0x96>
     8dc:	7c23      	ldrb	r3, [r4, #16]
     8de:	2b00      	cmp	r3, #0
     8e0:	d100      	bne.n	8e4 <DAC_Handler+0x98>
	_dac_interrupt_handler(0);
}
     8e2:	bd70      	pop	{r4, r5, r6, pc}
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
     8e4:	6963      	ldr	r3, [r4, #20]
     8e6:	2000      	movs	r0, #0
     8e8:	4798      	blx	r3
}
     8ea:	e7fa      	b.n	8e2 <DAC_Handler+0x96>
     8ec:	200000e4 	.word	0x200000e4
     8f0:	e000e100 	.word	0xe000e100

000008f4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     8f4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     8f6:	2200      	movs	r2, #0
     8f8:	4b10      	ldr	r3, [pc, #64]	; (93c <EIC_Handler+0x48>)
     8fa:	701a      	strb	r2, [r3, #0]
     8fc:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     8fe:	4910      	ldr	r1, [pc, #64]	; (940 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     900:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     902:	4e10      	ldr	r6, [pc, #64]	; (944 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     904:	4c0d      	ldr	r4, [pc, #52]	; (93c <EIC_Handler+0x48>)
     906:	e00a      	b.n	91e <EIC_Handler+0x2a>
		return eics[eic_index];
     908:	490d      	ldr	r1, [pc, #52]	; (940 <EIC_Handler+0x4c>)
     90a:	e008      	b.n	91e <EIC_Handler+0x2a>
     90c:	7823      	ldrb	r3, [r4, #0]
     90e:	3301      	adds	r3, #1
     910:	b2db      	uxtb	r3, r3
     912:	7023      	strb	r3, [r4, #0]
     914:	2b0f      	cmp	r3, #15
     916:	d810      	bhi.n	93a <EIC_Handler+0x46>
		return NULL;
     918:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     91a:	2b1f      	cmp	r3, #31
     91c:	d9f4      	bls.n	908 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     91e:	0028      	movs	r0, r5
     920:	4018      	ands	r0, r3
     922:	2201      	movs	r2, #1
     924:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     926:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     928:	4210      	tst	r0, r2
     92a:	d0ef      	beq.n	90c <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     92c:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     92e:	009b      	lsls	r3, r3, #2
     930:	599b      	ldr	r3, [r3, r6]
     932:	2b00      	cmp	r3, #0
     934:	d0ea      	beq.n	90c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     936:	4798      	blx	r3
     938:	e7e8      	b.n	90c <EIC_Handler+0x18>
			}
		}
	}
}
     93a:	bd70      	pop	{r4, r5, r6, pc}
     93c:	200000e8 	.word	0x200000e8
     940:	40001800 	.word	0x40001800
     944:	200000ec 	.word	0x200000ec

00000948 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     948:	4a04      	ldr	r2, [pc, #16]	; (95c <_extint_enable+0x14>)
     94a:	7813      	ldrb	r3, [r2, #0]
     94c:	2102      	movs	r1, #2
     94e:	430b      	orrs	r3, r1
     950:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     952:	7853      	ldrb	r3, [r2, #1]
     954:	b25b      	sxtb	r3, r3
     956:	2b00      	cmp	r3, #0
     958:	dbfb      	blt.n	952 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     95a:	4770      	bx	lr
     95c:	40001800 	.word	0x40001800

00000960 <_system_extint_init>:
{
     960:	b500      	push	{lr}
     962:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
     964:	4a12      	ldr	r2, [pc, #72]	; (9b0 <_system_extint_init+0x50>)
     966:	6993      	ldr	r3, [r2, #24]
     968:	2140      	movs	r1, #64	; 0x40
     96a:	430b      	orrs	r3, r1
     96c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     96e:	a901      	add	r1, sp, #4
     970:	2300      	movs	r3, #0
     972:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     974:	2003      	movs	r0, #3
     976:	4b0f      	ldr	r3, [pc, #60]	; (9b4 <_system_extint_init+0x54>)
     978:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     97a:	2003      	movs	r0, #3
     97c:	4b0e      	ldr	r3, [pc, #56]	; (9b8 <_system_extint_init+0x58>)
     97e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     980:	4a0e      	ldr	r2, [pc, #56]	; (9bc <_system_extint_init+0x5c>)
     982:	7813      	ldrb	r3, [r2, #0]
     984:	2101      	movs	r1, #1
     986:	430b      	orrs	r3, r1
     988:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     98a:	7853      	ldrb	r3, [r2, #1]
     98c:	b25b      	sxtb	r3, r3
     98e:	2b00      	cmp	r3, #0
     990:	dbfb      	blt.n	98a <_system_extint_init+0x2a>
     992:	4b0b      	ldr	r3, [pc, #44]	; (9c0 <_system_extint_init+0x60>)
     994:	0019      	movs	r1, r3
     996:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     998:	2200      	movs	r2, #0
     99a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     99c:	4299      	cmp	r1, r3
     99e:	d1fc      	bne.n	99a <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     9a0:	2210      	movs	r2, #16
     9a2:	4b08      	ldr	r3, [pc, #32]	; (9c4 <_system_extint_init+0x64>)
     9a4:	601a      	str	r2, [r3, #0]
	_extint_enable();
     9a6:	4b08      	ldr	r3, [pc, #32]	; (9c8 <_system_extint_init+0x68>)
     9a8:	4798      	blx	r3
}
     9aa:	b003      	add	sp, #12
     9ac:	bd00      	pop	{pc}
     9ae:	46c0      	nop			; (mov r8, r8)
     9b0:	40000400 	.word	0x40000400
     9b4:	00002799 	.word	0x00002799
     9b8:	0000270d 	.word	0x0000270d
     9bc:	40001800 	.word	0x40001800
     9c0:	200000ec 	.word	0x200000ec
     9c4:	e000e100 	.word	0xe000e100
     9c8:	00000949 	.word	0x00000949

000009cc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     9cc:	b500      	push	{lr}
     9ce:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     9d0:	ab01      	add	r3, sp, #4
     9d2:	2280      	movs	r2, #128	; 0x80
     9d4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     9d6:	780a      	ldrb	r2, [r1, #0]
     9d8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     9da:	784a      	ldrb	r2, [r1, #1]
     9dc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     9de:	788a      	ldrb	r2, [r1, #2]
     9e0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     9e2:	0019      	movs	r1, r3
     9e4:	4b01      	ldr	r3, [pc, #4]	; (9ec <port_pin_set_config+0x20>)
     9e6:	4798      	blx	r3
}
     9e8:	b003      	add	sp, #12
     9ea:	bd00      	pop	{pc}
     9ec:	00002891 	.word	0x00002891

000009f0 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     9f0:	6803      	ldr	r3, [r0, #0]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     9f2:	7a98      	ldrb	r0, [r3, #10]
     9f4:	09c0      	lsrs	r0, r0, #7
                return true;
        }

        return false;
}
     9f6:	4770      	bx	lr

000009f8 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     9f8:	b570      	push	{r4, r5, r6, lr}
     9fa:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     9fc:	6806      	ldr	r6, [r0, #0]
     9fe:	2208      	movs	r2, #8
     a00:	4b05      	ldr	r3, [pc, #20]	; (a18 <rtc_count_enable+0x20>)
     a02:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     a04:	4d05      	ldr	r5, [pc, #20]	; (a1c <rtc_count_enable+0x24>)
     a06:	0020      	movs	r0, r4
     a08:	47a8      	blx	r5
     a0a:	2800      	cmp	r0, #0
     a0c:	d1fb      	bne.n	a06 <rtc_count_enable+0xe>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     a0e:	8833      	ldrh	r3, [r6, #0]
     a10:	2202      	movs	r2, #2
     a12:	4313      	orrs	r3, r2
     a14:	8033      	strh	r3, [r6, #0]
}
     a16:	bd70      	pop	{r4, r5, r6, pc}
     a18:	e000e100 	.word	0xe000e100
     a1c:	000009f1 	.word	0x000009f1

00000a20 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     a20:	b570      	push	{r4, r5, r6, lr}
     a22:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     a24:	6806      	ldr	r6, [r0, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     a26:	2108      	movs	r1, #8
     a28:	2380      	movs	r3, #128	; 0x80
     a2a:	4a07      	ldr	r2, [pc, #28]	; (a48 <rtc_count_disable+0x28>)
     a2c:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     a2e:	4d07      	ldr	r5, [pc, #28]	; (a4c <rtc_count_disable+0x2c>)
     a30:	0020      	movs	r0, r4
     a32:	47a8      	blx	r5
     a34:	2800      	cmp	r0, #0
     a36:	d1fb      	bne.n	a30 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
     a38:	23c1      	movs	r3, #193	; 0xc1
     a3a:	71b3      	strb	r3, [r6, #6]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
     a3c:	7233      	strb	r3, [r6, #8]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     a3e:	8833      	ldrh	r3, [r6, #0]
     a40:	2202      	movs	r2, #2
     a42:	4393      	bics	r3, r2
     a44:	8033      	strh	r3, [r6, #0]
}
     a46:	bd70      	pop	{r4, r5, r6, pc}
     a48:	e000e100 	.word	0xe000e100
     a4c:	000009f1 	.word	0x000009f1

00000a50 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     a50:	b570      	push	{r4, r5, r6, lr}
     a52:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     a54:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
     a56:	4b07      	ldr	r3, [pc, #28]	; (a74 <rtc_count_reset+0x24>)
     a58:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     a5a:	2300      	movs	r3, #0
     a5c:	82a3      	strh	r3, [r4, #20]
	module->enabled_callback    = 0;
     a5e:	82e3      	strh	r3, [r4, #22]
#endif

	while (rtc_count_is_syncing(module)) {
     a60:	4d05      	ldr	r5, [pc, #20]	; (a78 <rtc_count_reset+0x28>)
     a62:	0020      	movs	r0, r4
     a64:	47a8      	blx	r5
     a66:	2800      	cmp	r0, #0
     a68:	d1fb      	bne.n	a62 <rtc_count_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     a6a:	8833      	ldrh	r3, [r6, #0]
     a6c:	2201      	movs	r2, #1
     a6e:	4313      	orrs	r3, r2
     a70:	8033      	strh	r3, [r6, #0]
}
     a72:	bd70      	pop	{r4, r5, r6, pc}
     a74:	00000a21 	.word	0x00000a21
     a78:	000009f1 	.word	0x000009f1

00000a7c <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a7e:	b083      	sub	sp, #12
     a80:	0004      	movs	r4, r0
     a82:	9101      	str	r1, [sp, #4]
     a84:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     a86:	6806      	ldr	r6, [r0, #0]

	while (rtc_count_is_syncing(module)) {
     a88:	4f11      	ldr	r7, [pc, #68]	; (ad0 <rtc_count_set_compare+0x54>)
     a8a:	0020      	movs	r0, r4
     a8c:	47b8      	blx	r7
     a8e:	2800      	cmp	r0, #0
     a90:	d1fb      	bne.n	a8a <rtc_count_set_compare+0xe>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     a92:	7923      	ldrb	r3, [r4, #4]
     a94:	2b00      	cmp	r3, #0
     a96:	d00a      	beq.n	aae <rtc_count_set_compare+0x32>
     a98:	2b01      	cmp	r3, #1
     a9a:	d116      	bne.n	aca <rtc_count_set_compare+0x4e>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
				return STATUS_ERR_INVALID_ARG;
     a9c:	3017      	adds	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     a9e:	2d01      	cmp	r5, #1
     aa0:	d814      	bhi.n	acc <rtc_count_set_compare+0x50>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     aa2:	3506      	adds	r5, #6
     aa4:	00ad      	lsls	r5, r5, #2
     aa6:	9b01      	ldr	r3, [sp, #4]
     aa8:	51ab      	str	r3, [r5, r6]
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     aaa:	2000      	movs	r0, #0
			break;
     aac:	e00e      	b.n	acc <rtc_count_set_compare+0x50>
				return STATUS_ERR_INVALID_ARG;
     aae:	2017      	movs	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     ab0:	2d02      	cmp	r5, #2
     ab2:	d80b      	bhi.n	acc <rtc_count_set_compare+0x50>
			if (comp_value > 0xffff) {
     ab4:	4b07      	ldr	r3, [pc, #28]	; (ad4 <rtc_count_set_compare+0x58>)
     ab6:	9a01      	ldr	r2, [sp, #4]
     ab8:	429a      	cmp	r2, r3
     aba:	d807      	bhi.n	acc <rtc_count_set_compare+0x50>
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     abc:	466b      	mov	r3, sp
     abe:	889b      	ldrh	r3, [r3, #4]
     ac0:	350c      	adds	r5, #12
     ac2:	006d      	lsls	r5, r5, #1
     ac4:	53ab      	strh	r3, [r5, r6]
	return STATUS_OK;
     ac6:	2000      	movs	r0, #0
			break;
     ac8:	e000      	b.n	acc <rtc_count_set_compare+0x50>
			return STATUS_ERR_BAD_FORMAT;
     aca:	201a      	movs	r0, #26
}
     acc:	b003      	add	sp, #12
     ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ad0:	000009f1 	.word	0x000009f1
     ad4:	0000ffff 	.word	0x0000ffff

00000ad8 <rtc_count_init>:
{
     ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
     ada:	b083      	sub	sp, #12
     adc:	0004      	movs	r4, r0
     ade:	0016      	movs	r6, r2
	module->hw = hw;
     ae0:	6001      	str	r1, [r0, #0]
     ae2:	4a2e      	ldr	r2, [pc, #184]	; (b9c <rtc_count_init+0xc4>)
     ae4:	6993      	ldr	r3, [r2, #24]
     ae6:	2120      	movs	r1, #32
     ae8:	430b      	orrs	r3, r1
     aea:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     aec:	a901      	add	r1, sp, #4
     aee:	2302      	movs	r3, #2
     af0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     af2:	2002      	movs	r0, #2
     af4:	4b2a      	ldr	r3, [pc, #168]	; (ba0 <rtc_count_init+0xc8>)
     af6:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     af8:	2002      	movs	r0, #2
     afa:	4b2a      	ldr	r3, [pc, #168]	; (ba4 <rtc_count_init+0xcc>)
     afc:	4798      	blx	r3
	rtc_count_reset(module);
     afe:	0020      	movs	r0, r4
     b00:	4b29      	ldr	r3, [pc, #164]	; (ba8 <rtc_count_init+0xd0>)
     b02:	4798      	blx	r3
	module->mode                = config->mode;
     b04:	78b3      	ldrb	r3, [r6, #2]
     b06:	7123      	strb	r3, [r4, #4]
	module->continuously_update = config->continuously_update;
     b08:	7933      	ldrb	r3, [r6, #4]
     b0a:	7163      	strb	r3, [r4, #5]
	_rtc_instance[0] = module;
     b0c:	4b27      	ldr	r3, [pc, #156]	; (bac <rtc_count_init+0xd4>)
     b0e:	601c      	str	r4, [r3, #0]
	Rtc *const rtc_module = module->hw;
     b10:	6827      	ldr	r7, [r4, #0]
	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     b12:	8833      	ldrh	r3, [r6, #0]
     b14:	803b      	strh	r3, [r7, #0]
	switch (config->mode) {
     b16:	78b3      	ldrb	r3, [r6, #2]
     b18:	2b00      	cmp	r3, #0
     b1a:	d021      	beq.n	b60 <rtc_count_init+0x88>
			return STATUS_ERR_INVALID_ARG;
     b1c:	2017      	movs	r0, #23
	switch (config->mode) {
     b1e:	2b01      	cmp	r3, #1
     b20:	d11c      	bne.n	b5c <rtc_count_init+0x84>
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     b22:	883b      	ldrh	r3, [r7, #0]
     b24:	b29b      	uxth	r3, r3
     b26:	803b      	strh	r3, [r7, #0]
			if (config->clear_on_match) {
     b28:	78f3      	ldrb	r3, [r6, #3]
     b2a:	2b00      	cmp	r3, #0
     b2c:	d003      	beq.n	b36 <rtc_count_init+0x5e>
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     b2e:	883b      	ldrh	r3, [r7, #0]
     b30:	2280      	movs	r2, #128	; 0x80
     b32:	4313      	orrs	r3, r2
     b34:	803b      	strh	r3, [r7, #0]
				while (rtc_count_is_syncing(module)) {
     b36:	4d1e      	ldr	r5, [pc, #120]	; (bb0 <rtc_count_init+0xd8>)
     b38:	0020      	movs	r0, r4
     b3a:	47a8      	blx	r5
     b3c:	2800      	cmp	r0, #0
     b3e:	d1fb      	bne.n	b38 <rtc_count_init+0x60>
				rtc_count_set_compare(module, config->compare_values[i],
     b40:	2200      	movs	r2, #0
     b42:	68b1      	ldr	r1, [r6, #8]
     b44:	0020      	movs	r0, r4
     b46:	4b1b      	ldr	r3, [pc, #108]	; (bb4 <rtc_count_init+0xdc>)
     b48:	4798      	blx	r3
	if (config->continuously_update) {
     b4a:	7933      	ldrb	r3, [r6, #4]
	return STATUS_OK;
     b4c:	2000      	movs	r0, #0
	if (config->continuously_update) {
     b4e:	2b00      	cmp	r3, #0
     b50:	d004      	beq.n	b5c <rtc_count_init+0x84>
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     b52:	887b      	ldrh	r3, [r7, #2]
     b54:	2280      	movs	r2, #128	; 0x80
     b56:	01d2      	lsls	r2, r2, #7
     b58:	4313      	orrs	r3, r2
     b5a:	807b      	strh	r3, [r7, #2]
}
     b5c:	b003      	add	sp, #12
     b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     b60:	883b      	ldrh	r3, [r7, #0]
     b62:	2204      	movs	r2, #4
     b64:	4313      	orrs	r3, r2
     b66:	803b      	strh	r3, [r7, #0]
			if (config->clear_on_match) {
     b68:	78f3      	ldrb	r3, [r6, #3]
				return STATUS_ERR_INVALID_ARG;
     b6a:	2017      	movs	r0, #23
			if (config->clear_on_match) {
     b6c:	2b00      	cmp	r3, #0
     b6e:	d1f5      	bne.n	b5c <rtc_count_init+0x84>
				while (rtc_count_is_syncing(module)) {
     b70:	4d0f      	ldr	r5, [pc, #60]	; (bb0 <rtc_count_init+0xd8>)
     b72:	0020      	movs	r0, r4
     b74:	47a8      	blx	r5
     b76:	2800      	cmp	r0, #0
     b78:	d1fb      	bne.n	b72 <rtc_count_init+0x9a>
				rtc_count_set_compare(module, config->compare_values[i],
     b7a:	2200      	movs	r2, #0
     b7c:	68b1      	ldr	r1, [r6, #8]
     b7e:	0020      	movs	r0, r4
     b80:	4b0c      	ldr	r3, [pc, #48]	; (bb4 <rtc_count_init+0xdc>)
     b82:	4798      	blx	r3
				while (rtc_count_is_syncing(module)) {
     b84:	4d0a      	ldr	r5, [pc, #40]	; (bb0 <rtc_count_init+0xd8>)
     b86:	0020      	movs	r0, r4
     b88:	47a8      	blx	r5
     b8a:	2800      	cmp	r0, #0
     b8c:	d1fb      	bne.n	b86 <rtc_count_init+0xae>
				rtc_count_set_compare(module, config->compare_values[i],
     b8e:	2201      	movs	r2, #1
     b90:	68f1      	ldr	r1, [r6, #12]
     b92:	0020      	movs	r0, r4
     b94:	4b07      	ldr	r3, [pc, #28]	; (bb4 <rtc_count_init+0xdc>)
     b96:	4798      	blx	r3
     b98:	e7d7      	b.n	b4a <rtc_count_init+0x72>
     b9a:	46c0      	nop			; (mov r8, r8)
     b9c:	40000400 	.word	0x40000400
     ba0:	00002799 	.word	0x00002799
     ba4:	0000270d 	.word	0x0000270d
     ba8:	00000a51 	.word	0x00000a51
     bac:	2000012c 	.word	0x2000012c
     bb0:	000009f1 	.word	0x000009f1
     bb4:	00000a7d 	.word	0x00000a7d

00000bb8 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
     bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bba:	0004      	movs	r4, r0
     bbc:	000e      	movs	r6, r1
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     bbe:	7903      	ldrb	r3, [r0, #4]
		return STATUS_ERR_UNSUPPORTED_DEV;
     bc0:	2015      	movs	r0, #21
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     bc2:	2b00      	cmp	r3, #0
     bc4:	d000      	beq.n	bc8 <rtc_count_set_period+0x10>

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;

	return STATUS_OK;
}
     bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	Rtc *const rtc_module = module->hw;
     bc8:	6827      	ldr	r7, [r4, #0]
	while (rtc_count_is_syncing(module)) {
     bca:	4d03      	ldr	r5, [pc, #12]	; (bd8 <rtc_count_set_period+0x20>)
     bcc:	0020      	movs	r0, r4
     bce:	47a8      	blx	r5
     bd0:	2800      	cmp	r0, #0
     bd2:	d1fb      	bne.n	bcc <rtc_count_set_period+0x14>
	rtc_module->MODE1.PER.reg = period_value;
     bd4:	82be      	strh	r6, [r7, #20]
	return STATUS_OK;
     bd6:	e7f6      	b.n	bc6 <rtc_count_set_period+0xe>
     bd8:	000009f1 	.word	0x000009f1

00000bdc <rtc_count_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     bdc:	2a02      	cmp	r2, #2
     bde:	d00b      	beq.n	bf8 <rtc_count_register_callback+0x1c>
		status = STATUS_OK;
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
     be0:	7903      	ldrb	r3, [r0, #4]
     be2:	2b00      	cmp	r3, #0
     be4:	d005      	beq.n	bf2 <rtc_count_register_callback+0x16>
     be6:	2b01      	cmp	r3, #1
     be8:	d112      	bne.n	c10 <rtc_count_register_callback+0x34>
     bea:	3316      	adds	r3, #22
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP32) {
     bec:	2a01      	cmp	r2, #1
     bee:	d80d      	bhi.n	c0c <rtc_count_register_callback+0x30>
     bf0:	e002      	b.n	bf8 <rtc_count_register_callback+0x1c>
     bf2:	2317      	movs	r3, #23
			}

			break;
		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP16) {
     bf4:	2a02      	cmp	r2, #2
     bf6:	d809      	bhi.n	c0c <rtc_count_register_callback+0x30>
		}
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
     bf8:	1c93      	adds	r3, r2, #2
     bfa:	009b      	lsls	r3, r3, #2
     bfc:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
     bfe:	8a83      	ldrh	r3, [r0, #20]
     c00:	2101      	movs	r1, #1
     c02:	4091      	lsls	r1, r2
     c04:	430b      	orrs	r3, r1
     c06:	b29b      	uxth	r3, r3
     c08:	8283      	strh	r3, [r0, #20]
     c0a:	2300      	movs	r3, #0
	}

	return status;
}
     c0c:	0018      	movs	r0, r3
     c0e:	4770      	bx	lr
			status = STATUS_ERR_INVALID_ARG;
     c10:	2317      	movs	r3, #23
     c12:	e7fb      	b.n	c0c <rtc_count_register_callback+0x30>

00000c14 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
     c14:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     c16:	6804      	ldr	r4, [r0, #0]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     c18:	2902      	cmp	r1, #2
     c1a:	d00b      	beq.n	c34 <rtc_count_enable_callback+0x20>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
	} else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << callback_type);
     c1c:	2201      	movs	r2, #1
     c1e:	408a      	lsls	r2, r1
     c20:	2303      	movs	r3, #3
     c22:	4013      	ands	r3, r2
     c24:	71e3      	strb	r3, [r4, #7]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
     c26:	8ac3      	ldrh	r3, [r0, #22]
     c28:	2201      	movs	r2, #1
     c2a:	408a      	lsls	r2, r1
     c2c:	4313      	orrs	r3, r2
     c2e:	b29b      	uxth	r3, r3
     c30:	82c3      	strh	r3, [r0, #22]
}
     c32:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
     c34:	2380      	movs	r3, #128	; 0x80
     c36:	71e3      	strb	r3, [r4, #7]
     c38:	e7f5      	b.n	c26 <rtc_count_enable_callback+0x12>
	...

00000c3c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     c3c:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
     c3e:	4b14      	ldr	r3, [pc, #80]	; (c90 <RTC_Handler+0x54>)
     c40:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
     c42:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
     c44:	8ad1      	ldrh	r1, [r2, #22]
	callback_mask &= module->registered_callback;
     c46:	8a93      	ldrh	r3, [r2, #20]
     c48:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     c4a:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     c4c:	79e3      	ldrb	r3, [r4, #7]
     c4e:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     c50:	b258      	sxtb	r0, r3
     c52:	2800      	cmp	r0, #0
     c54:	db06      	blt.n	c64 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     c56:	07d8      	lsls	r0, r3, #31
     c58:	d50f      	bpl.n	c7a <RTC_Handler+0x3e>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     c5a:	07cb      	lsls	r3, r1, #31
     c5c:	d40a      	bmi.n	c74 <RTC_Handler+0x38>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     c5e:	2301      	movs	r3, #1
     c60:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
     c62:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     c64:	074b      	lsls	r3, r1, #29
     c66:	d402      	bmi.n	c6e <RTC_Handler+0x32>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     c68:	2380      	movs	r3, #128	; 0x80
     c6a:	7223      	strb	r3, [r4, #8]
     c6c:	e7f9      	b.n	c62 <RTC_Handler+0x26>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     c6e:	6913      	ldr	r3, [r2, #16]
     c70:	4798      	blx	r3
     c72:	e7f9      	b.n	c68 <RTC_Handler+0x2c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     c74:	6893      	ldr	r3, [r2, #8]
     c76:	4798      	blx	r3
     c78:	e7f1      	b.n	c5e <RTC_Handler+0x22>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     c7a:	079b      	lsls	r3, r3, #30
     c7c:	d5f1      	bpl.n	c62 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     c7e:	078b      	lsls	r3, r1, #30
     c80:	d402      	bmi.n	c88 <RTC_Handler+0x4c>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     c82:	2302      	movs	r3, #2
     c84:	7223      	strb	r3, [r4, #8]
}
     c86:	e7ec      	b.n	c62 <RTC_Handler+0x26>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     c88:	68d3      	ldr	r3, [r2, #12]
     c8a:	4798      	blx	r3
     c8c:	e7f9      	b.n	c82 <RTC_Handler+0x46>
     c8e:	46c0      	nop			; (mov r8, r8)
     c90:	2000012c 	.word	0x2000012c

00000c94 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     c94:	6802      	ldr	r2, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     c96:	8a13      	ldrh	r3, [r2, #16]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     c98:	b21b      	sxth	r3, r3
     c9a:	2b00      	cmp	r3, #0
     c9c:	dbfb      	blt.n	c96 <_i2c_master_wait_for_sync+0x2>
		/* Wait for I2C module to sync. */
	}
}
     c9e:	4770      	bx	lr

00000ca0 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     ca0:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     ca2:	7b9a      	ldrb	r2, [r3, #14]
     ca4:	0792      	lsls	r2, r2, #30
     ca6:	d507      	bpl.n	cb8 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     ca8:	2202      	movs	r2, #2
     caa:	739a      	strb	r2, [r3, #14]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     cac:	8a1b      	ldrh	r3, [r3, #16]
     cae:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     cb0:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     cb2:	17db      	asrs	r3, r3, #31
     cb4:	4018      	ands	r0, r3
}
     cb6:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     cb8:	8a1a      	ldrh	r2, [r3, #16]
     cba:	0752      	lsls	r2, r2, #29
     cbc:	d506      	bpl.n	ccc <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     cbe:	6859      	ldr	r1, [r3, #4]
     cc0:	22c0      	movs	r2, #192	; 0xc0
     cc2:	0292      	lsls	r2, r2, #10
     cc4:	430a      	orrs	r2, r1
     cc6:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     cc8:	2018      	movs	r0, #24
     cca:	e7f4      	b.n	cb6 <_i2c_master_address_response+0x16>
	return STATUS_OK;
     ccc:	2000      	movs	r0, #0
     cce:	e7f2      	b.n	cb6 <_i2c_master_address_response+0x16>

00000cd0 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
static enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     cd0:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     cd2:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     cd4:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     cd6:	2401      	movs	r4, #1
     cd8:	2502      	movs	r5, #2
     cda:	7b91      	ldrb	r1, [r2, #14]
     cdc:	4221      	tst	r1, r4
     cde:	d10b      	bne.n	cf8 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     ce0:	7b91      	ldrb	r1, [r2, #14]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     ce2:	4229      	tst	r1, r5
     ce4:	d106      	bne.n	cf4 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     ce6:	3301      	adds	r3, #1
     ce8:	b29b      	uxth	r3, r3
     cea:	8901      	ldrh	r1, [r0, #8]
     cec:	4299      	cmp	r1, r3
     cee:	d8f4      	bhi.n	cda <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     cf0:	2012      	movs	r0, #18
     cf2:	e002      	b.n	cfa <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     cf4:	2000      	movs	r0, #0
     cf6:	e000      	b.n	cfa <_i2c_master_wait_for_bus+0x2a>
     cf8:	2000      	movs	r0, #0
}
     cfa:	bd30      	pop	{r4, r5, pc}

00000cfc <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
     cfe:	46de      	mov	lr, fp
     d00:	4657      	mov	r7, sl
     d02:	464e      	mov	r6, r9
     d04:	4645      	mov	r5, r8
     d06:	b5e0      	push	{r5, r6, r7, lr}
     d08:	b083      	sub	sp, #12
     d0a:	0006      	movs	r6, r0
     d0c:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     d0e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     d10:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	/* Set address and direction bit. Will send start command on bus. */
	i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ;
     d12:	880b      	ldrh	r3, [r1, #0]
     d14:	005b      	lsls	r3, r3, #1
     d16:	2201      	movs	r2, #1
     d18:	4313      	orrs	r3, r2
     d1a:	b2db      	uxtb	r3, r3
     d1c:	752b      	strb	r3, [r5, #20]

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     d1e:	4b32      	ldr	r3, [pc, #200]	; (de8 <_i2c_master_read_packet+0xec>)
     d20:	4798      	blx	r3
     d22:	9001      	str	r0, [sp, #4]

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     d24:	686b      	ldr	r3, [r5, #4]
     d26:	4a31      	ldr	r2, [pc, #196]	; (dec <_i2c_master_read_packet+0xf0>)
     d28:	4013      	ands	r3, r2
     d2a:	606b      	str	r3, [r5, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     d2c:	2800      	cmp	r0, #0
     d2e:	d007      	beq.n	d40 <_i2c_master_read_packet+0x44>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     d30:	9801      	ldr	r0, [sp, #4]
     d32:	b003      	add	sp, #12
     d34:	bc3c      	pop	{r2, r3, r4, r5}
     d36:	4690      	mov	r8, r2
     d38:	4699      	mov	r9, r3
     d3a:	46a2      	mov	sl, r4
     d3c:	46ab      	mov	fp, r5
     d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp_status = _i2c_master_address_response(module);
     d40:	0030      	movs	r0, r6
     d42:	4b2b      	ldr	r3, [pc, #172]	; (df0 <_i2c_master_read_packet+0xf4>)
     d44:	4798      	blx	r3
     d46:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     d48:	2800      	cmp	r0, #0
     d4a:	d1f1      	bne.n	d30 <_i2c_master_read_packet+0x34>
     d4c:	3c01      	subs	r4, #1
     d4e:	b2a4      	uxth	r4, r4
     d50:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     d52:	4b28      	ldr	r3, [pc, #160]	; (df4 <_i2c_master_read_packet+0xf8>)
     d54:	469a      	mov	sl, r3
				_i2c_master_wait_for_sync(module);
     d56:	4b28      	ldr	r3, [pc, #160]	; (df8 <_i2c_master_read_packet+0xfc>)
     d58:	469b      	mov	fp, r3
     d5a:	e011      	b.n	d80 <_i2c_master_read_packet+0x84>
     d5c:	0030      	movs	r0, r6
     d5e:	47d8      	blx	fp
				packet->data[counter++] = i2c_module->DATA.reg;
     d60:	4643      	mov	r3, r8
     d62:	1c5f      	adds	r7, r3, #1
     d64:	b2bf      	uxth	r7, r7
     d66:	7e2b      	ldrb	r3, [r5, #24]
     d68:	464a      	mov	r2, r9
     d6a:	6852      	ldr	r2, [r2, #4]
     d6c:	4641      	mov	r1, r8
     d6e:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     d70:	0030      	movs	r0, r6
     d72:	4b1d      	ldr	r3, [pc, #116]	; (de8 <_i2c_master_read_packet+0xec>)
     d74:	4798      	blx	r3
     d76:	3c01      	subs	r4, #1
     d78:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     d7a:	2800      	cmp	r0, #0
     d7c:	d112      	bne.n	da4 <_i2c_master_read_packet+0xa8>
				packet->data[counter++] = i2c_module->DATA.reg;
     d7e:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     d80:	4554      	cmp	r4, sl
     d82:	d011      	beq.n	da8 <_i2c_master_read_packet+0xac>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     d84:	8a2b      	ldrh	r3, [r5, #16]
     d86:	069b      	lsls	r3, r3, #26
     d88:	d52b      	bpl.n	de2 <_i2c_master_read_packet+0xe6>
			if (module->send_nack && tmp_data_length == 0) {
     d8a:	7af3      	ldrb	r3, [r6, #11]
     d8c:	2b00      	cmp	r3, #0
     d8e:	d0e5      	beq.n	d5c <_i2c_master_read_packet+0x60>
     d90:	2c00      	cmp	r4, #0
     d92:	d1e3      	bne.n	d5c <_i2c_master_read_packet+0x60>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     d94:	686a      	ldr	r2, [r5, #4]
     d96:	2380      	movs	r3, #128	; 0x80
     d98:	02db      	lsls	r3, r3, #11
     d9a:	4313      	orrs	r3, r2
     d9c:	606b      	str	r3, [r5, #4]
     d9e:	3c01      	subs	r4, #1
     da0:	b2a4      	uxth	r4, r4
     da2:	e7ed      	b.n	d80 <_i2c_master_read_packet+0x84>
				packet->data[counter++] = i2c_module->DATA.reg;
     da4:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     da6:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     da8:	7ab3      	ldrb	r3, [r6, #10]
     daa:	2b00      	cmp	r3, #0
     dac:	d010      	beq.n	dd0 <_i2c_master_read_packet+0xd4>
			_i2c_master_wait_for_sync(module);
     dae:	0030      	movs	r0, r6
     db0:	4b11      	ldr	r3, [pc, #68]	; (df8 <_i2c_master_read_packet+0xfc>)
     db2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     db4:	686a      	ldr	r2, [r5, #4]
     db6:	23c0      	movs	r3, #192	; 0xc0
     db8:	029b      	lsls	r3, r3, #10
     dba:	4313      	orrs	r3, r2
     dbc:	606b      	str	r3, [r5, #4]
		_i2c_master_wait_for_sync(module);
     dbe:	0030      	movs	r0, r6
     dc0:	4b0d      	ldr	r3, [pc, #52]	; (df8 <_i2c_master_read_packet+0xfc>)
     dc2:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     dc4:	7e2a      	ldrb	r2, [r5, #24]
     dc6:	464b      	mov	r3, r9
     dc8:	685b      	ldr	r3, [r3, #4]
     dca:	4641      	mov	r1, r8
     dcc:	545a      	strb	r2, [r3, r1]
     dce:	e7af      	b.n	d30 <_i2c_master_read_packet+0x34>
		  	_i2c_master_wait_for_sync(module);
     dd0:	0030      	movs	r0, r6
     dd2:	4b09      	ldr	r3, [pc, #36]	; (df8 <_i2c_master_read_packet+0xfc>)
     dd4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(1);
     dd6:	686a      	ldr	r2, [r5, #4]
     dd8:	2380      	movs	r3, #128	; 0x80
     dda:	025b      	lsls	r3, r3, #9
     ddc:	4313      	orrs	r3, r2
     dde:	606b      	str	r3, [r5, #4]
     de0:	e7ed      	b.n	dbe <_i2c_master_read_packet+0xc2>
				return STATUS_ERR_PACKET_COLLISION;
     de2:	2341      	movs	r3, #65	; 0x41
     de4:	9301      	str	r3, [sp, #4]
     de6:	e7a3      	b.n	d30 <_i2c_master_read_packet+0x34>
     de8:	00000cd1 	.word	0x00000cd1
     dec:	fffbffff 	.word	0xfffbffff
     df0:	00000ca1 	.word	0x00000ca1
     df4:	0000ffff 	.word	0x0000ffff
     df8:	00000c95 	.word	0x00000c95

00000dfc <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
     dfe:	46de      	mov	lr, fp
     e00:	4657      	mov	r7, sl
     e02:	464e      	mov	r6, r9
     e04:	4645      	mov	r5, r8
     e06:	b5e0      	push	{r5, r6, r7, lr}
     e08:	b083      	sub	sp, #12
     e0a:	0006      	movs	r6, r0
     e0c:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     e0e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     e10:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     e12:	4b24      	ldr	r3, [pc, #144]	; (ea4 <_i2c_master_write_packet+0xa8>)
     e14:	4798      	blx	r3

	/* Set address and direction bit. Will send start command on bus. */
	i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE;
     e16:	883b      	ldrh	r3, [r7, #0]
     e18:	005b      	lsls	r3, r3, #1
     e1a:	b2db      	uxtb	r3, r3
     e1c:	752b      	strb	r3, [r5, #20]

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     e1e:	0030      	movs	r0, r6
     e20:	4b21      	ldr	r3, [pc, #132]	; (ea8 <_i2c_master_write_packet+0xac>)
     e22:	4798      	blx	r3
     e24:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     e26:	2800      	cmp	r0, #0
     e28:	d007      	beq.n	e3a <_i2c_master_write_packet+0x3e>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     e2a:	9801      	ldr	r0, [sp, #4]
     e2c:	b003      	add	sp, #12
     e2e:	bc3c      	pop	{r2, r3, r4, r5}
     e30:	4690      	mov	r8, r2
     e32:	4699      	mov	r9, r3
     e34:	46a2      	mov	sl, r4
     e36:	46ab      	mov	fp, r5
     e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp_status = _i2c_master_address_response(module);
     e3a:	0030      	movs	r0, r6
     e3c:	4b1b      	ldr	r3, [pc, #108]	; (eac <_i2c_master_write_packet+0xb0>)
     e3e:	4798      	blx	r3
     e40:	1e03      	subs	r3, r0, #0
     e42:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     e44:	d1f1      	bne.n	e2a <_i2c_master_write_packet+0x2e>
     e46:	46a0      	mov	r8, r4
     e48:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     e4a:	3320      	adds	r3, #32
     e4c:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     e4e:	4b15      	ldr	r3, [pc, #84]	; (ea4 <_i2c_master_write_packet+0xa8>)
     e50:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     e52:	4b15      	ldr	r3, [pc, #84]	; (ea8 <_i2c_master_write_packet+0xac>)
     e54:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     e56:	4544      	cmp	r4, r8
     e58:	d014      	beq.n	e84 <_i2c_master_write_packet+0x88>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     e5a:	8a2b      	ldrh	r3, [r5, #16]
     e5c:	464a      	mov	r2, r9
     e5e:	4213      	tst	r3, r2
     e60:	d01c      	beq.n	e9c <_i2c_master_write_packet+0xa0>
			_i2c_master_wait_for_sync(module);
     e62:	0030      	movs	r0, r6
     e64:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     e66:	687b      	ldr	r3, [r7, #4]
     e68:	5d1b      	ldrb	r3, [r3, r4]
     e6a:	762b      	strb	r3, [r5, #24]
			tmp_status = _i2c_master_wait_for_bus(module);
     e6c:	0030      	movs	r0, r6
     e6e:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     e70:	2800      	cmp	r0, #0
     e72:	d106      	bne.n	e82 <_i2c_master_write_packet+0x86>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     e74:	8a2b      	ldrh	r3, [r5, #16]
     e76:	3401      	adds	r4, #1
     e78:	075b      	lsls	r3, r3, #29
     e7a:	d5ec      	bpl.n	e56 <_i2c_master_write_packet+0x5a>
				tmp_status = STATUS_ERR_OVERFLOW;
     e7c:	231e      	movs	r3, #30
     e7e:	9301      	str	r3, [sp, #4]
     e80:	e000      	b.n	e84 <_i2c_master_write_packet+0x88>
			tmp_status = _i2c_master_wait_for_bus(module);
     e82:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     e84:	7ab3      	ldrb	r3, [r6, #10]
     e86:	2b00      	cmp	r3, #0
     e88:	d0cf      	beq.n	e2a <_i2c_master_write_packet+0x2e>
			_i2c_master_wait_for_sync(module);
     e8a:	0030      	movs	r0, r6
     e8c:	4b05      	ldr	r3, [pc, #20]	; (ea4 <_i2c_master_write_packet+0xa8>)
     e8e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     e90:	686a      	ldr	r2, [r5, #4]
     e92:	23c0      	movs	r3, #192	; 0xc0
     e94:	029b      	lsls	r3, r3, #10
     e96:	4313      	orrs	r3, r2
     e98:	606b      	str	r3, [r5, #4]
     e9a:	e7c6      	b.n	e2a <_i2c_master_write_packet+0x2e>
				return STATUS_ERR_PACKET_COLLISION;
     e9c:	2341      	movs	r3, #65	; 0x41
     e9e:	9301      	str	r3, [sp, #4]
     ea0:	e7c3      	b.n	e2a <_i2c_master_write_packet+0x2e>
     ea2:	46c0      	nop			; (mov r8, r8)
     ea4:	00000c95 	.word	0x00000c95
     ea8:	00000cd1 	.word	0x00000cd1
     eac:	00000ca1 	.word	0x00000ca1

00000eb0 <i2c_master_init>:
{
     eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
     eb2:	46ce      	mov	lr, r9
     eb4:	4647      	mov	r7, r8
     eb6:	b580      	push	{r7, lr}
     eb8:	b083      	sub	sp, #12
     eba:	0007      	movs	r7, r0
     ebc:	000d      	movs	r5, r1
     ebe:	0016      	movs	r6, r2
	module->hw = hw;
     ec0:	6039      	str	r1, [r7, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ec2:	0008      	movs	r0, r1
     ec4:	4b52      	ldr	r3, [pc, #328]	; (1010 <i2c_master_init+0x160>)
     ec6:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
     ec8:	4a52      	ldr	r2, [pc, #328]	; (1014 <i2c_master_init+0x164>)
     eca:	6a11      	ldr	r1, [r2, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     ecc:	1c84      	adds	r4, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     ece:	2301      	movs	r3, #1
     ed0:	40a3      	lsls	r3, r4
     ed2:	430b      	orrs	r3, r1
     ed4:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     ed6:	a901      	add	r1, sp, #4
     ed8:	7933      	ldrb	r3, [r6, #4]
     eda:	700b      	strb	r3, [r1, #0]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     edc:	300d      	adds	r0, #13
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     ede:	b2c4      	uxtb	r4, r0
     ee0:	0020      	movs	r0, r4
     ee2:	4b4d      	ldr	r3, [pc, #308]	; (1018 <i2c_master_init+0x168>)
     ee4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     ee6:	0020      	movs	r0, r4
     ee8:	4b4c      	ldr	r3, [pc, #304]	; (101c <i2c_master_init+0x16c>)
     eea:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     eec:	7930      	ldrb	r0, [r6, #4]
     eee:	2100      	movs	r1, #0
     ef0:	4b4b      	ldr	r3, [pc, #300]	; (1020 <i2c_master_init+0x170>)
     ef2:	4798      	blx	r3
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     ef4:	682b      	ldr	r3, [r5, #0]
		return STATUS_ERR_DENIED;
     ef6:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     ef8:	079b      	lsls	r3, r3, #30
     efa:	d504      	bpl.n	f06 <i2c_master_init+0x56>
}
     efc:	b003      	add	sp, #12
     efe:	bc0c      	pop	{r2, r3}
     f00:	4690      	mov	r8, r2
     f02:	4699      	mov	r9, r3
     f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     f06:	682b      	ldr	r3, [r5, #0]
		return STATUS_BUSY;
     f08:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     f0a:	07db      	lsls	r3, r3, #31
     f0c:	d4f6      	bmi.n	efc <i2c_master_init+0x4c>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     f0e:	6838      	ldr	r0, [r7, #0]
     f10:	4b3f      	ldr	r3, [pc, #252]	; (1010 <i2c_master_init+0x160>)
     f12:	4698      	mov	r8, r3
     f14:	4798      	blx	r3
     f16:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     f18:	4942      	ldr	r1, [pc, #264]	; (1024 <i2c_master_init+0x174>)
     f1a:	4b43      	ldr	r3, [pc, #268]	; (1028 <i2c_master_init+0x178>)
     f1c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     f1e:	00a4      	lsls	r4, r4, #2
     f20:	4b42      	ldr	r3, [pc, #264]	; (102c <i2c_master_init+0x17c>)
     f22:	50e7      	str	r7, [r4, r3]
	module->registered_callback = 0;
     f24:	2300      	movs	r3, #0
     f26:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
     f28:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
     f2a:	2200      	movs	r2, #0
     f2c:	4691      	mov	r9, r2
     f2e:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
     f30:	83bb      	strh	r3, [r7, #28]
	module->status = STATUS_OK;
     f32:	2225      	movs	r2, #37	; 0x25
     f34:	4649      	mov	r1, r9
     f36:	54b9      	strb	r1, [r7, r2]
	module->buffer = NULL;
     f38:	623b      	str	r3, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE_I2C_MASTER;
     f3a:	3314      	adds	r3, #20
     f3c:	602b      	str	r3, [r5, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     f3e:	683c      	ldr	r4, [r7, #0]
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     f40:	0020      	movs	r0, r4
     f42:	47c0      	blx	r8
     f44:	4680      	mov	r8, r0
     f46:	2380      	movs	r3, #128	; 0x80
     f48:	466a      	mov	r2, sp
     f4a:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     f4c:	466b      	mov	r3, sp
     f4e:	464a      	mov	r2, r9
     f50:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     f52:	2301      	movs	r3, #1
     f54:	466a      	mov	r2, sp
     f56:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     f58:	466b      	mov	r3, sp
     f5a:	464a      	mov	r2, r9
     f5c:	70da      	strb	r2, [r3, #3]
	uint32_t pad0 = config->pinmux_pad0;
     f5e:	6970      	ldr	r0, [r6, #20]
	uint32_t pad1 = config->pinmux_pad1;
     f60:	69b5      	ldr	r5, [r6, #24]
	if (pad0 == PINMUX_DEFAULT) {
     f62:	2800      	cmp	r0, #0
     f64:	d048      	beq.n	ff8 <i2c_master_init+0x148>
	pin_conf.mux_position = pad0 & 0xFFFF;
     f66:	466b      	mov	r3, sp
     f68:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     f6a:	2302      	movs	r3, #2
     f6c:	466a      	mov	r2, sp
     f6e:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     f70:	0c00      	lsrs	r0, r0, #16
     f72:	b2c0      	uxtb	r0, r0
     f74:	4669      	mov	r1, sp
     f76:	4b2e      	ldr	r3, [pc, #184]	; (1030 <i2c_master_init+0x180>)
     f78:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     f7a:	2d00      	cmp	r5, #0
     f7c:	d041      	beq.n	1002 <i2c_master_init+0x152>
	pin_conf.mux_position = pad1 & 0xFFFF;
     f7e:	466b      	mov	r3, sp
     f80:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     f82:	2302      	movs	r3, #2
     f84:	466a      	mov	r2, sp
     f86:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     f88:	0c28      	lsrs	r0, r5, #16
     f8a:	b2c0      	uxtb	r0, r0
     f8c:	4669      	mov	r1, sp
     f8e:	4b28      	ldr	r3, [pc, #160]	; (1030 <i2c_master_init+0x180>)
     f90:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     f92:	89b3      	ldrh	r3, [r6, #12]
     f94:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
     f96:	89f3      	ldrh	r3, [r6, #14]
     f98:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     f9a:	7c32      	ldrb	r2, [r6, #16]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     f9c:	2380      	movs	r3, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     f9e:	2a00      	cmp	r2, #0
     fa0:	d104      	bne.n	fac <i2c_master_init+0xfc>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     fa2:	4b24      	ldr	r3, [pc, #144]	; (1034 <i2c_master_init+0x184>)
     fa4:	789b      	ldrb	r3, [r3, #2]
     fa6:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     fa8:	0fdb      	lsrs	r3, r3, #31
     faa:	01db      	lsls	r3, r3, #7
		tmp_ctrla |= config->start_hold_time;
     fac:	68b2      	ldr	r2, [r6, #8]
     fae:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     fb0:	7f32      	ldrb	r2, [r6, #28]
     fb2:	2a00      	cmp	r2, #0
     fb4:	d002      	beq.n	fbc <i2c_master_init+0x10c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUT;
     fb6:	2280      	movs	r2, #128	; 0x80
     fb8:	05d2      	lsls	r2, r2, #23
     fba:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     fbc:	6822      	ldr	r2, [r4, #0]
     fbe:	6a31      	ldr	r1, [r6, #32]
     fc0:	430a      	orrs	r2, r1
     fc2:	4313      	orrs	r3, r2
     fc4:	6023      	str	r3, [r4, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     fc6:	2380      	movs	r3, #128	; 0x80
     fc8:	005b      	lsls	r3, r3, #1
     fca:	6063      	str	r3, [r4, #4]
	tmp_baud = (int32_t)(div_ceil(
     fcc:	4645      	mov	r5, r8
     fce:	350d      	adds	r5, #13
     fd0:	b2e8      	uxtb	r0, r5
     fd2:	4b19      	ldr	r3, [pc, #100]	; (1038 <i2c_master_init+0x188>)
     fd4:	4798      	blx	r3
     fd6:	6833      	ldr	r3, [r6, #0]
     fd8:	21fa      	movs	r1, #250	; 0xfa
     fda:	00c9      	lsls	r1, r1, #3
     fdc:	4359      	muls	r1, r3
     fde:	1e4b      	subs	r3, r1, #1
     fe0:	1818      	adds	r0, r3, r0
     fe2:	4b16      	ldr	r3, [pc, #88]	; (103c <i2c_master_init+0x18c>)
     fe4:	4798      	blx	r3
				(2000*(config->baud_rate))) - 5);
     fe6:	1f43      	subs	r3, r0, #5
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
     fe8:	2040      	movs	r0, #64	; 0x40
	if (tmp_baud > 255 || tmp_baud < 0) {
     fea:	2bff      	cmp	r3, #255	; 0xff
     fec:	d900      	bls.n	ff0 <i2c_master_init+0x140>
     fee:	e785      	b.n	efc <i2c_master_init+0x4c>
		i2c_module->BAUD.reg = (uint8_t)tmp_baud;
     ff0:	b2db      	uxtb	r3, r3
     ff2:	8163      	strh	r3, [r4, #10]
	enum status_code tmp_status_code = STATUS_OK;
     ff4:	2000      	movs	r0, #0
     ff6:	e781      	b.n	efc <i2c_master_init+0x4c>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     ff8:	2100      	movs	r1, #0
     ffa:	0020      	movs	r0, r4
     ffc:	4b10      	ldr	r3, [pc, #64]	; (1040 <i2c_master_init+0x190>)
     ffe:	4798      	blx	r3
    1000:	e7b1      	b.n	f66 <i2c_master_init+0xb6>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    1002:	2101      	movs	r1, #1
    1004:	0020      	movs	r0, r4
    1006:	4b0e      	ldr	r3, [pc, #56]	; (1040 <i2c_master_init+0x190>)
    1008:	4798      	blx	r3
    100a:	0005      	movs	r5, r0
    100c:	e7b7      	b.n	f7e <i2c_master_init+0xce>
    100e:	46c0      	nop			; (mov r8, r8)
    1010:	000015dd 	.word	0x000015dd
    1014:	40000400 	.word	0x40000400
    1018:	00002799 	.word	0x00002799
    101c:	0000270d 	.word	0x0000270d
    1020:	00001495 	.word	0x00001495
    1024:	0000114d 	.word	0x0000114d
    1028:	00001629 	.word	0x00001629
    102c:	20000130 	.word	0x20000130
    1030:	00002891 	.word	0x00002891
    1034:	41002000 	.word	0x41002000
    1038:	000027b5 	.word	0x000027b5
    103c:	00003059 	.word	0x00003059
    1040:	000014e1 	.word	0x000014e1

00001044 <i2c_master_read_packet_wait>:
{
    1044:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
    1046:	8b83      	ldrh	r3, [r0, #28]
    1048:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    104a:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    104c:	2b00      	cmp	r3, #0
    104e:	d001      	beq.n	1054 <i2c_master_read_packet_wait+0x10>
}
    1050:	0010      	movs	r0, r2
    1052:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    1054:	3301      	adds	r3, #1
    1056:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    1058:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    105a:	4b02      	ldr	r3, [pc, #8]	; (1064 <i2c_master_read_packet_wait+0x20>)
    105c:	4798      	blx	r3
    105e:	0002      	movs	r2, r0
    1060:	e7f6      	b.n	1050 <i2c_master_read_packet_wait+0xc>
    1062:	46c0      	nop			; (mov r8, r8)
    1064:	00000cfd 	.word	0x00000cfd

00001068 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1068:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    106a:	8b83      	ldrh	r3, [r0, #28]
    106c:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    106e:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    1070:	2b00      	cmp	r3, #0
    1072:	d001      	beq.n	1078 <i2c_master_write_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;
	
	return _i2c_master_write_packet(module, packet);
}
    1074:	0010      	movs	r0, r2
    1076:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    1078:	3301      	adds	r3, #1
    107a:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    107c:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
    107e:	4b02      	ldr	r3, [pc, #8]	; (1088 <i2c_master_write_packet_wait+0x20>)
    1080:	4798      	blx	r3
    1082:	0002      	movs	r2, r0
    1084:	e7f6      	b.n	1074 <i2c_master_write_packet_wait+0xc>
    1086:	46c0      	nop			; (mov r8, r8)
    1088:	00000dfd 	.word	0x00000dfd

0000108c <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    108c:	6802      	ldr	r2, [r0, #0]
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
    108e:	8a13      	ldrh	r3, [r2, #16]
	while (i2c_master_is_syncing(module)) {
    1090:	b21b      	sxth	r3, r3
    1092:	2b00      	cmp	r3, #0
    1094:	dbfb      	blt.n	108e <_i2c_master_wait_for_sync+0x2>
}
    1096:	4770      	bx	lr

00001098 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    1098:	b570      	push	{r4, r5, r6, lr}
    109a:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    109c:	6806      	ldr	r6, [r0, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
    109e:	8b45      	ldrh	r5, [r0, #26]
    10a0:	8b83      	ldrh	r3, [r0, #28]
    10a2:	1aed      	subs	r5, r5, r3
    10a4:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
    10a6:	8b83      	ldrh	r3, [r0, #28]
    10a8:	3b01      	subs	r3, #1
    10aa:	b29b      	uxth	r3, r3
    10ac:	8383      	strh	r3, [r0, #28]

	if (!module->buffer_remaining) {
    10ae:	8b83      	ldrh	r3, [r0, #28]
    10b0:	b29b      	uxth	r3, r3
    10b2:	2b00      	cmp	r3, #0
    10b4:	d11c      	bne.n	10f0 <_i2c_master_read+0x58>
		/* Send nack */
	  	if (module->send_nack)
    10b6:	7ac3      	ldrb	r3, [r0, #11]
    10b8:	2b00      	cmp	r3, #0
    10ba:	d004      	beq.n	10c6 <_i2c_master_read+0x2e>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    10bc:	6872      	ldr	r2, [r6, #4]
    10be:	2380      	movs	r3, #128	; 0x80
    10c0:	02db      	lsls	r3, r3, #11
    10c2:	4313      	orrs	r3, r2
    10c4:	6073      	str	r3, [r6, #4]
		if (module->send_stop) {
    10c6:	7aa3      	ldrb	r3, [r4, #10]
    10c8:	2b00      	cmp	r3, #0
    10ca:	d008      	beq.n	10de <_i2c_master_read+0x46>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    10cc:	0020      	movs	r0, r4
    10ce:	4b0f      	ldr	r3, [pc, #60]	; (110c <_i2c_master_read+0x74>)
    10d0:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    10d2:	6872      	ldr	r2, [r6, #4]
    10d4:	23c0      	movs	r3, #192	; 0xc0
    10d6:	029b      	lsls	r3, r3, #10
    10d8:	4313      	orrs	r3, r2
    10da:	6073      	str	r3, [r6, #4]
    10dc:	e00c      	b.n	10f8 <_i2c_master_read+0x60>
		} else {
		  	_i2c_master_wait_for_sync(module);
    10de:	0020      	movs	r0, r4
    10e0:	4b0a      	ldr	r3, [pc, #40]	; (110c <_i2c_master_read+0x74>)
    10e2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(1);
    10e4:	6872      	ldr	r2, [r6, #4]
    10e6:	2380      	movs	r3, #128	; 0x80
    10e8:	025b      	lsls	r3, r3, #9
    10ea:	4313      	orrs	r3, r2
    10ec:	6073      	str	r3, [r6, #4]
    10ee:	e003      	b.n	10f8 <_i2c_master_read+0x60>
		}
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    10f0:	6873      	ldr	r3, [r6, #4]
    10f2:	4a07      	ldr	r2, [pc, #28]	; (1110 <_i2c_master_read+0x78>)
    10f4:	4013      	ands	r3, r2
    10f6:	6073      	str	r3, [r6, #4]
	}

	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    10f8:	0020      	movs	r0, r4
    10fa:	4b04      	ldr	r3, [pc, #16]	; (110c <_i2c_master_read+0x74>)
    10fc:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    10fe:	6a23      	ldr	r3, [r4, #32]
    1100:	195d      	adds	r5, r3, r5
    1102:	7e33      	ldrb	r3, [r6, #24]
    1104:	b2db      	uxtb	r3, r3
    1106:	702b      	strb	r3, [r5, #0]
}
    1108:	bd70      	pop	{r4, r5, r6, pc}
    110a:	46c0      	nop			; (mov r8, r8)
    110c:	0000108d 	.word	0x0000108d
    1110:	fffbffff 	.word	0xfffbffff

00001114 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    1114:	b570      	push	{r4, r5, r6, lr}
    1116:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1118:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    111a:	8a2b      	ldrh	r3, [r5, #16]
    111c:	075b      	lsls	r3, r3, #29
    111e:	d503      	bpl.n	1128 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    1120:	221e      	movs	r2, #30
    1122:	2325      	movs	r3, #37	; 0x25
    1124:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    1126:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
    1128:	8b46      	ldrh	r6, [r0, #26]
    112a:	8b83      	ldrh	r3, [r0, #28]
    112c:	1af6      	subs	r6, r6, r3
    112e:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    1130:	8b83      	ldrh	r3, [r0, #28]
    1132:	3b01      	subs	r3, #1
    1134:	b29b      	uxth	r3, r3
    1136:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    1138:	4b03      	ldr	r3, [pc, #12]	; (1148 <_i2c_master_write+0x34>)
    113a:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    113c:	6a23      	ldr	r3, [r4, #32]
    113e:	199e      	adds	r6, r3, r6
    1140:	7833      	ldrb	r3, [r6, #0]
    1142:	b2db      	uxtb	r3, r3
    1144:	762b      	strb	r3, [r5, #24]
    1146:	e7ee      	b.n	1126 <_i2c_master_write+0x12>
    1148:	0000108d 	.word	0x0000108d

0000114c <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    114c:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    114e:	0080      	lsls	r0, r0, #2
    1150:	4b6e      	ldr	r3, [pc, #440]	; (130c <_i2c_master_interrupt_handler+0x1c0>)
    1152:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1154:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback &
    1156:	7e63      	ldrb	r3, [r4, #25]
			module->registered_callback;
    1158:	7e25      	ldrb	r5, [r4, #24]
	uint8_t callback_mask = module->enabled_callback &
    115a:	401d      	ands	r5, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    115c:	8b63      	ldrh	r3, [r4, #26]
    115e:	b29b      	uxth	r3, r3
    1160:	2b00      	cmp	r3, #0
    1162:	d103      	bne.n	116c <_i2c_master_interrupt_handler+0x20>
    1164:	8ba3      	ldrh	r3, [r4, #28]
    1166:	b29b      	uxth	r3, r3
    1168:	2b00      	cmp	r3, #0
    116a:	d141      	bne.n	11f0 <_i2c_master_interrupt_handler+0xa4>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    116c:	8b63      	ldrh	r3, [r4, #26]
    116e:	b29b      	uxth	r3, r3
    1170:	2b00      	cmp	r3, #0
    1172:	d008      	beq.n	1186 <_i2c_master_interrupt_handler+0x3a>
    1174:	8ba3      	ldrh	r3, [r4, #28]
    1176:	b29b      	uxth	r3, r3
    1178:	2b00      	cmp	r3, #0
    117a:	d104      	bne.n	1186 <_i2c_master_interrupt_handler+0x3a>
			(module->status == STATUS_BUSY) &&
    117c:	3325      	adds	r3, #37	; 0x25
    117e:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1180:	2b05      	cmp	r3, #5
    1182:	d100      	bne.n	1186 <_i2c_master_interrupt_handler+0x3a>
    1184:	e066      	b.n	1254 <_i2c_master_interrupt_handler+0x108>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    1186:	8b63      	ldrh	r3, [r4, #26]
    1188:	b29b      	uxth	r3, r3
    118a:	2b00      	cmp	r3, #0
    118c:	d00a      	beq.n	11a4 <_i2c_master_interrupt_handler+0x58>
    118e:	8ba3      	ldrh	r3, [r4, #28]
    1190:	b29b      	uxth	r3, r3
    1192:	2b00      	cmp	r3, #0
    1194:	d006      	beq.n	11a4 <_i2c_master_interrupt_handler+0x58>
		/* Check that bus ownership is not lost */
		if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1196:	8a33      	ldrh	r3, [r6, #16]
    1198:	069b      	lsls	r3, r3, #26
    119a:	d500      	bpl.n	119e <_i2c_master_interrupt_handler+0x52>
    119c:	e07b      	b.n	1296 <_i2c_master_interrupt_handler+0x14a>
			module->status = STATUS_ERR_PACKET_COLLISION;
    119e:	2241      	movs	r2, #65	; 0x41
    11a0:	2325      	movs	r3, #37	; 0x25
    11a2:	54e2      	strb	r2, [r4, r3]
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    11a4:	8b63      	ldrh	r3, [r4, #26]
    11a6:	b29b      	uxth	r3, r3
    11a8:	2b00      	cmp	r3, #0
    11aa:	d008      	beq.n	11be <_i2c_master_interrupt_handler+0x72>
    11ac:	8ba3      	ldrh	r3, [r4, #28]
    11ae:	b29b      	uxth	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d104      	bne.n	11be <_i2c_master_interrupt_handler+0x72>
			(module->status == STATUS_BUSY) &&
    11b4:	3325      	adds	r3, #37	; 0x25
    11b6:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    11b8:	2b05      	cmp	r3, #5
    11ba:	d100      	bne.n	11be <_i2c_master_interrupt_handler+0x72>
    11bc:	e077      	b.n	12ae <_i2c_master_interrupt_handler+0x162>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    11be:	2325      	movs	r3, #37	; 0x25
    11c0:	5ce3      	ldrb	r3, [r4, r3]
    11c2:	2b05      	cmp	r3, #5
    11c4:	d013      	beq.n	11ee <_i2c_master_interrupt_handler+0xa2>
    11c6:	2325      	movs	r3, #37	; 0x25
    11c8:	5ce3      	ldrb	r3, [r4, r3]
    11ca:	2b00      	cmp	r3, #0
    11cc:	d00f      	beq.n	11ee <_i2c_master_interrupt_handler+0xa2>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    11ce:	2303      	movs	r3, #3
    11d0:	7333      	strb	r3, [r6, #12]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    11d2:	2300      	movs	r3, #0
    11d4:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    11d6:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    11d8:	3325      	adds	r3, #37	; 0x25
    11da:	5ce3      	ldrb	r3, [r4, r3]
    11dc:	2b41      	cmp	r3, #65	; 0x41
    11de:	d003      	beq.n	11e8 <_i2c_master_interrupt_handler+0x9c>
    11e0:	7aa3      	ldrb	r3, [r4, #10]
    11e2:	2b00      	cmp	r3, #0
    11e4:	d000      	beq.n	11e8 <_i2c_master_interrupt_handler+0x9c>
    11e6:	e084      	b.n	12f2 <_i2c_master_interrupt_handler+0x1a6>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    11e8:	076b      	lsls	r3, r5, #29
    11ea:	d500      	bpl.n	11ee <_i2c_master_interrupt_handler+0xa2>
    11ec:	e08a      	b.n	1304 <_i2c_master_interrupt_handler+0x1b8>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    11ee:	bd70      	pop	{r4, r5, r6, pc}
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    11f0:	7bb3      	ldrb	r3, [r6, #14]
    11f2:	07db      	lsls	r3, r3, #31
    11f4:	d507      	bpl.n	1206 <_i2c_master_interrupt_handler+0xba>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    11f6:	2301      	movs	r3, #1
    11f8:	73b3      	strb	r3, [r6, #14]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    11fa:	8a33      	ldrh	r3, [r6, #16]
    11fc:	079b      	lsls	r3, r3, #30
    11fe:	d502      	bpl.n	1206 <_i2c_master_interrupt_handler+0xba>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1200:	2241      	movs	r2, #65	; 0x41
    1202:	2325      	movs	r3, #37	; 0x25
    1204:	54e2      	strb	r2, [r4, r3]
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1206:	8a33      	ldrh	r3, [r6, #16]
    1208:	075b      	lsls	r3, r3, #29
    120a:	d507      	bpl.n	121c <_i2c_master_interrupt_handler+0xd0>
		module->status           = STATUS_ERR_BAD_ADDRESS;
    120c:	2218      	movs	r2, #24
    120e:	2325      	movs	r3, #37	; 0x25
    1210:	54e2      	strb	r2, [r4, r3]
		module->buffer_remaining = 0;
    1212:	2300      	movs	r3, #0
    1214:	83a3      	strh	r3, [r4, #28]
		if (module->send_stop) {
    1216:	7aa3      	ldrb	r3, [r4, #10]
    1218:	2b00      	cmp	r3, #0
    121a:	d10e      	bne.n	123a <_i2c_master_interrupt_handler+0xee>
	module->buffer_length = module->buffer_remaining;
    121c:	8ba3      	ldrh	r3, [r4, #28]
    121e:	b29b      	uxth	r3, r3
    1220:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    1222:	2325      	movs	r3, #37	; 0x25
    1224:	5ce3      	ldrb	r3, [r4, r3]
    1226:	2b05      	cmp	r3, #5
    1228:	d1bc      	bne.n	11a4 <_i2c_master_interrupt_handler+0x58>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    122a:	331f      	adds	r3, #31
    122c:	5ce3      	ldrb	r3, [r4, r3]
    122e:	2b00      	cmp	r3, #0
    1230:	d00c      	beq.n	124c <_i2c_master_interrupt_handler+0x100>
			_i2c_master_read(module);
    1232:	0020      	movs	r0, r4
    1234:	4b36      	ldr	r3, [pc, #216]	; (1310 <_i2c_master_interrupt_handler+0x1c4>)
    1236:	4798      	blx	r3
    1238:	e7b4      	b.n	11a4 <_i2c_master_interrupt_handler+0x58>
			_i2c_master_wait_for_sync(module);
    123a:	0020      	movs	r0, r4
    123c:	4b35      	ldr	r3, [pc, #212]	; (1314 <_i2c_master_interrupt_handler+0x1c8>)
    123e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1240:	6872      	ldr	r2, [r6, #4]
    1242:	23c0      	movs	r3, #192	; 0xc0
    1244:	029b      	lsls	r3, r3, #10
    1246:	4313      	orrs	r3, r2
    1248:	6073      	str	r3, [r6, #4]
    124a:	e7e7      	b.n	121c <_i2c_master_interrupt_handler+0xd0>
			_i2c_master_write(module);
    124c:	0020      	movs	r0, r4
    124e:	4b32      	ldr	r3, [pc, #200]	; (1318 <_i2c_master_interrupt_handler+0x1cc>)
    1250:	4798      	blx	r3
    1252:	e7a7      	b.n	11a4 <_i2c_master_interrupt_handler+0x58>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1254:	331f      	adds	r3, #31
    1256:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    1258:	2b00      	cmp	r3, #0
    125a:	d000      	beq.n	125e <_i2c_master_interrupt_handler+0x112>
    125c:	e793      	b.n	1186 <_i2c_master_interrupt_handler+0x3a>
		i2c_module->INTENCLR.reg =
    125e:	3303      	adds	r3, #3
    1260:	7333      	strb	r3, [r6, #12]
		module->buffer_length = 0;
    1262:	2300      	movs	r3, #0
    1264:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    1266:	3325      	adds	r3, #37	; 0x25
    1268:	2200      	movs	r2, #0
    126a:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
    126c:	7aa3      	ldrb	r3, [r4, #10]
    126e:	2b00      	cmp	r3, #0
    1270:	d108      	bne.n	1284 <_i2c_master_interrupt_handler+0x138>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1272:	2301      	movs	r3, #1
    1274:	73b3      	strb	r3, [r6, #14]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1276:	07eb      	lsls	r3, r5, #31
    1278:	d400      	bmi.n	127c <_i2c_master_interrupt_handler+0x130>
    127a:	e793      	b.n	11a4 <_i2c_master_interrupt_handler+0x58>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    127c:	68e3      	ldr	r3, [r4, #12]
    127e:	0020      	movs	r0, r4
    1280:	4798      	blx	r3
    1282:	e78f      	b.n	11a4 <_i2c_master_interrupt_handler+0x58>
			_i2c_master_wait_for_sync(module);
    1284:	0020      	movs	r0, r4
    1286:	4b23      	ldr	r3, [pc, #140]	; (1314 <_i2c_master_interrupt_handler+0x1c8>)
    1288:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    128a:	6872      	ldr	r2, [r6, #4]
    128c:	23c0      	movs	r3, #192	; 0xc0
    128e:	029b      	lsls	r3, r3, #10
    1290:	4313      	orrs	r3, r2
    1292:	6073      	str	r3, [r6, #4]
    1294:	e7ef      	b.n	1276 <_i2c_master_interrupt_handler+0x12a>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1296:	2324      	movs	r3, #36	; 0x24
    1298:	5ce3      	ldrb	r3, [r4, r3]
    129a:	2b00      	cmp	r3, #0
    129c:	d103      	bne.n	12a6 <_i2c_master_interrupt_handler+0x15a>
			_i2c_master_write(module);
    129e:	0020      	movs	r0, r4
    12a0:	4b1d      	ldr	r3, [pc, #116]	; (1318 <_i2c_master_interrupt_handler+0x1cc>)
    12a2:	4798      	blx	r3
    12a4:	e77e      	b.n	11a4 <_i2c_master_interrupt_handler+0x58>
			_i2c_master_read(module);
    12a6:	0020      	movs	r0, r4
    12a8:	4b19      	ldr	r3, [pc, #100]	; (1310 <_i2c_master_interrupt_handler+0x1c4>)
    12aa:	4798      	blx	r3
    12ac:	e77a      	b.n	11a4 <_i2c_master_interrupt_handler+0x58>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    12ae:	331f      	adds	r3, #31
    12b0:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    12b2:	2b01      	cmp	r3, #1
    12b4:	d000      	beq.n	12b8 <_i2c_master_interrupt_handler+0x16c>
    12b6:	e782      	b.n	11be <_i2c_master_interrupt_handler+0x72>
		i2c_module->INTENCLR.reg =
    12b8:	3302      	adds	r3, #2
    12ba:	7333      	strb	r3, [r6, #12]
		module->buffer_length = 0;
    12bc:	2300      	movs	r3, #0
    12be:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    12c0:	3325      	adds	r3, #37	; 0x25
    12c2:	2200      	movs	r2, #0
    12c4:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    12c6:	07ab      	lsls	r3, r5, #30
    12c8:	d503      	bpl.n	12d2 <_i2c_master_interrupt_handler+0x186>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    12ca:	2324      	movs	r3, #36	; 0x24
    12cc:	5ce3      	ldrb	r3, [r4, r3]
    12ce:	2b01      	cmp	r3, #1
    12d0:	d00b      	beq.n	12ea <_i2c_master_interrupt_handler+0x19e>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    12d2:	07eb      	lsls	r3, r5, #31
    12d4:	d400      	bmi.n	12d8 <_i2c_master_interrupt_handler+0x18c>
    12d6:	e772      	b.n	11be <_i2c_master_interrupt_handler+0x72>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    12d8:	2324      	movs	r3, #36	; 0x24
    12da:	5ce3      	ldrb	r3, [r4, r3]
    12dc:	2b00      	cmp	r3, #0
    12de:	d000      	beq.n	12e2 <_i2c_master_interrupt_handler+0x196>
    12e0:	e76d      	b.n	11be <_i2c_master_interrupt_handler+0x72>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    12e2:	68e3      	ldr	r3, [r4, #12]
    12e4:	0020      	movs	r0, r4
    12e6:	4798      	blx	r3
    12e8:	e769      	b.n	11be <_i2c_master_interrupt_handler+0x72>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    12ea:	6923      	ldr	r3, [r4, #16]
    12ec:	0020      	movs	r0, r4
    12ee:	4798      	blx	r3
    12f0:	e765      	b.n	11be <_i2c_master_interrupt_handler+0x72>
			_i2c_master_wait_for_sync(module);
    12f2:	0020      	movs	r0, r4
    12f4:	4b07      	ldr	r3, [pc, #28]	; (1314 <_i2c_master_interrupt_handler+0x1c8>)
    12f6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    12f8:	6872      	ldr	r2, [r6, #4]
    12fa:	23e0      	movs	r3, #224	; 0xe0
    12fc:	02db      	lsls	r3, r3, #11
    12fe:	4313      	orrs	r3, r2
    1300:	6073      	str	r3, [r6, #4]
    1302:	e771      	b.n	11e8 <_i2c_master_interrupt_handler+0x9c>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    1304:	6963      	ldr	r3, [r4, #20]
    1306:	0020      	movs	r0, r4
    1308:	4798      	blx	r3
}
    130a:	e770      	b.n	11ee <_i2c_master_interrupt_handler+0xa2>
    130c:	20000130 	.word	0x20000130
    1310:	00001099 	.word	0x00001099
    1314:	0000108d 	.word	0x0000108d
    1318:	00001115 	.word	0x00001115

0000131c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    131c:	b5f0      	push	{r4, r5, r6, r7, lr}
    131e:	46de      	mov	lr, fp
    1320:	4657      	mov	r7, sl
    1322:	464e      	mov	r6, r9
    1324:	4645      	mov	r5, r8
    1326:	b5e0      	push	{r5, r6, r7, lr}
    1328:	b087      	sub	sp, #28
    132a:	4680      	mov	r8, r0
    132c:	9104      	str	r1, [sp, #16]
    132e:	0016      	movs	r6, r2
    1330:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1332:	2200      	movs	r2, #0
    1334:	2300      	movs	r3, #0
    1336:	2100      	movs	r1, #0
    1338:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    133a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    133c:	2001      	movs	r0, #1
    133e:	0021      	movs	r1, r4
    1340:	9600      	str	r6, [sp, #0]
    1342:	9701      	str	r7, [sp, #4]
    1344:	465c      	mov	r4, fp
    1346:	9403      	str	r4, [sp, #12]
    1348:	4644      	mov	r4, r8
    134a:	9405      	str	r4, [sp, #20]
    134c:	e013      	b.n	1376 <long_division+0x5a>
    134e:	2420      	movs	r4, #32
    1350:	1a64      	subs	r4, r4, r1
    1352:	0005      	movs	r5, r0
    1354:	40e5      	lsrs	r5, r4
    1356:	46a8      	mov	r8, r5
    1358:	e014      	b.n	1384 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    135a:	9c00      	ldr	r4, [sp, #0]
    135c:	9d01      	ldr	r5, [sp, #4]
    135e:	1b12      	subs	r2, r2, r4
    1360:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1362:	465c      	mov	r4, fp
    1364:	464d      	mov	r5, r9
    1366:	432c      	orrs	r4, r5
    1368:	46a3      	mov	fp, r4
    136a:	9c03      	ldr	r4, [sp, #12]
    136c:	4645      	mov	r5, r8
    136e:	432c      	orrs	r4, r5
    1370:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1372:	3901      	subs	r1, #1
    1374:	d325      	bcc.n	13c2 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1376:	2420      	movs	r4, #32
    1378:	4264      	negs	r4, r4
    137a:	190c      	adds	r4, r1, r4
    137c:	d4e7      	bmi.n	134e <long_division+0x32>
    137e:	0005      	movs	r5, r0
    1380:	40a5      	lsls	r5, r4
    1382:	46a8      	mov	r8, r5
    1384:	0004      	movs	r4, r0
    1386:	408c      	lsls	r4, r1
    1388:	46a1      	mov	r9, r4
		r = r << 1;
    138a:	1892      	adds	r2, r2, r2
    138c:	415b      	adcs	r3, r3
    138e:	0014      	movs	r4, r2
    1390:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1392:	9e05      	ldr	r6, [sp, #20]
    1394:	464f      	mov	r7, r9
    1396:	403e      	ands	r6, r7
    1398:	46b4      	mov	ip, r6
    139a:	9e04      	ldr	r6, [sp, #16]
    139c:	4647      	mov	r7, r8
    139e:	403e      	ands	r6, r7
    13a0:	46b2      	mov	sl, r6
    13a2:	4666      	mov	r6, ip
    13a4:	4657      	mov	r7, sl
    13a6:	433e      	orrs	r6, r7
    13a8:	d003      	beq.n	13b2 <long_division+0x96>
			r |= 0x01;
    13aa:	0006      	movs	r6, r0
    13ac:	4326      	orrs	r6, r4
    13ae:	0032      	movs	r2, r6
    13b0:	002b      	movs	r3, r5
		if (r >= d) {
    13b2:	9c00      	ldr	r4, [sp, #0]
    13b4:	9d01      	ldr	r5, [sp, #4]
    13b6:	429d      	cmp	r5, r3
    13b8:	d8db      	bhi.n	1372 <long_division+0x56>
    13ba:	d1ce      	bne.n	135a <long_division+0x3e>
    13bc:	4294      	cmp	r4, r2
    13be:	d8d8      	bhi.n	1372 <long_division+0x56>
    13c0:	e7cb      	b.n	135a <long_division+0x3e>
    13c2:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    13c4:	4658      	mov	r0, fp
    13c6:	0019      	movs	r1, r3
    13c8:	b007      	add	sp, #28
    13ca:	bc3c      	pop	{r2, r3, r4, r5}
    13cc:	4690      	mov	r8, r2
    13ce:	4699      	mov	r9, r3
    13d0:	46a2      	mov	sl, r4
    13d2:	46ab      	mov	fp, r5
    13d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000013d6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    13d6:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    13d8:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    13da:	2340      	movs	r3, #64	; 0x40
    13dc:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    13de:	4281      	cmp	r1, r0
    13e0:	d202      	bcs.n	13e8 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    13e2:	0018      	movs	r0, r3
    13e4:	bd10      	pop	{r4, pc}
		baud_calculated++;
    13e6:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    13e8:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    13ea:	1c63      	adds	r3, r4, #1
    13ec:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    13ee:	4288      	cmp	r0, r1
    13f0:	d9f9      	bls.n	13e6 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    13f2:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    13f4:	2cff      	cmp	r4, #255	; 0xff
    13f6:	d8f4      	bhi.n	13e2 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    13f8:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    13fa:	2300      	movs	r3, #0
    13fc:	e7f1      	b.n	13e2 <_sercom_get_sync_baud_val+0xc>
	...

00001400 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1400:	b5f0      	push	{r4, r5, r6, r7, lr}
    1402:	b083      	sub	sp, #12
    1404:	000f      	movs	r7, r1
    1406:	0016      	movs	r6, r2
    1408:	aa08      	add	r2, sp, #32
    140a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    140c:	0004      	movs	r4, r0
    140e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1410:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1412:	42bc      	cmp	r4, r7
    1414:	d902      	bls.n	141c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1416:	0010      	movs	r0, r2
    1418:	b003      	add	sp, #12
    141a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    141c:	2b00      	cmp	r3, #0
    141e:	d114      	bne.n	144a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1420:	0002      	movs	r2, r0
    1422:	0008      	movs	r0, r1
    1424:	2100      	movs	r1, #0
    1426:	4c19      	ldr	r4, [pc, #100]	; (148c <_sercom_get_async_baud_val+0x8c>)
    1428:	47a0      	blx	r4
    142a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    142c:	003a      	movs	r2, r7
    142e:	2300      	movs	r3, #0
    1430:	2000      	movs	r0, #0
    1432:	4c17      	ldr	r4, [pc, #92]	; (1490 <_sercom_get_async_baud_val+0x90>)
    1434:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1436:	2200      	movs	r2, #0
    1438:	2301      	movs	r3, #1
    143a:	1a12      	subs	r2, r2, r0
    143c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    143e:	0c12      	lsrs	r2, r2, #16
    1440:	041b      	lsls	r3, r3, #16
    1442:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1444:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1446:	2200      	movs	r2, #0
    1448:	e7e5      	b.n	1416 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    144a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    144c:	2b01      	cmp	r3, #1
    144e:	d1f9      	bne.n	1444 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1450:	000a      	movs	r2, r1
    1452:	2300      	movs	r3, #0
    1454:	2100      	movs	r1, #0
    1456:	4c0d      	ldr	r4, [pc, #52]	; (148c <_sercom_get_async_baud_val+0x8c>)
    1458:	47a0      	blx	r4
    145a:	0002      	movs	r2, r0
    145c:	000b      	movs	r3, r1
    145e:	9200      	str	r2, [sp, #0]
    1460:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1462:	0038      	movs	r0, r7
    1464:	2100      	movs	r1, #0
    1466:	4c0a      	ldr	r4, [pc, #40]	; (1490 <_sercom_get_async_baud_val+0x90>)
    1468:	47a0      	blx	r4
    146a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    146c:	2380      	movs	r3, #128	; 0x80
    146e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1470:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1472:	4298      	cmp	r0, r3
    1474:	d8cf      	bhi.n	1416 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1476:	0f79      	lsrs	r1, r7, #29
    1478:	00f8      	lsls	r0, r7, #3
    147a:	9a00      	ldr	r2, [sp, #0]
    147c:	9b01      	ldr	r3, [sp, #4]
    147e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1480:	00ea      	lsls	r2, r5, #3
    1482:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1484:	b2d2      	uxtb	r2, r2
    1486:	0352      	lsls	r2, r2, #13
    1488:	432a      	orrs	r2, r5
    148a:	e7db      	b.n	1444 <_sercom_get_async_baud_val+0x44>
    148c:	00003345 	.word	0x00003345
    1490:	0000131d 	.word	0x0000131d

00001494 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1494:	b510      	push	{r4, lr}
    1496:	b082      	sub	sp, #8
    1498:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    149a:	4b0e      	ldr	r3, [pc, #56]	; (14d4 <sercom_set_gclk_generator+0x40>)
    149c:	781b      	ldrb	r3, [r3, #0]
    149e:	2b00      	cmp	r3, #0
    14a0:	d007      	beq.n	14b2 <sercom_set_gclk_generator+0x1e>
    14a2:	2900      	cmp	r1, #0
    14a4:	d105      	bne.n	14b2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    14a6:	4b0b      	ldr	r3, [pc, #44]	; (14d4 <sercom_set_gclk_generator+0x40>)
    14a8:	785b      	ldrb	r3, [r3, #1]
    14aa:	4283      	cmp	r3, r0
    14ac:	d010      	beq.n	14d0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    14ae:	201d      	movs	r0, #29
    14b0:	e00c      	b.n	14cc <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    14b2:	a901      	add	r1, sp, #4
    14b4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    14b6:	200c      	movs	r0, #12
    14b8:	4b07      	ldr	r3, [pc, #28]	; (14d8 <sercom_set_gclk_generator+0x44>)
    14ba:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    14bc:	200c      	movs	r0, #12
    14be:	4b07      	ldr	r3, [pc, #28]	; (14dc <sercom_set_gclk_generator+0x48>)
    14c0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    14c2:	4b04      	ldr	r3, [pc, #16]	; (14d4 <sercom_set_gclk_generator+0x40>)
    14c4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    14c6:	2201      	movs	r2, #1
    14c8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    14ca:	2000      	movs	r0, #0
}
    14cc:	b002      	add	sp, #8
    14ce:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    14d0:	2000      	movs	r0, #0
    14d2:	e7fb      	b.n	14cc <sercom_set_gclk_generator+0x38>
    14d4:	20000094 	.word	0x20000094
    14d8:	00002799 	.word	0x00002799
    14dc:	0000270d 	.word	0x0000270d

000014e0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    14e0:	4b2b      	ldr	r3, [pc, #172]	; (1590 <_sercom_get_default_pad+0xb0>)
    14e2:	4298      	cmp	r0, r3
    14e4:	d023      	beq.n	152e <_sercom_get_default_pad+0x4e>
    14e6:	d90f      	bls.n	1508 <_sercom_get_default_pad+0x28>
    14e8:	4b2a      	ldr	r3, [pc, #168]	; (1594 <_sercom_get_default_pad+0xb4>)
    14ea:	4298      	cmp	r0, r3
    14ec:	d02f      	beq.n	154e <_sercom_get_default_pad+0x6e>
    14ee:	4b2a      	ldr	r3, [pc, #168]	; (1598 <_sercom_get_default_pad+0xb8>)
    14f0:	4298      	cmp	r0, r3
    14f2:	d142      	bne.n	157a <_sercom_get_default_pad+0x9a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    14f4:	2901      	cmp	r1, #1
    14f6:	d03a      	beq.n	156e <_sercom_get_default_pad+0x8e>
    14f8:	2900      	cmp	r1, #0
    14fa:	d046      	beq.n	158a <_sercom_get_default_pad+0xaa>
    14fc:	2902      	cmp	r1, #2
    14fe:	d038      	beq.n	1572 <_sercom_get_default_pad+0x92>
    1500:	2903      	cmp	r1, #3
    1502:	d038      	beq.n	1576 <_sercom_get_default_pad+0x96>
	}

	Assert(false);
	return 0;
    1504:	2000      	movs	r0, #0
    1506:	e039      	b.n	157c <_sercom_get_default_pad+0x9c>
	switch ((uintptr_t)sercom_module) {
    1508:	4b24      	ldr	r3, [pc, #144]	; (159c <_sercom_get_default_pad+0xbc>)
    150a:	4298      	cmp	r0, r3
    150c:	d135      	bne.n	157a <_sercom_get_default_pad+0x9a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    150e:	2901      	cmp	r1, #1
    1510:	d007      	beq.n	1522 <_sercom_get_default_pad+0x42>
    1512:	2900      	cmp	r1, #0
    1514:	d033      	beq.n	157e <_sercom_get_default_pad+0x9e>
    1516:	2902      	cmp	r1, #2
    1518:	d005      	beq.n	1526 <_sercom_get_default_pad+0x46>
    151a:	2903      	cmp	r1, #3
    151c:	d005      	beq.n	152a <_sercom_get_default_pad+0x4a>
	return 0;
    151e:	2000      	movs	r0, #0
    1520:	e02c      	b.n	157c <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1522:	481f      	ldr	r0, [pc, #124]	; (15a0 <_sercom_get_default_pad+0xc0>)
    1524:	e02a      	b.n	157c <_sercom_get_default_pad+0x9c>
    1526:	481f      	ldr	r0, [pc, #124]	; (15a4 <_sercom_get_default_pad+0xc4>)
    1528:	e028      	b.n	157c <_sercom_get_default_pad+0x9c>
    152a:	481f      	ldr	r0, [pc, #124]	; (15a8 <_sercom_get_default_pad+0xc8>)
    152c:	e026      	b.n	157c <_sercom_get_default_pad+0x9c>
    152e:	2901      	cmp	r1, #1
    1530:	d007      	beq.n	1542 <_sercom_get_default_pad+0x62>
    1532:	2900      	cmp	r1, #0
    1534:	d025      	beq.n	1582 <_sercom_get_default_pad+0xa2>
    1536:	2902      	cmp	r1, #2
    1538:	d005      	beq.n	1546 <_sercom_get_default_pad+0x66>
    153a:	2903      	cmp	r1, #3
    153c:	d005      	beq.n	154a <_sercom_get_default_pad+0x6a>
	return 0;
    153e:	2000      	movs	r0, #0
    1540:	e01c      	b.n	157c <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1542:	481a      	ldr	r0, [pc, #104]	; (15ac <_sercom_get_default_pad+0xcc>)
    1544:	e01a      	b.n	157c <_sercom_get_default_pad+0x9c>
    1546:	481a      	ldr	r0, [pc, #104]	; (15b0 <_sercom_get_default_pad+0xd0>)
    1548:	e018      	b.n	157c <_sercom_get_default_pad+0x9c>
    154a:	481a      	ldr	r0, [pc, #104]	; (15b4 <_sercom_get_default_pad+0xd4>)
    154c:	e016      	b.n	157c <_sercom_get_default_pad+0x9c>
    154e:	2901      	cmp	r1, #1
    1550:	d007      	beq.n	1562 <_sercom_get_default_pad+0x82>
    1552:	2900      	cmp	r1, #0
    1554:	d017      	beq.n	1586 <_sercom_get_default_pad+0xa6>
    1556:	2902      	cmp	r1, #2
    1558:	d005      	beq.n	1566 <_sercom_get_default_pad+0x86>
    155a:	2903      	cmp	r1, #3
    155c:	d005      	beq.n	156a <_sercom_get_default_pad+0x8a>
	return 0;
    155e:	2000      	movs	r0, #0
    1560:	e00c      	b.n	157c <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1562:	4815      	ldr	r0, [pc, #84]	; (15b8 <_sercom_get_default_pad+0xd8>)
    1564:	e00a      	b.n	157c <_sercom_get_default_pad+0x9c>
    1566:	4815      	ldr	r0, [pc, #84]	; (15bc <_sercom_get_default_pad+0xdc>)
    1568:	e008      	b.n	157c <_sercom_get_default_pad+0x9c>
    156a:	4815      	ldr	r0, [pc, #84]	; (15c0 <_sercom_get_default_pad+0xe0>)
    156c:	e006      	b.n	157c <_sercom_get_default_pad+0x9c>
    156e:	4815      	ldr	r0, [pc, #84]	; (15c4 <_sercom_get_default_pad+0xe4>)
    1570:	e004      	b.n	157c <_sercom_get_default_pad+0x9c>
    1572:	4815      	ldr	r0, [pc, #84]	; (15c8 <_sercom_get_default_pad+0xe8>)
    1574:	e002      	b.n	157c <_sercom_get_default_pad+0x9c>
    1576:	4815      	ldr	r0, [pc, #84]	; (15cc <_sercom_get_default_pad+0xec>)
    1578:	e000      	b.n	157c <_sercom_get_default_pad+0x9c>
	return 0;
    157a:	2000      	movs	r0, #0
}
    157c:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    157e:	4814      	ldr	r0, [pc, #80]	; (15d0 <_sercom_get_default_pad+0xf0>)
    1580:	e7fc      	b.n	157c <_sercom_get_default_pad+0x9c>
    1582:	2003      	movs	r0, #3
    1584:	e7fa      	b.n	157c <_sercom_get_default_pad+0x9c>
    1586:	4813      	ldr	r0, [pc, #76]	; (15d4 <_sercom_get_default_pad+0xf4>)
    1588:	e7f8      	b.n	157c <_sercom_get_default_pad+0x9c>
    158a:	4813      	ldr	r0, [pc, #76]	; (15d8 <_sercom_get_default_pad+0xf8>)
    158c:	e7f6      	b.n	157c <_sercom_get_default_pad+0x9c>
    158e:	46c0      	nop			; (mov r8, r8)
    1590:	42000c00 	.word	0x42000c00
    1594:	42001000 	.word	0x42001000
    1598:	42001400 	.word	0x42001400
    159c:	42000800 	.word	0x42000800
    15a0:	00050003 	.word	0x00050003
    15a4:	00060003 	.word	0x00060003
    15a8:	00070003 	.word	0x00070003
    15ac:	00010003 	.word	0x00010003
    15b0:	001e0003 	.word	0x001e0003
    15b4:	001f0003 	.word	0x001f0003
    15b8:	00090003 	.word	0x00090003
    15bc:	000a0003 	.word	0x000a0003
    15c0:	000b0003 	.word	0x000b0003
    15c4:	00110003 	.word	0x00110003
    15c8:	00120003 	.word	0x00120003
    15cc:	00130003 	.word	0x00130003
    15d0:	00040003 	.word	0x00040003
    15d4:	00080003 	.word	0x00080003
    15d8:	00100003 	.word	0x00100003

000015dc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    15dc:	b530      	push	{r4, r5, lr}
    15de:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    15e0:	466a      	mov	r2, sp
    15e2:	4b0f      	ldr	r3, [pc, #60]	; (1620 <_sercom_get_sercom_inst_index+0x44>)
    15e4:	cb32      	ldmia	r3!, {r1, r4, r5}
    15e6:	c232      	stmia	r2!, {r1, r4, r5}
    15e8:	681b      	ldr	r3, [r3, #0]
    15ea:	6013      	str	r3, [r2, #0]

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    15ec:	0003      	movs	r3, r0
    15ee:	9a00      	ldr	r2, [sp, #0]
    15f0:	4282      	cmp	r2, r0
    15f2:	d011      	beq.n	1618 <_sercom_get_sercom_inst_index+0x3c>
    15f4:	9a01      	ldr	r2, [sp, #4]
    15f6:	4282      	cmp	r2, r0
    15f8:	d00a      	beq.n	1610 <_sercom_get_sercom_inst_index+0x34>
    15fa:	9a02      	ldr	r2, [sp, #8]
    15fc:	4282      	cmp	r2, r0
    15fe:	d009      	beq.n	1614 <_sercom_get_sercom_inst_index+0x38>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1600:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1602:	9a03      	ldr	r2, [sp, #12]
    1604:	429a      	cmp	r2, r3
    1606:	d001      	beq.n	160c <_sercom_get_sercom_inst_index+0x30>
}
    1608:	b005      	add	sp, #20
    160a:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    160c:	3003      	adds	r0, #3
    160e:	e004      	b.n	161a <_sercom_get_sercom_inst_index+0x3e>
    1610:	2001      	movs	r0, #1
    1612:	e002      	b.n	161a <_sercom_get_sercom_inst_index+0x3e>
    1614:	2002      	movs	r0, #2
    1616:	e000      	b.n	161a <_sercom_get_sercom_inst_index+0x3e>
    1618:	2000      	movs	r0, #0
			return i;
    161a:	b2c0      	uxtb	r0, r0
    161c:	e7f4      	b.n	1608 <_sercom_get_sercom_inst_index+0x2c>
    161e:	46c0      	nop			; (mov r8, r8)
    1620:	00003d5c 	.word	0x00003d5c

00001624 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1624:	4770      	bx	lr
	...

00001628 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1628:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    162a:	4b0b      	ldr	r3, [pc, #44]	; (1658 <_sercom_set_handler+0x30>)
    162c:	781b      	ldrb	r3, [r3, #0]
    162e:	2b00      	cmp	r3, #0
    1630:	d10e      	bne.n	1650 <_sercom_set_handler+0x28>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1632:	4c0a      	ldr	r4, [pc, #40]	; (165c <_sercom_set_handler+0x34>)
    1634:	4d0a      	ldr	r5, [pc, #40]	; (1660 <_sercom_set_handler+0x38>)
    1636:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
    1638:	4b0a      	ldr	r3, [pc, #40]	; (1664 <_sercom_set_handler+0x3c>)
    163a:	2200      	movs	r2, #0
    163c:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    163e:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
    1640:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1642:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
    1644:	609a      	str	r2, [r3, #8]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1646:	60e5      	str	r5, [r4, #12]
			_sercom_instances[i] = NULL;
    1648:	60da      	str	r2, [r3, #12]
		}

		_handler_table_initialized = true;
    164a:	3201      	adds	r2, #1
    164c:	4b02      	ldr	r3, [pc, #8]	; (1658 <_sercom_set_handler+0x30>)
    164e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1650:	0080      	lsls	r0, r0, #2
    1652:	4b02      	ldr	r3, [pc, #8]	; (165c <_sercom_set_handler+0x34>)
    1654:	50c1      	str	r1, [r0, r3]
}
    1656:	bd30      	pop	{r4, r5, pc}
    1658:	20000096 	.word	0x20000096
    165c:	20000098 	.word	0x20000098
    1660:	00001625 	.word	0x00001625
    1664:	20000130 	.word	0x20000130

00001668 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1668:	b510      	push	{r4, lr}
    166a:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    166c:	ac01      	add	r4, sp, #4
    166e:	2307      	movs	r3, #7
    1670:	7023      	strb	r3, [r4, #0]
    1672:	3301      	adds	r3, #1
    1674:	7063      	strb	r3, [r4, #1]
    1676:	3301      	adds	r3, #1
    1678:	70a3      	strb	r3, [r4, #2]
    167a:	3301      	adds	r3, #1
    167c:	70e3      	strb	r3, [r4, #3]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    167e:	4b02      	ldr	r3, [pc, #8]	; (1688 <_sercom_get_interrupt_vector+0x20>)
    1680:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1682:	5620      	ldrsb	r0, [r4, r0]
}
    1684:	b002      	add	sp, #8
    1686:	bd10      	pop	{r4, pc}
    1688:	000015dd 	.word	0x000015dd

0000168c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    168c:	b510      	push	{r4, lr}
    168e:	4b02      	ldr	r3, [pc, #8]	; (1698 <SERCOM0_Handler+0xc>)
    1690:	681b      	ldr	r3, [r3, #0]
    1692:	2000      	movs	r0, #0
    1694:	4798      	blx	r3
    1696:	bd10      	pop	{r4, pc}
    1698:	20000098 	.word	0x20000098

0000169c <SERCOM1_Handler>:
    169c:	b510      	push	{r4, lr}
    169e:	4b02      	ldr	r3, [pc, #8]	; (16a8 <SERCOM1_Handler+0xc>)
    16a0:	685b      	ldr	r3, [r3, #4]
    16a2:	2001      	movs	r0, #1
    16a4:	4798      	blx	r3
    16a6:	bd10      	pop	{r4, pc}
    16a8:	20000098 	.word	0x20000098

000016ac <SERCOM2_Handler>:
    16ac:	b510      	push	{r4, lr}
    16ae:	4b02      	ldr	r3, [pc, #8]	; (16b8 <SERCOM2_Handler+0xc>)
    16b0:	689b      	ldr	r3, [r3, #8]
    16b2:	2002      	movs	r0, #2
    16b4:	4798      	blx	r3
    16b6:	bd10      	pop	{r4, pc}
    16b8:	20000098 	.word	0x20000098

000016bc <SERCOM3_Handler>:
    16bc:	b510      	push	{r4, lr}
    16be:	4b02      	ldr	r3, [pc, #8]	; (16c8 <SERCOM3_Handler+0xc>)
    16c0:	68db      	ldr	r3, [r3, #12]
    16c2:	2003      	movs	r0, #3
    16c4:	4798      	blx	r3
    16c6:	bd10      	pop	{r4, pc}
    16c8:	20000098 	.word	0x20000098

000016cc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    16cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    16ce:	46de      	mov	lr, fp
    16d0:	4657      	mov	r7, sl
    16d2:	464e      	mov	r6, r9
    16d4:	4645      	mov	r5, r8
    16d6:	b5e0      	push	{r5, r6, r7, lr}
    16d8:	b08d      	sub	sp, #52	; 0x34
    16da:	0005      	movs	r5, r0
    16dc:	000c      	movs	r4, r1
    16de:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    16e0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    16e2:	0008      	movs	r0, r1
    16e4:	4b80      	ldr	r3, [pc, #512]	; (18e8 <usart_init+0x21c>)
    16e6:	4798      	blx	r3
    16e8:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    16ea:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    16ec:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    16ee:	07db      	lsls	r3, r3, #31
    16f0:	d506      	bpl.n	1700 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    16f2:	b00d      	add	sp, #52	; 0x34
    16f4:	bc3c      	pop	{r2, r3, r4, r5}
    16f6:	4690      	mov	r8, r2
    16f8:	4699      	mov	r9, r3
    16fa:	46a2      	mov	sl, r4
    16fc:	46ab      	mov	fp, r5
    16fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1700:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1702:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1704:	079b      	lsls	r3, r3, #30
    1706:	d4f4      	bmi.n	16f2 <usart_init+0x26>
    1708:	4978      	ldr	r1, [pc, #480]	; (18ec <usart_init+0x220>)
    170a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    170c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    170e:	2301      	movs	r3, #1
    1710:	40bb      	lsls	r3, r7
    1712:	4303      	orrs	r3, r0
    1714:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1716:	a90b      	add	r1, sp, #44	; 0x2c
    1718:	7f73      	ldrb	r3, [r6, #29]
    171a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    171c:	320d      	adds	r2, #13
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    171e:	b2d7      	uxtb	r7, r2
    1720:	0038      	movs	r0, r7
    1722:	4b73      	ldr	r3, [pc, #460]	; (18f0 <usart_init+0x224>)
    1724:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1726:	0038      	movs	r0, r7
    1728:	4b72      	ldr	r3, [pc, #456]	; (18f4 <usart_init+0x228>)
    172a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    172c:	7f70      	ldrb	r0, [r6, #29]
    172e:	2100      	movs	r1, #0
    1730:	4b71      	ldr	r3, [pc, #452]	; (18f8 <usart_init+0x22c>)
    1732:	4798      	blx	r3
	module->character_size = config->character_size;
    1734:	7af3      	ldrb	r3, [r6, #11]
    1736:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1738:	7d33      	ldrb	r3, [r6, #20]
    173a:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    173c:	7d73      	ldrb	r3, [r6, #21]
    173e:	71eb      	strb	r3, [r5, #7]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1740:	682b      	ldr	r3, [r5, #0]
    1742:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1744:	0018      	movs	r0, r3
    1746:	4b68      	ldr	r3, [pc, #416]	; (18e8 <usart_init+0x21c>)
    1748:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    174a:	300d      	adds	r0, #13
	uint16_t baud  = 0;
    174c:	2200      	movs	r2, #0
    174e:	230e      	movs	r3, #14
    1750:	a902      	add	r1, sp, #8
    1752:	468c      	mov	ip, r1
    1754:	4463      	add	r3, ip
    1756:	801a      	strh	r2, [r3, #0]
	ctrla = (uint32_t)config->data_order |
    1758:	6833      	ldr	r3, [r6, #0]
    175a:	9303      	str	r3, [sp, #12]
		(uint32_t)config->mux_setting |
    175c:	68f3      	ldr	r3, [r6, #12]
    175e:	469a      	mov	sl, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1760:	7db3      	ldrb	r3, [r6, #22]
    1762:	469b      	mov	fp, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1764:	6873      	ldr	r3, [r6, #4]
    1766:	4699      	mov	r9, r3
	switch (transfer_mode)
    1768:	2b00      	cmp	r3, #0
    176a:	d014      	beq.n	1796 <usart_init+0xca>
    176c:	2380      	movs	r3, #128	; 0x80
    176e:	055b      	lsls	r3, r3, #21
    1770:	4599      	cmp	r9, r3
    1772:	d130      	bne.n	17d6 <usart_init+0x10a>
			if (!config->use_external_clock) {
    1774:	7df3      	ldrb	r3, [r6, #23]
    1776:	2b00      	cmp	r3, #0
    1778:	d131      	bne.n	17de <usart_init+0x112>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    177a:	6933      	ldr	r3, [r6, #16]
    177c:	001f      	movs	r7, r3
    177e:	b2c0      	uxtb	r0, r0
    1780:	4b5e      	ldr	r3, [pc, #376]	; (18fc <usart_init+0x230>)
    1782:	4798      	blx	r3
    1784:	0001      	movs	r1, r0
    1786:	220e      	movs	r2, #14
    1788:	ab02      	add	r3, sp, #8
    178a:	469c      	mov	ip, r3
    178c:	4462      	add	r2, ip
    178e:	0038      	movs	r0, r7
    1790:	4b5b      	ldr	r3, [pc, #364]	; (1900 <usart_init+0x234>)
    1792:	4798      	blx	r3
    1794:	e020      	b.n	17d8 <usart_init+0x10c>
			if (config->use_external_clock) {
    1796:	7df3      	ldrb	r3, [r6, #23]
    1798:	2b00      	cmp	r3, #0
    179a:	d00b      	beq.n	17b4 <usart_init+0xe8>
				status_code =
    179c:	2310      	movs	r3, #16
    179e:	9300      	str	r3, [sp, #0]
    17a0:	2300      	movs	r3, #0
    17a2:	220e      	movs	r2, #14
    17a4:	a902      	add	r1, sp, #8
    17a6:	468c      	mov	ip, r1
    17a8:	4462      	add	r2, ip
    17aa:	69b1      	ldr	r1, [r6, #24]
    17ac:	6930      	ldr	r0, [r6, #16]
    17ae:	4f55      	ldr	r7, [pc, #340]	; (1904 <usart_init+0x238>)
    17b0:	47b8      	blx	r7
    17b2:	e011      	b.n	17d8 <usart_init+0x10c>
						_sercom_get_async_baud_val(config->baudrate,
    17b4:	6933      	ldr	r3, [r6, #16]
    17b6:	001f      	movs	r7, r3
    17b8:	b2c0      	uxtb	r0, r0
    17ba:	4b50      	ldr	r3, [pc, #320]	; (18fc <usart_init+0x230>)
    17bc:	4798      	blx	r3
    17be:	0001      	movs	r1, r0
				status_code =
    17c0:	2310      	movs	r3, #16
    17c2:	9300      	str	r3, [sp, #0]
    17c4:	2300      	movs	r3, #0
    17c6:	220e      	movs	r2, #14
    17c8:	a802      	add	r0, sp, #8
    17ca:	4684      	mov	ip, r0
    17cc:	4462      	add	r2, ip
    17ce:	0038      	movs	r0, r7
    17d0:	4f4c      	ldr	r7, [pc, #304]	; (1904 <usart_init+0x238>)
    17d2:	47b8      	blx	r7
    17d4:	e000      	b.n	17d8 <usart_init+0x10c>
	enum status_code status_code = STATUS_OK;
    17d6:	2000      	movs	r0, #0
	if (status_code != STATUS_OK) {
    17d8:	2800      	cmp	r0, #0
    17da:	d000      	beq.n	17de <usart_init+0x112>
    17dc:	e789      	b.n	16f2 <usart_init+0x26>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    17de:	682a      	ldr	r2, [r5, #0]
    17e0:	9f03      	ldr	r7, [sp, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    17e2:	8a13      	ldrh	r3, [r2, #16]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    17e4:	b21b      	sxth	r3, r3
    17e6:	2b00      	cmp	r3, #0
    17e8:	dbfb      	blt.n	17e2 <usart_init+0x116>
	usart_hw->BAUD.reg = baud;
    17ea:	230e      	movs	r3, #14
    17ec:	aa02      	add	r2, sp, #8
    17ee:	4694      	mov	ip, r2
    17f0:	4463      	add	r3, ip
    17f2:	881b      	ldrh	r3, [r3, #0]
    17f4:	4642      	mov	r2, r8
    17f6:	8153      	strh	r3, [r2, #10]
	ctrla |= transfer_mode;
    17f8:	4653      	mov	r3, sl
    17fa:	431f      	orrs	r7, r3
    17fc:	464b      	mov	r3, r9
    17fe:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1800:	465b      	mov	r3, fp
    1802:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1804:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1806:	7df3      	ldrb	r3, [r6, #23]
    1808:	2b00      	cmp	r3, #0
    180a:	d101      	bne.n	1810 <usart_init+0x144>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    180c:	3304      	adds	r3, #4
    180e:	431f      	orrs	r7, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1810:	7d31      	ldrb	r1, [r6, #20]
    1812:	0449      	lsls	r1, r1, #17
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1814:	7d73      	ldrb	r3, [r6, #21]
    1816:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1818:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
    181a:	7ab1      	ldrb	r1, [r6, #10]
    181c:	7af2      	ldrb	r2, [r6, #11]
    181e:	4311      	orrs	r1, r2
    1820:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1822:	8933      	ldrh	r3, [r6, #8]
    1824:	2bff      	cmp	r3, #255	; 0xff
    1826:	d003      	beq.n	1830 <usart_init+0x164>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1828:	2280      	movs	r2, #128	; 0x80
    182a:	0452      	lsls	r2, r2, #17
    182c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    182e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1830:	7f33      	ldrb	r3, [r6, #28]
    1832:	2b00      	cmp	r3, #0
    1834:	d103      	bne.n	183e <usart_init+0x172>
    1836:	4b34      	ldr	r3, [pc, #208]	; (1908 <usart_init+0x23c>)
    1838:	789b      	ldrb	r3, [r3, #2]
    183a:	079b      	lsls	r3, r3, #30
    183c:	d501      	bpl.n	1842 <usart_init+0x176>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    183e:	2380      	movs	r3, #128	; 0x80
    1840:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1842:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    1844:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    1846:	b21b      	sxth	r3, r3
    1848:	2b00      	cmp	r3, #0
    184a:	dbfb      	blt.n	1844 <usart_init+0x178>
	usart_hw->CTRLB.reg = ctrlb;
    184c:	4643      	mov	r3, r8
    184e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1850:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    1852:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    1854:	b21b      	sxth	r3, r3
    1856:	2b00      	cmp	r3, #0
    1858:	dbfb      	blt.n	1852 <usart_init+0x186>
	usart_hw->CTRLA.reg = ctrla;
    185a:	4643      	mov	r3, r8
    185c:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    185e:	ab0a      	add	r3, sp, #40	; 0x28
    1860:	2280      	movs	r2, #128	; 0x80
    1862:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1864:	2200      	movs	r2, #0
    1866:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1868:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    186a:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    186c:	6a33      	ldr	r3, [r6, #32]
    186e:	9306      	str	r3, [sp, #24]
    1870:	6a73      	ldr	r3, [r6, #36]	; 0x24
    1872:	9307      	str	r3, [sp, #28]
    1874:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1876:	9308      	str	r3, [sp, #32]
    1878:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    187a:	9303      	str	r3, [sp, #12]
    187c:	9309      	str	r3, [sp, #36]	; 0x24
    187e:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1880:	ae06      	add	r6, sp, #24
    1882:	e006      	b.n	1892 <usart_init+0x1c6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1884:	0020      	movs	r0, r4
    1886:	4b21      	ldr	r3, [pc, #132]	; (190c <usart_init+0x240>)
    1888:	4798      	blx	r3
    188a:	e007      	b.n	189c <usart_init+0x1d0>
    188c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    188e:	2f04      	cmp	r7, #4
    1890:	d00d      	beq.n	18ae <usart_init+0x1e2>
    1892:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1894:	00bb      	lsls	r3, r7, #2
    1896:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1898:	2800      	cmp	r0, #0
    189a:	d0f3      	beq.n	1884 <usart_init+0x1b8>
		if (current_pinmux != PINMUX_UNUSED) {
    189c:	1c43      	adds	r3, r0, #1
    189e:	d0f5      	beq.n	188c <usart_init+0x1c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    18a0:	a90a      	add	r1, sp, #40	; 0x28
    18a2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    18a4:	0c00      	lsrs	r0, r0, #16
    18a6:	b2c0      	uxtb	r0, r0
    18a8:	4b19      	ldr	r3, [pc, #100]	; (1910 <usart_init+0x244>)
    18aa:	4798      	blx	r3
    18ac:	e7ee      	b.n	188c <usart_init+0x1c0>
		module->callback[i]            = NULL;
    18ae:	2300      	movs	r3, #0
    18b0:	60ab      	str	r3, [r5, #8]
    18b2:	60eb      	str	r3, [r5, #12]
    18b4:	612b      	str	r3, [r5, #16]
	module->tx_buffer_ptr              = NULL;
    18b6:	61ab      	str	r3, [r5, #24]
	module->rx_buffer_ptr              = NULL;
    18b8:	616b      	str	r3, [r5, #20]
	module->remaining_tx_buffer_length = 0x0000;
    18ba:	2200      	movs	r2, #0
    18bc:	83eb      	strh	r3, [r5, #30]
	module->remaining_rx_buffer_length = 0x0000;
    18be:	83ab      	strh	r3, [r5, #28]
	module->callback_reg_mask          = 0x00;
    18c0:	3320      	adds	r3, #32
    18c2:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    18c4:	3301      	adds	r3, #1
    18c6:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    18c8:	3301      	adds	r3, #1
    18ca:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    18cc:	3301      	adds	r3, #1
    18ce:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    18d0:	6828      	ldr	r0, [r5, #0]
    18d2:	4b05      	ldr	r3, [pc, #20]	; (18e8 <usart_init+0x21c>)
    18d4:	4798      	blx	r3
    18d6:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    18d8:	490e      	ldr	r1, [pc, #56]	; (1914 <usart_init+0x248>)
    18da:	4b0f      	ldr	r3, [pc, #60]	; (1918 <usart_init+0x24c>)
    18dc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    18de:	00a4      	lsls	r4, r4, #2
    18e0:	4b0e      	ldr	r3, [pc, #56]	; (191c <usart_init+0x250>)
    18e2:	50e5      	str	r5, [r4, r3]
	return status_code;
    18e4:	2000      	movs	r0, #0
    18e6:	e704      	b.n	16f2 <usart_init+0x26>
    18e8:	000015dd 	.word	0x000015dd
    18ec:	40000400 	.word	0x40000400
    18f0:	00002799 	.word	0x00002799
    18f4:	0000270d 	.word	0x0000270d
    18f8:	00001495 	.word	0x00001495
    18fc:	000027b5 	.word	0x000027b5
    1900:	000013d7 	.word	0x000013d7
    1904:	00001401 	.word	0x00001401
    1908:	41002000 	.word	0x41002000
    190c:	000014e1 	.word	0x000014e1
    1910:	00002891 	.word	0x00002891
    1914:	000019f1 	.word	0x000019f1
    1918:	00001629 	.word	0x00001629
    191c:	20000130 	.word	0x20000130

00001920 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    1920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1922:	0006      	movs	r6, r0
    1924:	000c      	movs	r4, r1
    1926:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1928:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    192a:	4b0a      	ldr	r3, [pc, #40]	; (1954 <_usart_write_buffer+0x34>)
    192c:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    192e:	8bf3      	ldrh	r3, [r6, #30]
    1930:	b29b      	uxth	r3, r3
    1932:	2b00      	cmp	r3, #0
    1934:	d003      	beq.n	193e <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    1936:	4b08      	ldr	r3, [pc, #32]	; (1958 <_usart_write_buffer+0x38>)
    1938:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    193a:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    193c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    193e:	83f5      	strh	r5, [r6, #30]
    1940:	4b05      	ldr	r3, [pc, #20]	; (1958 <_usart_write_buffer+0x38>)
    1942:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    1944:	61b4      	str	r4, [r6, #24]
	module->tx_status                  = STATUS_BUSY;
    1946:	2205      	movs	r2, #5
    1948:	2323      	movs	r3, #35	; 0x23
    194a:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    194c:	3b22      	subs	r3, #34	; 0x22
    194e:	737b      	strb	r3, [r7, #13]
	return STATUS_OK;
    1950:	2000      	movs	r0, #0
    1952:	e7f3      	b.n	193c <_usart_write_buffer+0x1c>
    1954:	00002311 	.word	0x00002311
    1958:	00002351 	.word	0x00002351

0000195c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    195c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    195e:	0006      	movs	r6, r0
    1960:	000c      	movs	r4, r1
    1962:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1964:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    1966:	4b0a      	ldr	r3, [pc, #40]	; (1990 <_usart_read_buffer+0x34>)
    1968:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    196a:	8bb3      	ldrh	r3, [r6, #28]
    196c:	b29b      	uxth	r3, r3
    196e:	2b00      	cmp	r3, #0
    1970:	d003      	beq.n	197a <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    1972:	4b08      	ldr	r3, [pc, #32]	; (1994 <_usart_read_buffer+0x38>)
    1974:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1976:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    1978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    197a:	83b5      	strh	r5, [r6, #28]
    197c:	4b05      	ldr	r3, [pc, #20]	; (1994 <_usart_read_buffer+0x38>)
    197e:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    1980:	6174      	str	r4, [r6, #20]
	module->rx_status                  = STATUS_BUSY;
    1982:	2205      	movs	r2, #5
    1984:	2322      	movs	r3, #34	; 0x22
    1986:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    1988:	3b1e      	subs	r3, #30
    198a:	737b      	strb	r3, [r7, #13]
	return STATUS_OK;
    198c:	2000      	movs	r0, #0
    198e:	e7f3      	b.n	1978 <_usart_read_buffer+0x1c>
    1990:	00002311 	.word	0x00002311
    1994:	00002351 	.word	0x00002351

00001998 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1998:	1c93      	adds	r3, r2, #2
    199a:	009b      	lsls	r3, r3, #2
    199c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    199e:	2120      	movs	r1, #32
    19a0:	2301      	movs	r3, #1
    19a2:	4093      	lsls	r3, r2
    19a4:	001a      	movs	r2, r3
    19a6:	5c43      	ldrb	r3, [r0, r1]
    19a8:	4313      	orrs	r3, r2
    19aa:	5443      	strb	r3, [r0, r1]
}
    19ac:	4770      	bx	lr
	...

000019b0 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    19b0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    19b2:	2317      	movs	r3, #23
	if (length == 0) {
    19b4:	2a00      	cmp	r2, #0
    19b6:	d101      	bne.n	19bc <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    19b8:	0018      	movs	r0, r3
    19ba:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    19bc:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    19be:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    19c0:	2c00      	cmp	r4, #0
    19c2:	d0f9      	beq.n	19b8 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    19c4:	4b01      	ldr	r3, [pc, #4]	; (19cc <usart_write_buffer_job+0x1c>)
    19c6:	4798      	blx	r3
    19c8:	0003      	movs	r3, r0
    19ca:	e7f5      	b.n	19b8 <usart_write_buffer_job+0x8>
    19cc:	00001921 	.word	0x00001921

000019d0 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    19d0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    19d2:	2317      	movs	r3, #23
	if (length == 0) {
    19d4:	2a00      	cmp	r2, #0
    19d6:	d101      	bne.n	19dc <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    19d8:	0018      	movs	r0, r3
    19da:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    19dc:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    19de:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    19e0:	2c00      	cmp	r4, #0
    19e2:	d0f9      	beq.n	19d8 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    19e4:	4b01      	ldr	r3, [pc, #4]	; (19ec <usart_read_buffer_job+0x1c>)
    19e6:	4798      	blx	r3
    19e8:	0003      	movs	r3, r0
    19ea:	e7f5      	b.n	19d8 <usart_read_buffer_job+0x8>
    19ec:	0000195d 	.word	0x0000195d

000019f0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    19f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    19f2:	0080      	lsls	r0, r0, #2
    19f4:	4b46      	ldr	r3, [pc, #280]	; (1b10 <_usart_interrupt_handler+0x120>)
    19f6:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    19f8:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    19fa:	8a23      	ldrh	r3, [r4, #16]
	while (usart_is_syncing(module)) {
    19fc:	b21b      	sxth	r3, r3
    19fe:	2b00      	cmp	r3, #0
    1a00:	dbfb      	blt.n	19fa <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1a02:	7ba3      	ldrb	r3, [r4, #14]
	interrupt_status &= usart_hw->INTENSET.reg;
    1a04:	7b66      	ldrb	r6, [r4, #13]
    1a06:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1a08:	2320      	movs	r3, #32
    1a0a:	5ceb      	ldrb	r3, [r5, r3]
    1a0c:	2221      	movs	r2, #33	; 0x21
    1a0e:	5caf      	ldrb	r7, [r5, r2]
    1a10:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1a12:	07f3      	lsls	r3, r6, #31
    1a14:	d522      	bpl.n	1a5c <_usart_interrupt_handler+0x6c>
		if (module->remaining_tx_buffer_length) {
    1a16:	8beb      	ldrh	r3, [r5, #30]
    1a18:	b29b      	uxth	r3, r3
    1a1a:	2b00      	cmp	r3, #0
    1a1c:	d01c      	beq.n	1a58 <_usart_interrupt_handler+0x68>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1a1e:	69aa      	ldr	r2, [r5, #24]
    1a20:	7813      	ldrb	r3, [r2, #0]
    1a22:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1a24:	1c51      	adds	r1, r2, #1
    1a26:	61a9      	str	r1, [r5, #24]

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1a28:	7969      	ldrb	r1, [r5, #5]
    1a2a:	2901      	cmp	r1, #1
    1a2c:	d00e      	beq.n	1a4c <_usart_interrupt_handler+0x5c>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1a2e:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1a30:	05db      	lsls	r3, r3, #23
    1a32:	0ddb      	lsrs	r3, r3, #23
    1a34:	8323      	strh	r3, [r4, #24]

			if (--(module->remaining_tx_buffer_length) == 0) {
    1a36:	8beb      	ldrh	r3, [r5, #30]
    1a38:	3b01      	subs	r3, #1
    1a3a:	b29b      	uxth	r3, r3
    1a3c:	83eb      	strh	r3, [r5, #30]
    1a3e:	2b00      	cmp	r3, #0
    1a40:	d10c      	bne.n	1a5c <_usart_interrupt_handler+0x6c>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1a42:	3301      	adds	r3, #1
    1a44:	7323      	strb	r3, [r4, #12]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1a46:	3301      	adds	r3, #1
    1a48:	7363      	strb	r3, [r4, #13]
    1a4a:	e007      	b.n	1a5c <_usart_interrupt_handler+0x6c>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1a4c:	7851      	ldrb	r1, [r2, #1]
    1a4e:	0209      	lsls	r1, r1, #8
    1a50:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1a52:	3202      	adds	r2, #2
    1a54:	61aa      	str	r2, [r5, #24]
    1a56:	e7eb      	b.n	1a30 <_usart_interrupt_handler+0x40>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1a58:	2301      	movs	r3, #1
    1a5a:	7323      	strb	r3, [r4, #12]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1a5c:	07b3      	lsls	r3, r6, #30
    1a5e:	d506      	bpl.n	1a6e <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1a60:	2302      	movs	r3, #2
    1a62:	7323      	strb	r3, [r4, #12]
		module->tx_status = STATUS_OK;
    1a64:	2200      	movs	r2, #0
    1a66:	3321      	adds	r3, #33	; 0x21
    1a68:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1a6a:	07fb      	lsls	r3, r7, #31
    1a6c:	d416      	bmi.n	1a9c <_usart_interrupt_handler+0xac>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1a6e:	0773      	lsls	r3, r6, #29
    1a70:	d54d      	bpl.n	1b0e <_usart_interrupt_handler+0x11e>

		if (module->remaining_rx_buffer_length) {
    1a72:	8bab      	ldrh	r3, [r5, #28]
    1a74:	b29b      	uxth	r3, r3
    1a76:	2b00      	cmp	r3, #0
    1a78:	d047      	beq.n	1b0a <_usart_interrupt_handler+0x11a>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1a7a:	8a23      	ldrh	r3, [r4, #16]
    1a7c:	b2db      	uxtb	r3, r3
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1a7e:	075a      	lsls	r2, r3, #29
    1a80:	d020      	beq.n	1ac4 <_usart_interrupt_handler+0xd4>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1a82:	079a      	lsls	r2, r3, #30
    1a84:	d50e      	bpl.n	1aa4 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1a86:	221a      	movs	r2, #26
    1a88:	2322      	movs	r3, #34	; 0x22
    1a8a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1a8c:	3b20      	subs	r3, #32
    1a8e:	8223      	strh	r3, [r4, #16]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1a90:	077b      	lsls	r3, r7, #29
    1a92:	d53c      	bpl.n	1b0e <_usart_interrupt_handler+0x11e>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1a94:	692b      	ldr	r3, [r5, #16]
    1a96:	0028      	movs	r0, r5
    1a98:	4798      	blx	r3
    1a9a:	e038      	b.n	1b0e <_usart_interrupt_handler+0x11e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1a9c:	0028      	movs	r0, r5
    1a9e:	68ab      	ldr	r3, [r5, #8]
    1aa0:	4798      	blx	r3
    1aa2:	e7e4      	b.n	1a6e <_usart_interrupt_handler+0x7e>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1aa4:	075a      	lsls	r2, r3, #29
    1aa6:	d505      	bpl.n	1ab4 <_usart_interrupt_handler+0xc4>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1aa8:	221e      	movs	r2, #30
    1aaa:	2322      	movs	r3, #34	; 0x22
    1aac:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1aae:	3b1e      	subs	r3, #30
    1ab0:	8223      	strh	r3, [r4, #16]
    1ab2:	e7ed      	b.n	1a90 <_usart_interrupt_handler+0xa0>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1ab4:	07db      	lsls	r3, r3, #31
    1ab6:	d5eb      	bpl.n	1a90 <_usart_interrupt_handler+0xa0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1ab8:	2213      	movs	r2, #19
    1aba:	2322      	movs	r3, #34	; 0x22
    1abc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1abe:	3b21      	subs	r3, #33	; 0x21
    1ac0:	8223      	strh	r3, [r4, #16]
    1ac2:	e7e5      	b.n	1a90 <_usart_interrupt_handler+0xa0>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1ac4:	8b23      	ldrh	r3, [r4, #24]
    1ac6:	05db      	lsls	r3, r3, #23
    1ac8:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1aca:	b2da      	uxtb	r2, r3
    1acc:	6969      	ldr	r1, [r5, #20]
    1ace:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1ad0:	696a      	ldr	r2, [r5, #20]
    1ad2:	1c51      	adds	r1, r2, #1
    1ad4:	6169      	str	r1, [r5, #20]

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1ad6:	7969      	ldrb	r1, [r5, #5]
    1ad8:	2901      	cmp	r1, #1
    1ada:	d010      	beq.n	1afe <_usart_interrupt_handler+0x10e>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1adc:	8bab      	ldrh	r3, [r5, #28]
    1ade:	3b01      	subs	r3, #1
    1ae0:	b29b      	uxth	r3, r3
    1ae2:	83ab      	strh	r3, [r5, #28]
    1ae4:	2b00      	cmp	r3, #0
    1ae6:	d112      	bne.n	1b0e <_usart_interrupt_handler+0x11e>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1ae8:	3304      	adds	r3, #4
    1aea:	7323      	strb	r3, [r4, #12]
					module->rx_status = STATUS_OK;
    1aec:	2200      	movs	r2, #0
    1aee:	331e      	adds	r3, #30
    1af0:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1af2:	07bb      	lsls	r3, r7, #30
    1af4:	d50b      	bpl.n	1b0e <_usart_interrupt_handler+0x11e>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1af6:	68eb      	ldr	r3, [r5, #12]
    1af8:	0028      	movs	r0, r5
    1afa:	4798      	blx	r3
    1afc:	e007      	b.n	1b0e <_usart_interrupt_handler+0x11e>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1afe:	0a1b      	lsrs	r3, r3, #8
    1b00:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1b02:	696b      	ldr	r3, [r5, #20]
    1b04:	3301      	adds	r3, #1
    1b06:	616b      	str	r3, [r5, #20]
    1b08:	e7e8      	b.n	1adc <_usart_interrupt_handler+0xec>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1b0a:	2304      	movs	r3, #4
    1b0c:	7323      	strb	r3, [r4, #12]
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b10:	20000130 	.word	0x20000130

00001b14 <configure_adc_VMPPT>:
//=============================================================================
//! \brief Initialize ADC peripheral.
//! \return TRUE if that ADC was successfully configured.
//=============================================================================
bool configure_adc_VMPPT (void)
{
    1b14:	b510      	push	{r4, lr}
    1b16:	b08c      	sub	sp, #48	; 0x30
    struct adc_config conf_adc;

    adc_get_config_defaults(&conf_adc);
    1b18:	4668      	mov	r0, sp
    1b1a:	4b12      	ldr	r3, [pc, #72]	; (1b64 <configure_adc_VMPPT+0x50>)
    1b1c:	4798      	blx	r3

    conf_adc.reference = ADC_REFERENCE_AREFA;
    1b1e:	2303      	movs	r3, #3
    1b20:	466a      	mov	r2, sp
    1b22:	7053      	strb	r3, [r2, #1]
    conf_adc.positive_input = VMPPT_ADC_0_PIN;
    1b24:	3301      	adds	r3, #1
    1b26:	7313      	strb	r3, [r2, #12]
    
    //system_voltage_reference_enable(ADC_REFERENCE_AREFA);

    adc_init(&adc_instance, ADC_MODULE, &conf_adc);
    1b28:	4c0f      	ldr	r4, [pc, #60]	; (1b68 <configure_adc_VMPPT+0x54>)
    1b2a:	4910      	ldr	r1, [pc, #64]	; (1b6c <configure_adc_VMPPT+0x58>)
    1b2c:	0020      	movs	r0, r4
    1b2e:	4b10      	ldr	r3, [pc, #64]	; (1b70 <configure_adc_VMPPT+0x5c>)
    1b30:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    1b32:	6822      	ldr	r2, [r4, #0]
    1b34:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1b36:	b25b      	sxtb	r3, r3
    1b38:	2b00      	cmp	r3, #0
    1b3a:	dbfb      	blt.n	1b34 <configure_adc_VMPPT+0x20>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1b3c:	2180      	movs	r1, #128	; 0x80
    1b3e:	0389      	lsls	r1, r1, #14
    1b40:	4b0c      	ldr	r3, [pc, #48]	; (1b74 <configure_adc_VMPPT+0x60>)
    1b42:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    1b44:	230f      	movs	r3, #15
    1b46:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    1b48:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    1b4a:	7813      	ldrb	r3, [r2, #0]
    1b4c:	2102      	movs	r1, #2
    1b4e:	430b      	orrs	r3, r1
    1b50:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    1b52:	4b05      	ldr	r3, [pc, #20]	; (1b68 <configure_adc_VMPPT+0x54>)
    1b54:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1b56:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1b58:	b25b      	sxtb	r3, r3
    1b5a:	2b00      	cmp	r3, #0
    1b5c:	dbfb      	blt.n	1b56 <configure_adc_VMPPT+0x42>

    adc_enable(&adc_instance);

    return true;
}
    1b5e:	2001      	movs	r0, #1
    1b60:	b00c      	add	sp, #48	; 0x30
    1b62:	bd10      	pop	{r4, pc}
    1b64:	0000019d 	.word	0x0000019d
    1b68:	20000140 	.word	0x20000140
    1b6c:	42004000 	.word	0x42004000
    1b70:	000001e5 	.word	0x000001e5
    1b74:	e000e100 	.word	0xe000e100

00001b78 <get_value_VMPPT>:
    adc_disable(&adc_instance);
}


void get_value_VMPPT (uint32_t *value, uint32_t *converted)
{
    1b78:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b7a:	b083      	sub	sp, #12
    1b7c:	000f      	movs	r7, r1
	Adc *const adc_module = module_inst->hw;
    1b7e:	4b22      	ldr	r3, [pc, #136]	; (1c08 <get_value_VMPPT+0x90>)
    1b80:	6819      	ldr	r1, [r3, #0]
    1b82:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1b84:	b25b      	sxtb	r3, r3
    1b86:	2b00      	cmp	r3, #0
    1b88:	dbfb      	blt.n	1b82 <get_value_VMPPT+0xa>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1b8a:	7b0b      	ldrb	r3, [r1, #12]
    1b8c:	2202      	movs	r2, #2
    1b8e:	4313      	orrs	r3, r2
    1b90:	730b      	strb	r3, [r1, #12]
    1b92:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1b94:	b25b      	sxtb	r3, r3
    1b96:	2b00      	cmp	r3, #0
    1b98:	dbfb      	blt.n	1b92 <get_value_VMPPT+0x1a>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1b9a:	2401      	movs	r4, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    1b9c:	2604      	movs	r6, #4
		status_flags |= ADC_STATUS_WINDOW;
    1b9e:	2502      	movs	r5, #2
    1ba0:	e001      	b.n	1ba6 <get_value_VMPPT+0x2e>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    1ba2:	4214      	tst	r4, r2
    1ba4:	d10a      	bne.n	1bbc <get_value_VMPPT+0x44>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1ba6:	7e0b      	ldrb	r3, [r1, #24]
    1ba8:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1baa:	0022      	movs	r2, r4
    1bac:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    1bae:	421e      	tst	r6, r3
    1bb0:	d000      	beq.n	1bb4 <get_value_VMPPT+0x3c>
		status_flags |= ADC_STATUS_WINDOW;
    1bb2:	432a      	orrs	r2, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1bb4:	421d      	tst	r5, r3
    1bb6:	d0f4      	beq.n	1ba2 <get_value_VMPPT+0x2a>
		status_flags |= ADC_STATUS_OVERRUN;
    1bb8:	4332      	orrs	r2, r6
    1bba:	e7f2      	b.n	1ba2 <get_value_VMPPT+0x2a>
    1bbc:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1bbe:	b25b      	sxtb	r3, r3
    1bc0:	2b00      	cmp	r3, #0
    1bc2:	dbfb      	blt.n	1bbc <get_value_VMPPT+0x44>
	*result = adc_module->RESULT.reg;
    1bc4:	8b4a      	ldrh	r2, [r1, #26]
    1bc6:	ab01      	add	r3, sp, #4
    1bc8:	801a      	strh	r2, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
    1bca:	2301      	movs	r3, #1
    1bcc:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1bce:	7e0a      	ldrb	r2, [r1, #24]
    1bd0:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1bd2:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    1bd4:	0754      	lsls	r4, r2, #29
    1bd6:	d501      	bpl.n	1bdc <get_value_VMPPT+0x64>
		status_flags |= ADC_STATUS_WINDOW;
    1bd8:	2402      	movs	r4, #2
    1bda:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1bdc:	0792      	lsls	r2, r2, #30
    1bde:	d501      	bpl.n	1be4 <get_value_VMPPT+0x6c>
		status_flags |= ADC_STATUS_OVERRUN;
    1be0:	2204      	movs	r2, #4
    1be2:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    1be4:	075b      	lsls	r3, r3, #29
    1be6:	d501      	bpl.n	1bec <get_value_VMPPT+0x74>
	adc_module->INTFLAG.reg = int_flags;
    1be8:	2302      	movs	r3, #2
    1bea:	760b      	strb	r3, [r1, #24]
    
    do {
        /* Wait for conversion to be done and read out result */
    } while (adc_read(&adc_instance, &adc_reading) == STATUS_BUSY);
    
    reading = (((D_ADC_VREF * adc_reading) / D_ADC_RESOLUTION) * (VMPPT_PULL_UP + VMPPT_PULL_DOWN) / VMPPT_PULL_DOWN);
    1bec:	9b01      	ldr	r3, [sp, #4]
    
    *value = adc_reading;
    1bee:	6003      	str	r3, [r0, #0]
    reading = (((D_ADC_VREF * adc_reading) / D_ADC_RESOLUTION) * (VMPPT_PULL_UP + VMPPT_PULL_DOWN) / VMPPT_PULL_DOWN);
    1bf0:	4806      	ldr	r0, [pc, #24]	; (1c0c <get_value_VMPPT+0x94>)
    1bf2:	4358      	muls	r0, r3
    1bf4:	0b00      	lsrs	r0, r0, #12
    1bf6:	0083      	lsls	r3, r0, #2
    1bf8:	1818      	adds	r0, r3, r0
    1bfa:	0180      	lsls	r0, r0, #6
    1bfc:	21dc      	movs	r1, #220	; 0xdc
    1bfe:	4b04      	ldr	r3, [pc, #16]	; (1c10 <get_value_VMPPT+0x98>)
    1c00:	4798      	blx	r3
    *converted = reading;
    1c02:	6038      	str	r0, [r7, #0]
    
    return;
}
    1c04:	b003      	add	sp, #12
    1c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c08:	20000140 	.word	0x20000140
    1c0c:	00000ce4 	.word	0x00000ce4
    1c10:	00003059 	.word	0x00003059

00001c14 <configure_dac>:
//
struct dac_module dac_instance;

//
void configure_dac()
{
    1c14:	b510      	push	{r4, lr}
    1c16:	b082      	sub	sp, #8
    struct dac_config config_dac;
    dac_get_config_defaults(&config_dac);
    1c18:	4668      	mov	r0, sp
    1c1a:	4b07      	ldr	r3, [pc, #28]	; (1c38 <configure_dac+0x24>)
    1c1c:	4798      	blx	r3
    config_dac.reference = DAC_REFERENCE_INT1V;
    1c1e:	2300      	movs	r3, #0
    1c20:	466a      	mov	r2, sp
    1c22:	7013      	strb	r3, [r2, #0]
    dac_init(&dac_instance, DAC, &config_dac);
    1c24:	4c05      	ldr	r4, [pc, #20]	; (1c3c <configure_dac+0x28>)
    1c26:	4906      	ldr	r1, [pc, #24]	; (1c40 <configure_dac+0x2c>)
    1c28:	0020      	movs	r0, r4
    1c2a:	4b06      	ldr	r3, [pc, #24]	; (1c44 <configure_dac+0x30>)
    1c2c:	4798      	blx	r3
    dac_enable(&dac_instance);
    1c2e:	0020      	movs	r0, r4
    1c30:	4b05      	ldr	r3, [pc, #20]	; (1c48 <configure_dac+0x34>)
    1c32:	4798      	blx	r3
}
    1c34:	b002      	add	sp, #8
    1c36:	bd10      	pop	{r4, pc}
    1c38:	0000070d 	.word	0x0000070d
    1c3c:	2000018c 	.word	0x2000018c
    1c40:	42004800 	.word	0x42004800
    1c44:	00000721 	.word	0x00000721
    1c48:	000007e9 	.word	0x000007e9

00001c4c <set_led_bright_perthousand>:

//
void set_led_bright_perthousand(uint16_t perthousand)
{
    1c4c:	b510      	push	{r4, lr}
    1c4e:	b082      	sub	sp, #8
    1c50:	0004      	movs	r4, r0
    if (perthousand < LIGHT_MIN)
    1c52:	2863      	cmp	r0, #99	; 0x63
    1c54:	d913      	bls.n	1c7e <set_led_bright_perthousand+0x32>
        port_pin_set_config(LED_DRIVER_PIN, &pin_conf);
        port_pin_set_output_level(LED_DRIVER_PIN, LED_DRIVER_INACTIVE);
    }
    else
    {
        if (!dac_enabled)
    1c56:	4b19      	ldr	r3, [pc, #100]	; (1cbc <set_led_bright_perthousand+0x70>)
    1c58:	781b      	ldrb	r3, [r3, #0]
    1c5a:	2b00      	cmp	r3, #0
    1c5c:	d01e      	beq.n	1c9c <set_led_bright_perthousand+0x50>
            // Configure the Enable of LED Stripe as output, turn it on
            port_pin_set_config(LED_DRIVER_PIN, &pin_conf);
            port_pin_set_output_level(LED_DRIVER_PIN, LED_DRIVER_ACTIVE);
        }
        
        bright_reference = perthousand;
    1c5e:	4b18      	ldr	r3, [pc, #96]	; (1cc0 <set_led_bright_perthousand+0x74>)
    1c60:	801c      	strh	r4, [r3, #0]
        
        uint16_t led_data = (perthousand*DAC_LED_FULL)/1000;
    1c62:	2056      	movs	r0, #86	; 0x56
    1c64:	30ff      	adds	r0, #255	; 0xff
    1c66:	4360      	muls	r0, r4
    1c68:	21fa      	movs	r1, #250	; 0xfa
    1c6a:	0089      	lsls	r1, r1, #2
    1c6c:	4b15      	ldr	r3, [pc, #84]	; (1cc4 <set_led_bright_perthousand+0x78>)
    1c6e:	4798      	blx	r3
        
        dac_chan_write(&dac_instance, DAC_CHANNEL_0, led_data);
    1c70:	b282      	uxth	r2, r0
    1c72:	2100      	movs	r1, #0
    1c74:	4814      	ldr	r0, [pc, #80]	; (1cc8 <set_led_bright_perthousand+0x7c>)
    1c76:	4b15      	ldr	r3, [pc, #84]	; (1ccc <set_led_bright_perthousand+0x80>)
    1c78:	4798      	blx	r3
    }    
    1c7a:	b002      	add	sp, #8
    1c7c:	bd10      	pop	{r4, pc}
        dac_enabled = false;
    1c7e:	2300      	movs	r3, #0
    1c80:	4a0e      	ldr	r2, [pc, #56]	; (1cbc <set_led_bright_perthousand+0x70>)
    1c82:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    1c84:	a901      	add	r1, sp, #4
    1c86:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1c88:	2201      	movs	r2, #1
    1c8a:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    1c8c:	708b      	strb	r3, [r1, #2]
        port_pin_set_config(LED_DRIVER_PIN, &pin_conf);
    1c8e:	2001      	movs	r0, #1
    1c90:	4b0f      	ldr	r3, [pc, #60]	; (1cd0 <set_led_bright_perthousand+0x84>)
    1c92:	4798      	blx	r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1c94:	2202      	movs	r2, #2
    1c96:	4b0f      	ldr	r3, [pc, #60]	; (1cd4 <set_led_bright_perthousand+0x88>)
    1c98:	615a      	str	r2, [r3, #20]
    1c9a:	e7ee      	b.n	1c7a <set_led_bright_perthousand+0x2e>
            dac_enabled = true;
    1c9c:	2201      	movs	r2, #1
    1c9e:	4b07      	ldr	r3, [pc, #28]	; (1cbc <set_led_bright_perthousand+0x70>)
    1ca0:	701a      	strb	r2, [r3, #0]
	config->direction  = PORT_PIN_DIR_INPUT;
    1ca2:	a901      	add	r1, sp, #4
    1ca4:	2300      	movs	r3, #0
    1ca6:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1ca8:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    1caa:	708b      	strb	r3, [r1, #2]
            port_pin_set_config(LED_DRIVER_PIN, &pin_conf);
    1cac:	2001      	movs	r0, #1
    1cae:	4b08      	ldr	r3, [pc, #32]	; (1cd0 <set_led_bright_perthousand+0x84>)
    1cb0:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    1cb2:	2202      	movs	r2, #2
    1cb4:	4b07      	ldr	r3, [pc, #28]	; (1cd4 <set_led_bright_perthousand+0x88>)
    1cb6:	619a      	str	r2, [r3, #24]
    1cb8:	e7d1      	b.n	1c5e <set_led_bright_perthousand+0x12>
    1cba:	46c0      	nop			; (mov r8, r8)
    1cbc:	20000008 	.word	0x20000008
    1cc0:	2000018a 	.word	0x2000018a
    1cc4:	0000316d 	.word	0x0000316d
    1cc8:	2000018c 	.word	0x2000018c
    1ccc:	00000825 	.word	0x00000825
    1cd0:	000009cd 	.word	0x000009cd
    1cd4:	41004400 	.word	0x41004400

00001cd8 <gas_gauge_update_percent>:
	gas_gauge_update_percent(battery_percent);
    gas_gauge_config_CC_registers();
}

void gas_gauge_update_percent(uint32_t new_battery_percent)
{
    1cd8:	b570      	push	{r4, r5, r6, lr}
    1cda:	b084      	sub	sp, #16
	uint16_t new_battery_value = ((new_battery_percent * FULL_SCALE_GAUGE) / 100);
    1cdc:	0403      	lsls	r3, r0, #16
    1cde:	1a18      	subs	r0, r3, r0
    1ce0:	2164      	movs	r1, #100	; 0x64
    1ce2:	4b10      	ldr	r3, [pc, #64]	; (1d24 <gas_gauge_update_percent+0x4c>)
    1ce4:	4798      	blx	r3
    1ce6:	0006      	movs	r6, r0
	
	configure_registers_accumulated_buffer[0] = 0x02;
    1ce8:	4b0f      	ldr	r3, [pc, #60]	; (1d28 <gas_gauge_update_percent+0x50>)
    1cea:	2202      	movs	r2, #2
    1cec:	701a      	strb	r2, [r3, #0]
	configure_registers_accumulated_buffer[1] = (new_battery_value >> 8) & 0xFF;
    1cee:	0a02      	lsrs	r2, r0, #8
    1cf0:	705a      	strb	r2, [r3, #1]
	
	struct i2c_master_packet packet = {
    1cf2:	aa01      	add	r2, sp, #4
    1cf4:	4b0d      	ldr	r3, [pc, #52]	; (1d2c <gas_gauge_update_percent+0x54>)
    1cf6:	cb13      	ldmia	r3!, {r0, r1, r4}
    1cf8:	c213      	stmia	r2!, {r0, r1, r4}
		.ten_bit_address = false,
		.high_speed = false,
		.hs_master_code = 0x0,
	};
	
	while (i2c_master_write_packet_wait(&gas_gauge_instance, &packet) != STATUS_OK);
    1cfa:	4d0d      	ldr	r5, [pc, #52]	; (1d30 <gas_gauge_update_percent+0x58>)
    1cfc:	4c0d      	ldr	r4, [pc, #52]	; (1d34 <gas_gauge_update_percent+0x5c>)
    1cfe:	a901      	add	r1, sp, #4
    1d00:	0028      	movs	r0, r5
    1d02:	47a0      	blx	r4
    1d04:	2800      	cmp	r0, #0
    1d06:	d1fa      	bne.n	1cfe <gas_gauge_update_percent+0x26>
	
	configure_registers_accumulated_buffer[0] = 0x03;
    1d08:	4b07      	ldr	r3, [pc, #28]	; (1d28 <gas_gauge_update_percent+0x50>)
    1d0a:	2203      	movs	r2, #3
    1d0c:	701a      	strb	r2, [r3, #0]
	configure_registers_accumulated_buffer[1] = new_battery_value & 0xFF;
    1d0e:	705e      	strb	r6, [r3, #1]
	
	while (i2c_master_write_packet_wait(&gas_gauge_instance, &packet) != STATUS_OK);
    1d10:	4d07      	ldr	r5, [pc, #28]	; (1d30 <gas_gauge_update_percent+0x58>)
    1d12:	4c08      	ldr	r4, [pc, #32]	; (1d34 <gas_gauge_update_percent+0x5c>)
    1d14:	a901      	add	r1, sp, #4
    1d16:	0028      	movs	r0, r5
    1d18:	47a0      	blx	r4
    1d1a:	2800      	cmp	r0, #0
    1d1c:	d1fa      	bne.n	1d14 <gas_gauge_update_percent+0x3c>
}
    1d1e:	b004      	add	sp, #16
    1d20:	bd70      	pop	{r4, r5, r6, pc}
    1d22:	46c0      	nop			; (mov r8, r8)
    1d24:	00003059 	.word	0x00003059
    1d28:	200000a8 	.word	0x200000a8
    1d2c:	00003d6c 	.word	0x00003d6c
    1d30:	200001e0 	.word	0x200001e0
    1d34:	00001069 	.word	0x00001069

00001d38 <gas_gauge_config_CC_registers>:

void gas_gauge_config_CC_registers()
{
    1d38:	b530      	push	{r4, r5, lr}
    1d3a:	b085      	sub	sp, #20
    /* Init i2c packet. */
    struct i2c_master_packet packet = {
    1d3c:	aa01      	add	r2, sp, #4
    1d3e:	4b06      	ldr	r3, [pc, #24]	; (1d58 <gas_gauge_config_CC_registers+0x20>)
    1d40:	330c      	adds	r3, #12
    1d42:	cb13      	ldmia	r3!, {r0, r1, r4}
    1d44:	c213      	stmia	r2!, {r0, r1, r4}
        .ten_bit_address = false,
        .high_speed = false,
        .hs_master_code = 0x0,
    };
    
    while (i2c_master_write_packet_wait(&gas_gauge_instance, &packet) != STATUS_OK);
    1d46:	4d05      	ldr	r5, [pc, #20]	; (1d5c <gas_gauge_config_CC_registers+0x24>)
    1d48:	4c05      	ldr	r4, [pc, #20]	; (1d60 <gas_gauge_config_CC_registers+0x28>)
    1d4a:	a901      	add	r1, sp, #4
    1d4c:	0028      	movs	r0, r5
    1d4e:	47a0      	blx	r4
    1d50:	2800      	cmp	r0, #0
    1d52:	d1fa      	bne.n	1d4a <gas_gauge_config_CC_registers+0x12>
}
    1d54:	b005      	add	sp, #20
    1d56:	bd30      	pop	{r4, r5, pc}
    1d58:	00003d6c 	.word	0x00003d6c
    1d5c:	200001e0 	.word	0x200001e0
    1d60:	00001069 	.word	0x00001069

00001d64 <configure_gas_gauge>:
{
    1d64:	b570      	push	{r4, r5, r6, lr}
    1d66:	b08a      	sub	sp, #40	; 0x28
    1d68:	0004      	movs	r4, r0
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1d6a:	2364      	movs	r3, #100	; 0x64
    1d6c:	9300      	str	r3, [sp, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
#endif
	config->generator_source = GCLK_GENERATOR_0;
    1d6e:	2300      	movs	r3, #0
    1d70:	466a      	mov	r2, sp
    1d72:	7113      	strb	r3, [r2, #4]
	config->run_in_standby   = false;
    1d74:	7413      	strb	r3, [r2, #16]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1d76:	2280      	movs	r2, #128	; 0x80
    1d78:	0392      	lsls	r2, r2, #14
    1d7a:	9202      	str	r2, [sp, #8]
	config->buffer_timeout   = 65535;
    1d7c:	2201      	movs	r2, #1
    1d7e:	4252      	negs	r2, r2
    1d80:	4669      	mov	r1, sp
    1d82:	81ca      	strh	r2, [r1, #14]
	config->unknown_bus_state_timeout = 65535;
    1d84:	818a      	strh	r2, [r1, #12]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    1d86:	466a      	mov	r2, sp
    1d88:	770b      	strb	r3, [r1, #28]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1d8a:	9308      	str	r3, [sp, #32]
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
	config->master_scl_low_extend_timeout  = false;
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    1d8c:	33d7      	adds	r3, #215	; 0xd7
    1d8e:	848b      	strh	r3, [r1, #36]	; 0x24
    config_gas_gauge.pinmux_pad0 = GAS_GAUGE_I2C_SERCOM_PINMUX_PAD0;
    1d90:	4b16      	ldr	r3, [pc, #88]	; (1dec <configure_gas_gauge+0x88>)
    1d92:	9305      	str	r3, [sp, #20]
    config_gas_gauge.pinmux_pad1 = GAS_GAUGE_I2C_SERCOM_PINMUX_PAD1;
    1d94:	4b16      	ldr	r3, [pc, #88]	; (1df0 <configure_gas_gauge+0x8c>)
    1d96:	9306      	str	r3, [sp, #24]
    i2c_master_init(&gas_gauge_instance, GAS_GAUGE_I2C_MODULE, &config_gas_gauge);
    1d98:	4d16      	ldr	r5, [pc, #88]	; (1df4 <configure_gas_gauge+0x90>)
    1d9a:	4917      	ldr	r1, [pc, #92]	; (1df8 <configure_gas_gauge+0x94>)
    1d9c:	0028      	movs	r0, r5
    1d9e:	4b17      	ldr	r3, [pc, #92]	; (1dfc <configure_gas_gauge+0x98>)
    1da0:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1da2:	682d      	ldr	r5, [r5, #0]
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
    1da4:	8a2b      	ldrh	r3, [r5, #16]
	while (i2c_master_is_syncing(module)) {
    1da6:	b21b      	sxth	r3, r3
    1da8:	2b00      	cmp	r3, #0
    1daa:	dbfb      	blt.n	1da4 <configure_gas_gauge+0x40>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1dac:	682b      	ldr	r3, [r5, #0]
    1dae:	2202      	movs	r2, #2
    1db0:	4313      	orrs	r3, r2
    1db2:	602b      	str	r3, [r5, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1db4:	4e0f      	ldr	r6, [pc, #60]	; (1df4 <configure_gas_gauge+0x90>)
    1db6:	6830      	ldr	r0, [r6, #0]
    1db8:	4b11      	ldr	r3, [pc, #68]	; (1e00 <configure_gas_gauge+0x9c>)
    1dba:	4798      	blx	r3
    1dbc:	231f      	movs	r3, #31
    1dbe:	4018      	ands	r0, r3
    1dc0:	3b1e      	subs	r3, #30
    1dc2:	4083      	lsls	r3, r0
    1dc4:	4a0f      	ldr	r2, [pc, #60]	; (1e04 <configure_gas_gauge+0xa0>)
    1dc6:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1dc8:	88f0      	ldrh	r0, [r6, #6]
	uint32_t timeout_counter = 0;
    1dca:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1dcc:	2110      	movs	r1, #16
    1dce:	8a2a      	ldrh	r2, [r5, #16]
    1dd0:	420a      	tst	r2, r1
    1dd2:	d104      	bne.n	1dde <configure_gas_gauge+0x7a>
		timeout_counter++;
    1dd4:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1dd6:	4283      	cmp	r3, r0
    1dd8:	d3f9      	bcc.n	1dce <configure_gas_gauge+0x6a>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1dda:	2310      	movs	r3, #16
    1ddc:	822b      	strh	r3, [r5, #16]
	gas_gauge_update_percent(battery_percent);
    1dde:	0020      	movs	r0, r4
    1de0:	4b09      	ldr	r3, [pc, #36]	; (1e08 <configure_gas_gauge+0xa4>)
    1de2:	4798      	blx	r3
    gas_gauge_config_CC_registers();
    1de4:	4b09      	ldr	r3, [pc, #36]	; (1e0c <configure_gas_gauge+0xa8>)
    1de6:	4798      	blx	r3
}
    1de8:	b00a      	add	sp, #40	; 0x28
    1dea:	bd70      	pop	{r4, r5, r6, pc}
    1dec:	00080002 	.word	0x00080002
    1df0:	00090002 	.word	0x00090002
    1df4:	200001e0 	.word	0x200001e0
    1df8:	42000800 	.word	0x42000800
    1dfc:	00000eb1 	.word	0x00000eb1
    1e00:	00001669 	.word	0x00001669
    1e04:	e000e100 	.word	0xe000e100
    1e08:	00001cd9 	.word	0x00001cd9
    1e0c:	00001d39 	.word	0x00001d39

00001e10 <gas_gauge_read>:
    
    while (i2c_master_write_packet_wait(&gas_gauge_instance, &packet) != STATUS_OK);
}

bool gas_gauge_read(uint32_t *value, uint32_t *percent)
{
    1e10:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e12:	b085      	sub	sp, #20
    1e14:	0005      	movs	r5, r0
    1e16:	000c      	movs	r4, r1
    bool ok = false;
    
    /* Init i2c packet. */
    struct i2c_master_packet packet = {
    1e18:	a901      	add	r1, sp, #4
    1e1a:	4b0e      	ldr	r3, [pc, #56]	; (1e54 <gas_gauge_read+0x44>)
    1e1c:	3324      	adds	r3, #36	; 0x24
    1e1e:	000a      	movs	r2, r1
    1e20:	cbc1      	ldmia	r3!, {r0, r6, r7}
    1e22:	c2c1      	stmia	r2!, {r0, r6, r7}
        .hs_master_code = 0x0,
    };
    
    /* Read from slave until success. */
    packet.data = read_buffer;
    if (i2c_master_read_packet_wait(&gas_gauge_instance, &packet) == STATUS_OK) {
    1e24:	480c      	ldr	r0, [pc, #48]	; (1e58 <gas_gauge_read+0x48>)
    1e26:	4b0d      	ldr	r3, [pc, #52]	; (1e5c <gas_gauge_read+0x4c>)
    1e28:	4798      	blx	r3
    bool ok = false;
    1e2a:	2300      	movs	r3, #0
    if (i2c_master_read_packet_wait(&gas_gauge_instance, &packet) == STATUS_OK) {
    1e2c:	2800      	cmp	r0, #0
    1e2e:	d10e      	bne.n	1e4e <gas_gauge_read+0x3e>
        
        uint16_t twi_reading = read_buffer[2] << 8 | read_buffer[3];
    1e30:	4a0b      	ldr	r2, [pc, #44]	; (1e60 <gas_gauge_read+0x50>)
    1e32:	7893      	ldrb	r3, [r2, #2]
    1e34:	021b      	lsls	r3, r3, #8
    1e36:	78d0      	ldrb	r0, [r2, #3]
    1e38:	4318      	orrs	r0, r3
        uint16_t twi_percent = ((twi_reading * 100) / FULL_SCALE_GAUGE);

        *value     = twi_reading;
    1e3a:	6028      	str	r0, [r5, #0]
        uint16_t twi_percent = ((twi_reading * 100) / FULL_SCALE_GAUGE);
    1e3c:	2364      	movs	r3, #100	; 0x64
    1e3e:	4358      	muls	r0, r3
    1e40:	4908      	ldr	r1, [pc, #32]	; (1e64 <gas_gauge_read+0x54>)
    1e42:	4b09      	ldr	r3, [pc, #36]	; (1e68 <gas_gauge_read+0x58>)
    1e44:	4798      	blx	r3
        *percent   = twi_percent;
    1e46:	0400      	lsls	r0, r0, #16
    1e48:	0c00      	lsrs	r0, r0, #16
    1e4a:	6020      	str	r0, [r4, #0]

        ok = true;
    1e4c:	2301      	movs	r3, #1
    }
    
    return ok;
    1e4e:	0018      	movs	r0, r3
    1e50:	b005      	add	sp, #20
    1e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e54:	00003d6c 	.word	0x00003d6c
    1e58:	200001e0 	.word	0x200001e0
    1e5c:	00001045 	.word	0x00001045
    1e60:	200000ac 	.word	0x200000ac
    1e64:	0000ffff 	.word	0x0000ffff
    1e68:	0000316d 	.word	0x0000316d

00001e6c <rtc_overflow_callback>:
    rtc_count_set_period(&rtc_instance, 1);
}

void rtc_overflow_callback(void)
{
    tick_counter++;
    1e6c:	4a02      	ldr	r2, [pc, #8]	; (1e78 <rtc_overflow_callback+0xc>)
    1e6e:	6813      	ldr	r3, [r2, #0]
    1e70:	3301      	adds	r3, #1
    1e72:	6013      	str	r3, [r2, #0]
}
    1e74:	4770      	bx	lr
    1e76:	46c0      	nop			; (mov r8, r8)
    1e78:	200000b0 	.word	0x200000b0

00001e7c <configure_rtc_count>:
{
    1e7c:	b510      	push	{r4, lr}
    1e7e:	b084      	sub	sp, #16
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
	config->clear_on_match      = false;
    1e80:	2300      	movs	r3, #0
    1e82:	466a      	mov	r2, sp
    1e84:	70d3      	strb	r3, [r2, #3]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
		config->compare_values[i] = 0;
    1e86:	9302      	str	r3, [sp, #8]
    1e88:	9303      	str	r3, [sp, #12]
    config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
    1e8a:	8013      	strh	r3, [r2, #0]
    config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    1e8c:	7093      	strb	r3, [r2, #2]
    config_rtc_count.continuously_update = true;
    1e8e:	2301      	movs	r3, #1
    1e90:	7113      	strb	r3, [r2, #4]
    rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    1e92:	4c0b      	ldr	r4, [pc, #44]	; (1ec0 <configure_rtc_count+0x44>)
    1e94:	490b      	ldr	r1, [pc, #44]	; (1ec4 <configure_rtc_count+0x48>)
    1e96:	0020      	movs	r0, r4
    1e98:	4b0b      	ldr	r3, [pc, #44]	; (1ec8 <configure_rtc_count+0x4c>)
    1e9a:	4798      	blx	r3
    rtc_count_enable(&rtc_instance);
    1e9c:	0020      	movs	r0, r4
    1e9e:	4b0b      	ldr	r3, [pc, #44]	; (1ecc <configure_rtc_count+0x50>)
    1ea0:	4798      	blx	r3
    rtc_count_register_callback(&rtc_instance, rtc_overflow_callback, RTC_COUNT_CALLBACK_OVERFLOW);
    1ea2:	2202      	movs	r2, #2
    1ea4:	490a      	ldr	r1, [pc, #40]	; (1ed0 <configure_rtc_count+0x54>)
    1ea6:	0020      	movs	r0, r4
    1ea8:	4b0a      	ldr	r3, [pc, #40]	; (1ed4 <configure_rtc_count+0x58>)
    1eaa:	4798      	blx	r3
    rtc_count_enable_callback(&rtc_instance, RTC_COUNT_CALLBACK_OVERFLOW);
    1eac:	2102      	movs	r1, #2
    1eae:	0020      	movs	r0, r4
    1eb0:	4b09      	ldr	r3, [pc, #36]	; (1ed8 <configure_rtc_count+0x5c>)
    1eb2:	4798      	blx	r3
    rtc_count_set_period(&rtc_instance, 1);
    1eb4:	2101      	movs	r1, #1
    1eb6:	0020      	movs	r0, r4
    1eb8:	4b08      	ldr	r3, [pc, #32]	; (1edc <configure_rtc_count+0x60>)
    1eba:	4798      	blx	r3
}
    1ebc:	b004      	add	sp, #16
    1ebe:	bd10      	pop	{r4, pc}
    1ec0:	20000208 	.word	0x20000208
    1ec4:	40001400 	.word	0x40001400
    1ec8:	00000ad9 	.word	0x00000ad9
    1ecc:	000009f9 	.word	0x000009f9
    1ed0:	00001e6d 	.word	0x00001e6d
    1ed4:	00000bdd 	.word	0x00000bdd
    1ed8:	00000c15 	.word	0x00000c15
    1edc:	00000bb9 	.word	0x00000bb9

00001ee0 <get_tick>:



uint32_t get_tick()
{
    return tick_counter;
    1ee0:	4b01      	ldr	r3, [pc, #4]	; (1ee8 <get_tick+0x8>)
    1ee2:	6818      	ldr	r0, [r3, #0]
}
    1ee4:	4770      	bx	lr
    1ee6:	46c0      	nop			; (mov r8, r8)
    1ee8:	200000b0 	.word	0x200000b0

00001eec <tick_elapsed>:
//!
//! \return The number of milliseconds elapsed
//=============================================================================
uint32_t tick_elapsed(uint32_t reference)
{
    return  (tick_counter - reference);
    1eec:	4b01      	ldr	r3, [pc, #4]	; (1ef4 <tick_elapsed+0x8>)
    1eee:	681b      	ldr	r3, [r3, #0]
    1ef0:	1a18      	subs	r0, r3, r0
    1ef2:	4770      	bx	lr
    1ef4:	200000b0 	.word	0x200000b0

00001ef8 <clean_array>:
//=============================================================================
//! \brief Clean the "received array" of the BT USART.
//=============================================================================
void clean_array(int length)
{
    for (int i = 0; i < length; i++)
    1ef8:	2800      	cmp	r0, #0
    1efa:	dd06      	ble.n	1f0a <clean_array+0x12>
    1efc:	4b03      	ldr	r3, [pc, #12]	; (1f0c <clean_array+0x14>)
    1efe:	18c0      	adds	r0, r0, r3
    {
        bt_message[i] = 0x00;
    1f00:	2200      	movs	r2, #0
    1f02:	701a      	strb	r2, [r3, #0]
    1f04:	3301      	adds	r3, #1
    for (int i = 0; i < length; i++)
    1f06:	4283      	cmp	r3, r0
    1f08:	d1fb      	bne.n	1f02 <clean_array+0xa>
    }
}
    1f0a:	4770      	bx	lr
    1f0c:	2000026c 	.word	0x2000026c

00001f10 <usart_write_callback>:
{
    1f10:	b510      	push	{r4, lr}
    clean_array(bt_counting);
    1f12:	4c04      	ldr	r4, [pc, #16]	; (1f24 <usart_write_callback+0x14>)
    1f14:	7820      	ldrb	r0, [r4, #0]
    1f16:	4b04      	ldr	r3, [pc, #16]	; (1f28 <usart_write_callback+0x18>)
    1f18:	4798      	blx	r3
    bt_counting = 0;
    1f1a:	2300      	movs	r3, #0
    1f1c:	7023      	strb	r3, [r4, #0]
    bt_start_received = false;
    1f1e:	4a03      	ldr	r2, [pc, #12]	; (1f2c <usart_write_callback+0x1c>)
    1f20:	7013      	strb	r3, [r2, #0]
}
    1f22:	bd10      	pop	{r4, pc}
    1f24:	200000b4 	.word	0x200000b4
    1f28:	00001ef9 	.word	0x00001ef9
    1f2c:	200000b5 	.word	0x200000b5

00001f30 <configure_usart>:

//=============================================================================
//! \brief Setup Function for USART (Debug and BT).
//=============================================================================
void configure_usart(void)
{
    1f30:	b530      	push	{r4, r5, lr}
    1f32:	b08d      	sub	sp, #52	; 0x34
// General
    bt_timer = 0;
    1f34:	2300      	movs	r3, #0
    1f36:	4a21      	ldr	r2, [pc, #132]	; (1fbc <configure_usart+0x8c>)
    1f38:	6013      	str	r3, [r2, #0]
    bt_connected = false;
    1f3a:	4a21      	ldr	r2, [pc, #132]	; (1fc0 <configure_usart+0x90>)
    1f3c:	7013      	strb	r3, [r2, #0]
    poll_requested = false;
    1f3e:	4a21      	ldr	r2, [pc, #132]	; (1fc4 <configure_usart+0x94>)
    1f40:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1f42:	2280      	movs	r2, #128	; 0x80
    1f44:	05d2      	lsls	r2, r2, #23
    1f46:	9200      	str	r2, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1f48:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1f4a:	22ff      	movs	r2, #255	; 0xff
    1f4c:	4669      	mov	r1, sp
    1f4e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1f50:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1f52:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    1f54:	2296      	movs	r2, #150	; 0x96
    1f56:	0192      	lsls	r2, r2, #6
    1f58:	9204      	str	r2, [sp, #16]
	config->receiver_enable  = true;
    1f5a:	2201      	movs	r2, #1
    1f5c:	750a      	strb	r2, [r1, #20]
	config->transmitter_enable = true;
    1f5e:	754a      	strb	r2, [r1, #21]
	config->clock_polarity_inverted = false;
    1f60:	758b      	strb	r3, [r1, #22]
	config->use_external_clock = false;
    1f62:	75cb      	strb	r3, [r1, #23]
	config->ext_clock_freq   = 0;
    1f64:	9306      	str	r3, [sp, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1f66:	770b      	strb	r3, [r1, #28]
	config->generator_source = GCLK_GENERATOR_0;
    1f68:	774b      	strb	r3, [r1, #29]
    stdio_serial_init(&dbg_usart_instance, EDBG_CDC_MODULE, &config_usart);
#endif

//BT USART
    config_usart.baudrate    = 9600;
    config_usart.mux_setting = BT_UART_SERCOM_MUX_SETTING;
    1f6a:	2380      	movs	r3, #128	; 0x80
    1f6c:	035b      	lsls	r3, r3, #13
    1f6e:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = BT_UART_SERCOM_PINMUX_PAD0;
    1f70:	4b15      	ldr	r3, [pc, #84]	; (1fc8 <configure_usart+0x98>)
    1f72:	9308      	str	r3, [sp, #32]
    config_usart.pinmux_pad1 = BT_UART_SERCOM_PINMUX_PAD1;
    1f74:	4b15      	ldr	r3, [pc, #84]	; (1fcc <configure_usart+0x9c>)
    1f76:	9309      	str	r3, [sp, #36]	; 0x24
    config_usart.pinmux_pad2 = BT_UART_SERCOM_PINMUX_PAD2;
    1f78:	2301      	movs	r3, #1
    1f7a:	425b      	negs	r3, r3
    1f7c:	930a      	str	r3, [sp, #40]	; 0x28
    config_usart.pinmux_pad3 = BT_UART_SERCOM_PINMUX_PAD3;
    1f7e:	930b      	str	r3, [sp, #44]	; 0x2c

    while (usart_init(&bt_usart_instance, BT_UART_MODULE, &config_usart) != STATUS_OK) {}
    1f80:	4d13      	ldr	r5, [pc, #76]	; (1fd0 <configure_usart+0xa0>)
    1f82:	4c14      	ldr	r4, [pc, #80]	; (1fd4 <configure_usart+0xa4>)
    1f84:	466a      	mov	r2, sp
    1f86:	4914      	ldr	r1, [pc, #80]	; (1fd8 <configure_usart+0xa8>)
    1f88:	0028      	movs	r0, r5
    1f8a:	47a0      	blx	r4
    1f8c:	2800      	cmp	r0, #0
    1f8e:	d1f9      	bne.n	1f84 <configure_usart+0x54>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1f90:	4d0f      	ldr	r5, [pc, #60]	; (1fd0 <configure_usart+0xa0>)
    1f92:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1f94:	0020      	movs	r0, r4
    1f96:	4b11      	ldr	r3, [pc, #68]	; (1fdc <configure_usart+0xac>)
    1f98:	4798      	blx	r3
    1f9a:	231f      	movs	r3, #31
    1f9c:	4018      	ands	r0, r3
    1f9e:	3b1e      	subs	r3, #30
    1fa0:	4083      	lsls	r3, r0
    1fa2:	4a0f      	ldr	r2, [pc, #60]	; (1fe0 <configure_usart+0xb0>)
    1fa4:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1fa6:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    1fa8:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    1faa:	b21b      	sxth	r3, r3
    1fac:	2b00      	cmp	r3, #0
    1fae:	dbfb      	blt.n	1fa8 <configure_usart+0x78>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1fb0:	6823      	ldr	r3, [r4, #0]
    1fb2:	2202      	movs	r2, #2
    1fb4:	4313      	orrs	r3, r2
    1fb6:	6023      	str	r3, [r4, #0]
   
    usart_enable(&bt_usart_instance);
}
    1fb8:	b00d      	add	sp, #52	; 0x34
    1fba:	bd30      	pop	{r4, r5, pc}
    1fbc:	200001d4 	.word	0x200001d4
    1fc0:	20000280 	.word	0x20000280
    1fc4:	200001c4 	.word	0x200001c4
    1fc8:	00100002 	.word	0x00100002
    1fcc:	00110002 	.word	0x00110002
    1fd0:	20000220 	.word	0x20000220
    1fd4:	000016cd 	.word	0x000016cd
    1fd8:	42000c00 	.word	0x42000c00
    1fdc:	00001669 	.word	0x00001669
    1fe0:	e000e100 	.word	0xe000e100

00001fe4 <configure_usart_callbacks>:

//=============================================================================
//! \brief Configure callback Function for USART (BT).
//=============================================================================
void configure_usart_callbacks(void)
{
    1fe4:	b570      	push	{r4, r5, r6, lr}
    //! [setup_register_callbacks]
    usart_register_callback(&bt_usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
    1fe6:	4c08      	ldr	r4, [pc, #32]	; (2008 <STACK_SIZE+0x8>)
    1fe8:	2200      	movs	r2, #0
    1fea:	4908      	ldr	r1, [pc, #32]	; (200c <STACK_SIZE+0xc>)
    1fec:	0020      	movs	r0, r4
    1fee:	4d08      	ldr	r5, [pc, #32]	; (2010 <STACK_SIZE+0x10>)
    1ff0:	47a8      	blx	r5
    usart_register_callback(&bt_usart_instance, usart_read_callback,  USART_CALLBACK_BUFFER_RECEIVED);
    1ff2:	2201      	movs	r2, #1
    1ff4:	4907      	ldr	r1, [pc, #28]	; (2014 <STACK_SIZE+0x14>)
    1ff6:	0020      	movs	r0, r4
    1ff8:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    1ffa:	2221      	movs	r2, #33	; 0x21
    1ffc:	5ca3      	ldrb	r3, [r4, r2]
    1ffe:	2103      	movs	r1, #3
    2000:	430b      	orrs	r3, r1
    2002:	54a3      	strb	r3, [r4, r2]

    //! [setup_enable_callbacks]
    usart_enable_callback(&bt_usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
    usart_enable_callback(&bt_usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
    //! [setup_enable_callbacks]
}
    2004:	bd70      	pop	{r4, r5, r6, pc}
    2006:	46c0      	nop			; (mov r8, r8)
    2008:	20000220 	.word	0x20000220
    200c:	00001f11 	.word	0x00001f11
    2010:	00001999 	.word	0x00001999
    2014:	000021c5 	.word	0x000021c5

00002018 <bt_usart_write_job>:

//=============================================================================
//! \brief Write at the BT USART.
//=============================================================================
void bt_usart_write_job(uint8_t *string, uint16_t length)
{
    2018:	b510      	push	{r4, lr}
    201a:	000a      	movs	r2, r1
    usart_write_buffer_job(&bt_usart_instance, string, length);
    201c:	0001      	movs	r1, r0
    201e:	4802      	ldr	r0, [pc, #8]	; (2028 <bt_usart_write_job+0x10>)
    2020:	4b02      	ldr	r3, [pc, #8]	; (202c <bt_usart_write_job+0x14>)
    2022:	4798      	blx	r3
}
    2024:	bd10      	pop	{r4, pc}
    2026:	46c0      	nop			; (mov r8, r8)
    2028:	20000220 	.word	0x20000220
    202c:	000019b1 	.word	0x000019b1

00002030 <bt_usart_receive_job>:

//=============================================================================
//! \brief Check for received messages at the BT USART.
//=============================================================================
void bt_usart_receive_job(void)
{
    2030:	b510      	push	{r4, lr}
    usart_read_buffer_job(&bt_usart_instance, (uint8_t *)rx_buffer, MIN_RX_BUFFER_LENGTH);
    2032:	2201      	movs	r2, #1
    2034:	4902      	ldr	r1, [pc, #8]	; (2040 <bt_usart_receive_job+0x10>)
    2036:	4803      	ldr	r0, [pc, #12]	; (2044 <bt_usart_receive_job+0x14>)
    2038:	4b03      	ldr	r3, [pc, #12]	; (2048 <bt_usart_receive_job+0x18>)
    203a:	4798      	blx	r3
}
    203c:	bd10      	pop	{r4, pc}
    203e:	46c0      	nop			; (mov r8, r8)
    2040:	20000268 	.word	0x20000268
    2044:	20000220 	.word	0x20000220
    2048:	000019d1 	.word	0x000019d1

0000204c <bt_start_setup>:

//=============================================================================
//! \brief Send the handshake to BT USART.
//=============================================================================
void bt_start_setup()
{
    204c:	b510      	push	{r4, lr}
    uint8_t* init_resp = "<BOARD>";
    usart_write_buffer_job(&bt_usart_instance, init_resp, 7);
    204e:	2207      	movs	r2, #7
    2050:	4906      	ldr	r1, [pc, #24]	; (206c <bt_start_setup+0x20>)
    2052:	4807      	ldr	r0, [pc, #28]	; (2070 <bt_start_setup+0x24>)
    2054:	4b07      	ldr	r3, [pc, #28]	; (2074 <bt_start_setup+0x28>)
    2056:	4798      	blx	r3
    bt_timer = 0;
    2058:	2300      	movs	r3, #0
    205a:	4a07      	ldr	r2, [pc, #28]	; (2078 <bt_start_setup+0x2c>)
    205c:	6013      	str	r3, [r2, #0]
    bt_connected = true;
    205e:	2101      	movs	r1, #1
    2060:	4a06      	ldr	r2, [pc, #24]	; (207c <bt_start_setup+0x30>)
    2062:	7011      	strb	r1, [r2, #0]
    poll_requested = false;
    2064:	4a06      	ldr	r2, [pc, #24]	; (2080 <bt_start_setup+0x34>)
    2066:	7013      	strb	r3, [r2, #0]
}
    2068:	bd10      	pop	{r4, pc}
    206a:	46c0      	nop			; (mov r8, r8)
    206c:	00003db0 	.word	0x00003db0
    2070:	20000220 	.word	0x20000220
    2074:	000019b1 	.word	0x000019b1
    2078:	200001d4 	.word	0x200001d4
    207c:	20000280 	.word	0x20000280
    2080:	200001c4 	.word	0x200001c4

00002084 <bt_received>:
{
    2084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2086:	0005      	movs	r5, r0
    if (!bt_connected)
    2088:	4b3e      	ldr	r3, [pc, #248]	; (2184 <bt_received+0x100>)
    208a:	781b      	ldrb	r3, [r3, #0]
    208c:	2b00      	cmp	r3, #0
    208e:	d108      	bne.n	20a2 <bt_received+0x1e>
        if (strcmp((const char*) received_msg, "OCTO") == 0)
    2090:	493d      	ldr	r1, [pc, #244]	; (2188 <bt_received+0x104>)
    2092:	4b3e      	ldr	r3, [pc, #248]	; (218c <bt_received+0x108>)
    2094:	4798      	blx	r3
    2096:	2800      	cmp	r0, #0
    2098:	d000      	beq.n	209c <bt_received+0x18>
}
    209a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            bt_start_setup();
    209c:	4b3c      	ldr	r3, [pc, #240]	; (2190 <bt_received+0x10c>)
    209e:	4798      	blx	r3
    20a0:	e7fb      	b.n	209a <bt_received+0x16>
        if (received_msg[0] == 'W')
    20a2:	7803      	ldrb	r3, [r0, #0]
    20a4:	2b57      	cmp	r3, #87	; 0x57
    20a6:	d00c      	beq.n	20c2 <bt_received+0x3e>
        else if (received_msg[0] == 'D')
    20a8:	2b44      	cmp	r3, #68	; 0x44
    20aa:	d054      	beq.n	2156 <bt_received+0xd2>
        else if (received_msg[0] == 'C')
    20ac:	2b43      	cmp	r3, #67	; 0x43
    20ae:	d059      	beq.n	2164 <bt_received+0xe0>
        else if(strcmp((const char*) received_msg, "OK") == 0)
    20b0:	4938      	ldr	r1, [pc, #224]	; (2194 <bt_received+0x110>)
    20b2:	4b36      	ldr	r3, [pc, #216]	; (218c <bt_received+0x108>)
    20b4:	4798      	blx	r3
    20b6:	2800      	cmp	r0, #0
    20b8:	d1ef      	bne.n	209a <bt_received+0x16>
            poll_requested = false;
    20ba:	2200      	movs	r2, #0
    20bc:	4b36      	ldr	r3, [pc, #216]	; (2198 <bt_received+0x114>)
    20be:	701a      	strb	r2, [r3, #0]
}
    20c0:	e7eb      	b.n	209a <bt_received+0x16>
            int nr_params = received_msg[2] - 0x30;
    20c2:	7887      	ldrb	r7, [r0, #2]
    20c4:	3f30      	subs	r7, #48	; 0x30
            for (int i = 0; i < nr_params; i++, index+=4)
    20c6:	2f00      	cmp	r7, #0
    20c8:	dd3f      	ble.n	214a <bt_received+0xc6>
    20ca:	2600      	movs	r6, #0
    20cc:	2404      	movs	r4, #4
    20ce:	e009      	b.n	20e4 <bt_received+0x60>
                    change_light_mode((E_LIGHT_MODE) received_msg[index+2] - 0x30);
    20d0:	192b      	adds	r3, r5, r4
    20d2:	7898      	ldrb	r0, [r3, #2]
    20d4:	3830      	subs	r0, #48	; 0x30
    20d6:	b2c0      	uxtb	r0, r0
    20d8:	4b30      	ldr	r3, [pc, #192]	; (219c <bt_received+0x118>)
    20da:	4798      	blx	r3
            for (int i = 0; i < nr_params; i++, index+=4)
    20dc:	3601      	adds	r6, #1
    20de:	3404      	adds	r4, #4
    20e0:	42b7      	cmp	r7, r6
    20e2:	dd32      	ble.n	214a <bt_received+0xc6>
                if (received_msg[index] == 'L')
    20e4:	5d2b      	ldrb	r3, [r5, r4]
    20e6:	2b4c      	cmp	r3, #76	; 0x4c
    20e8:	d0f2      	beq.n	20d0 <bt_received+0x4c>
                else if (received_msg[index] == 'F')
    20ea:	2b46      	cmp	r3, #70	; 0x46
    20ec:	d011      	beq.n	2112 <bt_received+0x8e>
                else if (received_msg[index] == 'I')
    20ee:	2b49      	cmp	r3, #73	; 0x49
    20f0:	d016      	beq.n	2120 <bt_received+0x9c>
                else if (received_msg[index] == 'P')
    20f2:	2b50      	cmp	r3, #80	; 0x50
    20f4:	d1f2      	bne.n	20dc <bt_received+0x58>
                    uint16_t new_threshold = ((received_msg[index+2] - 0x30) * 10) + (received_msg[index+3] - 0x30);
    20f6:	192a      	adds	r2, r5, r4
    20f8:	7890      	ldrb	r0, [r2, #2]
    20fa:	3830      	subs	r0, #48	; 0x30
    20fc:	0083      	lsls	r3, r0, #2
    20fe:	18c0      	adds	r0, r0, r3
    2100:	0040      	lsls	r0, r0, #1
    2102:	78d3      	ldrb	r3, [r2, #3]
    2104:	3b30      	subs	r3, #48	; 0x30
    2106:	18c0      	adds	r0, r0, r3
                    change_light_threshold(new_threshold);
    2108:	b280      	uxth	r0, r0
    210a:	4b25      	ldr	r3, [pc, #148]	; (21a0 <bt_received+0x11c>)
    210c:	4798      	blx	r3
					index++;
    210e:	3401      	adds	r4, #1
    2110:	e7e4      	b.n	20dc <bt_received+0x58>
                    change_light_freq((E_LIGHT_FREQ) received_msg[index+2] - 0x30);
    2112:	192a      	adds	r2, r5, r4
    2114:	7890      	ldrb	r0, [r2, #2]
    2116:	3830      	subs	r0, #48	; 0x30
    2118:	b2c0      	uxtb	r0, r0
    211a:	4b22      	ldr	r3, [pc, #136]	; (21a4 <bt_received+0x120>)
    211c:	4798      	blx	r3
    211e:	e7dd      	b.n	20dc <bt_received+0x58>
                    uint16_t light_perhundred = ((received_msg[index+2] - 0x30) * 10) + (received_msg[index+3] - 0x30);
    2120:	192a      	adds	r2, r5, r4
    2122:	7893      	ldrb	r3, [r2, #2]
    2124:	3b30      	subs	r3, #48	; 0x30
    2126:	0098      	lsls	r0, r3, #2
    2128:	1818      	adds	r0, r3, r0
    212a:	0040      	lsls	r0, r0, #1
    212c:	78d3      	ldrb	r3, [r2, #3]
    212e:	3b30      	subs	r3, #48	; 0x30
    2130:	18c0      	adds	r0, r0, r3
                    uint16_t light_perthousand = ((light_perhundred * (LIGHT_MAX - LIGHT_MIN)) / LIGHT_MIN) + LIGHT_MIN;
    2132:	b280      	uxth	r0, r0
    2134:	4b1c      	ldr	r3, [pc, #112]	; (21a8 <bt_received+0x124>)
    2136:	4358      	muls	r0, r3
    2138:	2164      	movs	r1, #100	; 0x64
    213a:	4b1c      	ldr	r3, [pc, #112]	; (21ac <bt_received+0x128>)
    213c:	4798      	blx	r3
    213e:	3064      	adds	r0, #100	; 0x64
                    change_light_bright(light_perthousand);
    2140:	b280      	uxth	r0, r0
    2142:	4b1b      	ldr	r3, [pc, #108]	; (21b0 <bt_received+0x12c>)
    2144:	4798      	blx	r3
					index++;
    2146:	3401      	adds	r4, #1
    2148:	e7c8      	b.n	20dc <bt_received+0x58>
            usart_write_buffer_job(&bt_usart_instance, init_resp, 4);
    214a:	2204      	movs	r2, #4
    214c:	4919      	ldr	r1, [pc, #100]	; (21b4 <bt_received+0x130>)
    214e:	481a      	ldr	r0, [pc, #104]	; (21b8 <bt_received+0x134>)
    2150:	4b1a      	ldr	r3, [pc, #104]	; (21bc <bt_received+0x138>)
    2152:	4798      	blx	r3
    2154:	e7a1      	b.n	209a <bt_received+0x16>
            change_light_mode(E_LIGHT_ON);
    2156:	2001      	movs	r0, #1
    2158:	4b10      	ldr	r3, [pc, #64]	; (219c <bt_received+0x118>)
    215a:	4798      	blx	r3
            bt_connected = false;
    215c:	2200      	movs	r2, #0
    215e:	4b09      	ldr	r3, [pc, #36]	; (2184 <bt_received+0x100>)
    2160:	701a      	strb	r2, [r3, #0]
    2162:	e79a      	b.n	209a <bt_received+0x16>
            if (received_msg[2] == '1')
    2164:	7883      	ldrb	r3, [r0, #2]
    2166:	2b31      	cmp	r3, #49	; 0x31
    2168:	d008      	beq.n	217c <bt_received+0xf8>
                bcap_enable = false;
    216a:	2200      	movs	r2, #0
    216c:	4b14      	ldr	r3, [pc, #80]	; (21c0 <bt_received+0x13c>)
    216e:	701a      	strb	r2, [r3, #0]
            usart_write_buffer_job(&bt_usart_instance, init_resp, 4);
    2170:	2204      	movs	r2, #4
    2172:	4910      	ldr	r1, [pc, #64]	; (21b4 <bt_received+0x130>)
    2174:	4810      	ldr	r0, [pc, #64]	; (21b8 <bt_received+0x134>)
    2176:	4b11      	ldr	r3, [pc, #68]	; (21bc <bt_received+0x138>)
    2178:	4798      	blx	r3
    217a:	e78e      	b.n	209a <bt_received+0x16>
                bcap_enable = true;
    217c:	2201      	movs	r2, #1
    217e:	4b10      	ldr	r3, [pc, #64]	; (21c0 <bt_received+0x13c>)
    2180:	701a      	strb	r2, [r3, #0]
    2182:	e7f5      	b.n	2170 <bt_received+0xec>
    2184:	20000280 	.word	0x20000280
    2188:	00003d9c 	.word	0x00003d9c
    218c:	00003439 	.word	0x00003439
    2190:	0000204d 	.word	0x0000204d
    2194:	00003dac 	.word	0x00003dac
    2198:	200001c4 	.word	0x200001c4
    219c:	000029b1 	.word	0x000029b1
    21a0:	000029f5 	.word	0x000029f5
    21a4:	000029c9 	.word	0x000029c9
    21a8:	00000352 	.word	0x00000352
    21ac:	0000316d 	.word	0x0000316d
    21b0:	000029d5 	.word	0x000029d5
    21b4:	00003da4 	.word	0x00003da4
    21b8:	20000220 	.word	0x20000220
    21bc:	000019b1 	.word	0x000019b1
    21c0:	20000161 	.word	0x20000161

000021c4 <usart_read_callback>:
{    
    21c4:	b510      	push	{r4, lr}
    if ((!bt_start_received) && (rx_buffer[0] == '<'))
    21c6:	4b11      	ldr	r3, [pc, #68]	; (220c <usart_read_callback+0x48>)
    21c8:	781b      	ldrb	r3, [r3, #0]
    21ca:	2b00      	cmp	r3, #0
    21cc:	d103      	bne.n	21d6 <usart_read_callback+0x12>
    21ce:	4b10      	ldr	r3, [pc, #64]	; (2210 <usart_read_callback+0x4c>)
    21d0:	781b      	ldrb	r3, [r3, #0]
    21d2:	2b3c      	cmp	r3, #60	; 0x3c
    21d4:	d00a      	beq.n	21ec <usart_read_callback+0x28>
        if (rx_buffer[0] == '>')
    21d6:	4b0e      	ldr	r3, [pc, #56]	; (2210 <usart_read_callback+0x4c>)
    21d8:	781a      	ldrb	r2, [r3, #0]
    21da:	2a3e      	cmp	r2, #62	; 0x3e
    21dc:	d00a      	beq.n	21f4 <usart_read_callback+0x30>
            bt_message[bt_counting] = rx_buffer[0];
    21de:	490d      	ldr	r1, [pc, #52]	; (2214 <usart_read_callback+0x50>)
    21e0:	780b      	ldrb	r3, [r1, #0]
    21e2:	480d      	ldr	r0, [pc, #52]	; (2218 <usart_read_callback+0x54>)
    21e4:	54c2      	strb	r2, [r0, r3]
            bt_counting++;
    21e6:	3301      	adds	r3, #1
    21e8:	700b      	strb	r3, [r1, #0]
}
    21ea:	bd10      	pop	{r4, pc}
        bt_start_received = true;
    21ec:	2201      	movs	r2, #1
    21ee:	4b07      	ldr	r3, [pc, #28]	; (220c <usart_read_callback+0x48>)
    21f0:	701a      	strb	r2, [r3, #0]
    21f2:	e7fa      	b.n	21ea <usart_read_callback+0x26>
            bt_received(bt_message);
    21f4:	4808      	ldr	r0, [pc, #32]	; (2218 <usart_read_callback+0x54>)
    21f6:	4b09      	ldr	r3, [pc, #36]	; (221c <usart_read_callback+0x58>)
    21f8:	4798      	blx	r3
            clean_array(bt_counting);
    21fa:	4c06      	ldr	r4, [pc, #24]	; (2214 <usart_read_callback+0x50>)
    21fc:	7820      	ldrb	r0, [r4, #0]
    21fe:	4b08      	ldr	r3, [pc, #32]	; (2220 <usart_read_callback+0x5c>)
    2200:	4798      	blx	r3
            bt_counting = 0;
    2202:	2300      	movs	r3, #0
    2204:	7023      	strb	r3, [r4, #0]
            bt_start_received = false;
    2206:	4a01      	ldr	r2, [pc, #4]	; (220c <usart_read_callback+0x48>)
    2208:	7013      	strb	r3, [r2, #0]
    220a:	e7ee      	b.n	21ea <usart_read_callback+0x26>
    220c:	200000b5 	.word	0x200000b5
    2210:	20000268 	.word	0x20000268
    2214:	200000b4 	.word	0x200000b4
    2218:	2000026c 	.word	0x2000026c
    221c:	00002085 	.word	0x00002085
    2220:	00001ef9 	.word	0x00001ef9

00002224 <system_board_init>:
#endif

struct port_config pin_conf;

void system_board_init(void)
{
    2224:	b570      	push	{r4, r5, r6, lr}
	config->input_pull = PORT_PIN_PULL_UP;
    2226:	4c0d      	ldr	r4, [pc, #52]	; (225c <system_board_init+0x38>)
    2228:	2301      	movs	r3, #1
    222a:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    222c:	2200      	movs	r2, #0
    222e:	70a2      	strb	r2, [r4, #2]
    
// Configure the board after the battery measurement
// Don't need to configure: 
// Red LED pins, GG and BT enable and BCAP input
    port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2230:	7023      	strb	r3, [r4, #0]

    // Configure LEDs as outputs, turn them off 
    port_pin_set_config(LED_GREEN_PIN, &pin_conf);
    2232:	0021      	movs	r1, r4
    2234:	200f      	movs	r0, #15
    2236:	4e0a      	ldr	r6, [pc, #40]	; (2260 <system_board_init+0x3c>)
    2238:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    223a:	4d0a      	ldr	r5, [pc, #40]	; (2264 <system_board_init+0x40>)
    223c:	2380      	movs	r3, #128	; 0x80
    223e:	021b      	lsls	r3, r3, #8
    2240:	61ab      	str	r3, [r5, #24]
    port_pin_set_output_level(LED_GREEN_PIN, LED_GREEN_ACTIVE);

    // Configure the Enable of LED Stripe as output, turn it on 
    port_pin_set_config(LED_DRIVER_PIN, &pin_conf);
    2242:	0021      	movs	r1, r4
    2244:	2001      	movs	r0, #1
    2246:	47b0      	blx	r6
    2248:	2302      	movs	r3, #2
    224a:	61ab      	str	r3, [r5, #24]
    port_pin_set_output_level(LED_DRIVER_PIN, LED_DRIVER_ACTIVE);
	
    // Configure the USB Charge external device Enable
	port_pin_set_config(USB_EN_ENABLE_PIN, &pin_conf);
    224c:	0021      	movs	r1, r4
    224e:	201c      	movs	r0, #28
    2250:	47b0      	blx	r6
    2252:	2380      	movs	r3, #128	; 0x80
    2254:	055b      	lsls	r3, r3, #21
    2256:	61ab      	str	r3, [r5, #24]
	port_pin_set_output_level(USB_EN_ENABLE_PIN, USB_EN_ENABLE_ACTIVE);
}
    2258:	bd70      	pop	{r4, r5, r6, pc}
    225a:	46c0      	nop			; (mov r8, r8)
    225c:	200001d8 	.word	0x200001d8
    2260:	000009cd 	.word	0x000009cd
    2264:	41004400 	.word	0x41004400

00002268 <change_bt_enable>:
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
	port_pin_set_config(INPUT_BCAP_PIN, &pin_conf);
}

void change_bt_enable(bool enable)
{
    2268:	b510      	push	{r4, lr}
    226a:	0004      	movs	r4, r0
	config->input_pull = PORT_PIN_PULL_UP;
    226c:	4909      	ldr	r1, [pc, #36]	; (2294 <change_bt_enable+0x2c>)
    226e:	2301      	movs	r3, #1
    2270:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    2272:	2200      	movs	r2, #0
    2274:	708a      	strb	r2, [r1, #2]
	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2276:	700b      	strb	r3, [r1, #0]
	
	port_pin_set_config(BT_ENABLE_PIN, &pin_conf);
    2278:	2003      	movs	r0, #3
    227a:	4b07      	ldr	r3, [pc, #28]	; (2298 <change_bt_enable+0x30>)
    227c:	4798      	blx	r3
	if (level) {
    227e:	2c00      	cmp	r4, #0
    2280:	d103      	bne.n	228a <change_bt_enable+0x22>
		port_base->OUTCLR.reg = pin_mask;
    2282:	2208      	movs	r2, #8
    2284:	4b05      	ldr	r3, [pc, #20]	; (229c <change_bt_enable+0x34>)
    2286:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(BT_ENABLE_PIN, (BT_ENABLE_ACTIVE && enable));
    2288:	bd10      	pop	{r4, pc}
		port_base->OUTSET.reg = pin_mask;
    228a:	2208      	movs	r2, #8
    228c:	4b03      	ldr	r3, [pc, #12]	; (229c <change_bt_enable+0x34>)
    228e:	619a      	str	r2, [r3, #24]
    2290:	e7fa      	b.n	2288 <change_bt_enable+0x20>
    2292:	46c0      	nop			; (mov r8, r8)
    2294:	200001d8 	.word	0x200001d8
    2298:	000009cd 	.word	0x000009cd
    229c:	41004400 	.word	0x41004400

000022a0 <system_board_init_for_battery_measure>:
{
    22a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	config->input_pull = PORT_PIN_PULL_UP;
    22a2:	4c17      	ldr	r4, [pc, #92]	; (2300 <system_board_init_for_battery_measure+0x60>)
    22a4:	2301      	movs	r3, #1
    22a6:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    22a8:	2700      	movs	r7, #0
    22aa:	70a7      	strb	r7, [r4, #2]
    pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    22ac:	7023      	strb	r3, [r4, #0]
    port_pin_set_config(LED_RED_PIN, &pin_conf);
    22ae:	0021      	movs	r1, r4
    22b0:	200e      	movs	r0, #14
    22b2:	4d14      	ldr	r5, [pc, #80]	; (2304 <system_board_init_for_battery_measure+0x64>)
    22b4:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
    22b6:	4e14      	ldr	r6, [pc, #80]	; (2308 <system_board_init_for_battery_measure+0x68>)
    22b8:	2380      	movs	r3, #128	; 0x80
    22ba:	01db      	lsls	r3, r3, #7
    22bc:	6173      	str	r3, [r6, #20]
    port_pin_set_config(LED_GREEN_PIN, &pin_conf);
    22be:	0021      	movs	r1, r4
    22c0:	200f      	movs	r0, #15
    22c2:	47a8      	blx	r5
    22c4:	2380      	movs	r3, #128	; 0x80
    22c6:	021b      	lsls	r3, r3, #8
    22c8:	6173      	str	r3, [r6, #20]
    port_pin_set_config(LED_DRIVER_PIN, &pin_conf);
    22ca:	0021      	movs	r1, r4
    22cc:	2001      	movs	r0, #1
    22ce:	47a8      	blx	r5
    22d0:	2302      	movs	r3, #2
    22d2:	6173      	str	r3, [r6, #20]
    change_bt_enable(true);
    22d4:	2001      	movs	r0, #1
    22d6:	4b0d      	ldr	r3, [pc, #52]	; (230c <system_board_init_for_battery_measure+0x6c>)
    22d8:	4798      	blx	r3
    port_pin_set_config(GAUGE_CC_ENABLE_PIN, &pin_conf);
    22da:	0021      	movs	r1, r4
    22dc:	200a      	movs	r0, #10
    22de:	47a8      	blx	r5
    22e0:	2380      	movs	r3, #128	; 0x80
    22e2:	00db      	lsls	r3, r3, #3
    22e4:	6173      	str	r3, [r6, #20]
	port_pin_set_config(USB_EN_ENABLE_PIN, &pin_conf);
    22e6:	0021      	movs	r1, r4
    22e8:	201c      	movs	r0, #28
    22ea:	47a8      	blx	r5
    22ec:	2380      	movs	r3, #128	; 0x80
    22ee:	055b      	lsls	r3, r3, #21
    22f0:	6173      	str	r3, [r6, #20]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    22f2:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    22f4:	7067      	strb	r7, [r4, #1]
	port_pin_set_config(INPUT_BCAP_PIN, &pin_conf);
    22f6:	0021      	movs	r1, r4
    22f8:	2018      	movs	r0, #24
    22fa:	47a8      	blx	r5
}
    22fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22fe:	46c0      	nop			; (mov r8, r8)
    2300:	200001d8 	.word	0x200001d8
    2304:	000009cd 	.word	0x000009cd
    2308:	41004400 	.word	0x41004400
    230c:	00002269 	.word	0x00002269

00002310 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2310:	4b0c      	ldr	r3, [pc, #48]	; (2344 <cpu_irq_enter_critical+0x34>)
    2312:	681b      	ldr	r3, [r3, #0]
    2314:	2b00      	cmp	r3, #0
    2316:	d106      	bne.n	2326 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2318:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    231c:	2b00      	cmp	r3, #0
    231e:	d007      	beq.n	2330 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2320:	2200      	movs	r2, #0
    2322:	4b09      	ldr	r3, [pc, #36]	; (2348 <cpu_irq_enter_critical+0x38>)
    2324:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2326:	4a07      	ldr	r2, [pc, #28]	; (2344 <cpu_irq_enter_critical+0x34>)
    2328:	6813      	ldr	r3, [r2, #0]
    232a:	3301      	adds	r3, #1
    232c:	6013      	str	r3, [r2, #0]
}
    232e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2330:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2332:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2336:	2200      	movs	r2, #0
    2338:	4b04      	ldr	r3, [pc, #16]	; (234c <cpu_irq_enter_critical+0x3c>)
    233a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    233c:	3201      	adds	r2, #1
    233e:	4b02      	ldr	r3, [pc, #8]	; (2348 <cpu_irq_enter_critical+0x38>)
    2340:	701a      	strb	r2, [r3, #0]
    2342:	e7f0      	b.n	2326 <cpu_irq_enter_critical+0x16>
    2344:	200000b8 	.word	0x200000b8
    2348:	200000bc 	.word	0x200000bc
    234c:	20000012 	.word	0x20000012

00002350 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2350:	4b08      	ldr	r3, [pc, #32]	; (2374 <cpu_irq_leave_critical+0x24>)
    2352:	681a      	ldr	r2, [r3, #0]
    2354:	3a01      	subs	r2, #1
    2356:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2358:	681b      	ldr	r3, [r3, #0]
    235a:	2b00      	cmp	r3, #0
    235c:	d109      	bne.n	2372 <cpu_irq_leave_critical+0x22>
    235e:	4b06      	ldr	r3, [pc, #24]	; (2378 <cpu_irq_leave_critical+0x28>)
    2360:	781b      	ldrb	r3, [r3, #0]
    2362:	2b00      	cmp	r3, #0
    2364:	d005      	beq.n	2372 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2366:	2201      	movs	r2, #1
    2368:	4b04      	ldr	r3, [pc, #16]	; (237c <cpu_irq_leave_critical+0x2c>)
    236a:	701a      	strb	r2, [r3, #0]
    236c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2370:	b662      	cpsie	i
	}
}
    2372:	4770      	bx	lr
    2374:	200000b8 	.word	0x200000b8
    2378:	200000bc 	.word	0x200000bc
    237c:	20000012 	.word	0x20000012

00002380 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2380:	b510      	push	{r4, lr}
	switch (clock_source) {
    2382:	2807      	cmp	r0, #7
    2384:	d803      	bhi.n	238e <system_clock_source_get_hz+0xe>
    2386:	0080      	lsls	r0, r0, #2
    2388:	4b16      	ldr	r3, [pc, #88]	; (23e4 <system_clock_source_get_hz+0x64>)
    238a:	581b      	ldr	r3, [r3, r0]
    238c:	469f      	mov	pc, r3
		}

		return 48000000UL;

	default:
		return 0;
    238e:	2000      	movs	r0, #0
    2390:	e027      	b.n	23e2 <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc.frequency;
    2392:	4b15      	ldr	r3, [pc, #84]	; (23e8 <system_clock_source_get_hz+0x68>)
    2394:	68d8      	ldr	r0, [r3, #12]
    2396:	e024      	b.n	23e2 <system_clock_source_get_hz+0x62>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2398:	4b14      	ldr	r3, [pc, #80]	; (23ec <system_clock_source_get_hz+0x6c>)
    239a:	6a1b      	ldr	r3, [r3, #32]
    239c:	059b      	lsls	r3, r3, #22
    239e:	0f9b      	lsrs	r3, r3, #30
    23a0:	4813      	ldr	r0, [pc, #76]	; (23f0 <system_clock_source_get_hz+0x70>)
    23a2:	40d8      	lsrs	r0, r3
    23a4:	e01d      	b.n	23e2 <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc32k.frequency;
    23a6:	4b10      	ldr	r3, [pc, #64]	; (23e8 <system_clock_source_get_hz+0x68>)
    23a8:	6918      	ldr	r0, [r3, #16]
    23aa:	e01a      	b.n	23e2 <system_clock_source_get_hz+0x62>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    23ac:	4b0e      	ldr	r3, [pc, #56]	; (23e8 <system_clock_source_get_hz+0x68>)
    23ae:	681b      	ldr	r3, [r3, #0]
			return 0;
    23b0:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    23b2:	079b      	lsls	r3, r3, #30
    23b4:	d515      	bpl.n	23e2 <system_clock_source_get_hz+0x62>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    23b6:	490d      	ldr	r1, [pc, #52]	; (23ec <system_clock_source_get_hz+0x6c>)
    23b8:	2210      	movs	r2, #16
    23ba:	68cb      	ldr	r3, [r1, #12]
    23bc:	421a      	tst	r2, r3
    23be:	d0fc      	beq.n	23ba <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    23c0:	4b09      	ldr	r3, [pc, #36]	; (23e8 <system_clock_source_get_hz+0x68>)
    23c2:	681b      	ldr	r3, [r3, #0]
    23c4:	075b      	lsls	r3, r3, #29
    23c6:	d401      	bmi.n	23cc <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    23c8:	480a      	ldr	r0, [pc, #40]	; (23f4 <system_clock_source_get_hz+0x74>)
    23ca:	e00a      	b.n	23e2 <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    23cc:	2000      	movs	r0, #0
    23ce:	4b0a      	ldr	r3, [pc, #40]	; (23f8 <system_clock_source_get_hz+0x78>)
    23d0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    23d2:	4b05      	ldr	r3, [pc, #20]	; (23e8 <system_clock_source_get_hz+0x68>)
    23d4:	689b      	ldr	r3, [r3, #8]
    23d6:	041b      	lsls	r3, r3, #16
    23d8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    23da:	4358      	muls	r0, r3
    23dc:	e001      	b.n	23e2 <system_clock_source_get_hz+0x62>
		return 32768UL;
    23de:	2080      	movs	r0, #128	; 0x80
    23e0:	0200      	lsls	r0, r0, #8
	}
}
    23e2:	bd10      	pop	{r4, pc}
    23e4:	00003db8 	.word	0x00003db8
    23e8:	200000c0 	.word	0x200000c0
    23ec:	40000800 	.word	0x40000800
    23f0:	007a1200 	.word	0x007a1200
    23f4:	02dc6c00 	.word	0x02dc6c00
    23f8:	000027b5 	.word	0x000027b5

000023fc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    23fc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    23fe:	490c      	ldr	r1, [pc, #48]	; (2430 <system_clock_source_osc8m_set_config+0x34>)
    2400:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2402:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2404:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2406:	7840      	ldrb	r0, [r0, #1]
    2408:	2201      	movs	r2, #1
    240a:	4010      	ands	r0, r2
    240c:	0180      	lsls	r0, r0, #6
    240e:	2640      	movs	r6, #64	; 0x40
    2410:	43b3      	bics	r3, r6
    2412:	4303      	orrs	r3, r0
    2414:	402a      	ands	r2, r5
    2416:	01d2      	lsls	r2, r2, #7
    2418:	2080      	movs	r0, #128	; 0x80
    241a:	4383      	bics	r3, r0
    241c:	4313      	orrs	r3, r2
    241e:	2203      	movs	r2, #3
    2420:	4022      	ands	r2, r4
    2422:	0212      	lsls	r2, r2, #8
    2424:	4803      	ldr	r0, [pc, #12]	; (2434 <system_clock_source_osc8m_set_config+0x38>)
    2426:	4003      	ands	r3, r0
    2428:	4313      	orrs	r3, r2
    242a:	620b      	str	r3, [r1, #32]
}
    242c:	bd70      	pop	{r4, r5, r6, pc}
    242e:	46c0      	nop			; (mov r8, r8)
    2430:	40000800 	.word	0x40000800
    2434:	fffffcff 	.word	0xfffffcff

00002438 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2438:	2807      	cmp	r0, #7
    243a:	d803      	bhi.n	2444 <system_clock_source_enable+0xc>
    243c:	0080      	lsls	r0, r0, #2
    243e:	4b1e      	ldr	r3, [pc, #120]	; (24b8 <system_clock_source_enable+0x80>)
    2440:	581b      	ldr	r3, [r3, r0]
    2442:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2444:	2017      	movs	r0, #23
    2446:	e036      	b.n	24b6 <system_clock_source_enable+0x7e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2448:	4a1c      	ldr	r2, [pc, #112]	; (24bc <system_clock_source_enable+0x84>)
    244a:	6a13      	ldr	r3, [r2, #32]
    244c:	2102      	movs	r1, #2
    244e:	430b      	orrs	r3, r1
    2450:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2452:	2000      	movs	r0, #0
    2454:	e02f      	b.n	24b6 <system_clock_source_enable+0x7e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2456:	4a19      	ldr	r2, [pc, #100]	; (24bc <system_clock_source_enable+0x84>)
    2458:	6993      	ldr	r3, [r2, #24]
    245a:	2102      	movs	r1, #2
    245c:	430b      	orrs	r3, r1
    245e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2460:	2000      	movs	r0, #0
		break;
    2462:	e028      	b.n	24b6 <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2464:	4a15      	ldr	r2, [pc, #84]	; (24bc <system_clock_source_enable+0x84>)
    2466:	8a13      	ldrh	r3, [r2, #16]
    2468:	2102      	movs	r1, #2
    246a:	430b      	orrs	r3, r1
    246c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    246e:	2000      	movs	r0, #0
		break;
    2470:	e021      	b.n	24b6 <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2472:	4a12      	ldr	r2, [pc, #72]	; (24bc <system_clock_source_enable+0x84>)
    2474:	8a93      	ldrh	r3, [r2, #20]
    2476:	2102      	movs	r1, #2
    2478:	430b      	orrs	r3, r1
    247a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    247c:	2000      	movs	r0, #0
		break;
    247e:	e01a      	b.n	24b6 <system_clock_source_enable+0x7e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2480:	4b0f      	ldr	r3, [pc, #60]	; (24c0 <system_clock_source_enable+0x88>)
    2482:	681a      	ldr	r2, [r3, #0]
    2484:	2102      	movs	r1, #2
    2486:	430a      	orrs	r2, r1
    2488:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    248a:	681b      	ldr	r3, [r3, #0]
    248c:	4a0d      	ldr	r2, [pc, #52]	; (24c4 <system_clock_source_enable+0x8c>)
    248e:	4013      	ands	r3, r2
    2490:	4a0a      	ldr	r2, [pc, #40]	; (24bc <system_clock_source_enable+0x84>)
    2492:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2494:	0011      	movs	r1, r2
    2496:	2210      	movs	r2, #16
    2498:	68cb      	ldr	r3, [r1, #12]
    249a:	421a      	tst	r2, r3
    249c:	d0fc      	beq.n	2498 <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    249e:	4a08      	ldr	r2, [pc, #32]	; (24c0 <system_clock_source_enable+0x88>)
    24a0:	6891      	ldr	r1, [r2, #8]
    24a2:	4b06      	ldr	r3, [pc, #24]	; (24bc <system_clock_source_enable+0x84>)
    24a4:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    24a6:	6851      	ldr	r1, [r2, #4]
    24a8:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    24aa:	6812      	ldr	r2, [r2, #0]
    24ac:	b292      	uxth	r2, r2
    24ae:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
    24b0:	2000      	movs	r0, #0
    24b2:	e000      	b.n	24b6 <system_clock_source_enable+0x7e>
		return STATUS_OK;
    24b4:	2000      	movs	r0, #0
}
    24b6:	4770      	bx	lr
    24b8:	00003dd8 	.word	0x00003dd8
    24bc:	40000800 	.word	0x40000800
    24c0:	200000c0 	.word	0x200000c0
    24c4:	0000ff7f 	.word	0x0000ff7f

000024c8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    24c8:	b530      	push	{r4, r5, lr}
    24ca:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    24cc:	22c2      	movs	r2, #194	; 0xc2
    24ce:	00d2      	lsls	r2, r2, #3
    24d0:	4b1a      	ldr	r3, [pc, #104]	; (253c <system_clock_init+0x74>)
    24d2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    24d4:	4a1a      	ldr	r2, [pc, #104]	; (2540 <system_clock_init+0x78>)
    24d6:	6853      	ldr	r3, [r2, #4]
    24d8:	211e      	movs	r1, #30
    24da:	438b      	bics	r3, r1
    24dc:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    24de:	2301      	movs	r3, #1
    24e0:	466a      	mov	r2, sp
    24e2:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    24e4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    24e6:	4d17      	ldr	r5, [pc, #92]	; (2544 <system_clock_init+0x7c>)
    24e8:	b2e0      	uxtb	r0, r4
    24ea:	4669      	mov	r1, sp
    24ec:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    24ee:	3401      	adds	r4, #1
    24f0:	2c1c      	cmp	r4, #28
    24f2:	d1f9      	bne.n	24e8 <system_clock_init+0x20>
	config->run_in_standby  = false;
    24f4:	a803      	add	r0, sp, #12
    24f6:	2400      	movs	r4, #0
    24f8:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    24fa:	2501      	movs	r5, #1
    24fc:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    24fe:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2500:	4b11      	ldr	r3, [pc, #68]	; (2548 <system_clock_init+0x80>)
    2502:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2504:	2006      	movs	r0, #6
    2506:	4b11      	ldr	r3, [pc, #68]	; (254c <system_clock_init+0x84>)
    2508:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    250a:	4b11      	ldr	r3, [pc, #68]	; (2550 <system_clock_init+0x88>)
    250c:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    250e:	4b11      	ldr	r3, [pc, #68]	; (2554 <system_clock_init+0x8c>)
    2510:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2512:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2514:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2516:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    2518:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    251a:	466b      	mov	r3, sp
    251c:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    251e:	2306      	movs	r3, #6
    2520:	466a      	mov	r2, sp
    2522:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    2524:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    2526:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2528:	4669      	mov	r1, sp
    252a:	2000      	movs	r0, #0
    252c:	4b0a      	ldr	r3, [pc, #40]	; (2558 <system_clock_init+0x90>)
    252e:	4798      	blx	r3
    2530:	2000      	movs	r0, #0
    2532:	4b0a      	ldr	r3, [pc, #40]	; (255c <system_clock_init+0x94>)
    2534:	4798      	blx	r3
#endif
}
    2536:	b005      	add	sp, #20
    2538:	bd30      	pop	{r4, r5, pc}
    253a:	46c0      	nop			; (mov r8, r8)
    253c:	40000800 	.word	0x40000800
    2540:	41004000 	.word	0x41004000
    2544:	00002799 	.word	0x00002799
    2548:	000023fd 	.word	0x000023fd
    254c:	00002439 	.word	0x00002439
    2550:	00002561 	.word	0x00002561
    2554:	40000400 	.word	0x40000400
    2558:	00002585 	.word	0x00002585
    255c:	0000263d 	.word	0x0000263d

00002560 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2560:	4a06      	ldr	r2, [pc, #24]	; (257c <system_gclk_init+0x1c>)
    2562:	6993      	ldr	r3, [r2, #24]
    2564:	2108      	movs	r1, #8
    2566:	430b      	orrs	r3, r1
    2568:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    256a:	2201      	movs	r2, #1
    256c:	4b04      	ldr	r3, [pc, #16]	; (2580 <system_gclk_init+0x20>)
    256e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2570:	0019      	movs	r1, r3
    2572:	780b      	ldrb	r3, [r1, #0]
    2574:	4213      	tst	r3, r2
    2576:	d1fc      	bne.n	2572 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2578:	4770      	bx	lr
    257a:	46c0      	nop			; (mov r8, r8)
    257c:	40000400 	.word	0x40000400
    2580:	40000c00 	.word	0x40000c00

00002584 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2584:	b570      	push	{r4, r5, r6, lr}
    2586:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2588:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    258a:	780d      	ldrb	r5, [r1, #0]
    258c:	022d      	lsls	r5, r5, #8
    258e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2590:	784b      	ldrb	r3, [r1, #1]
    2592:	2b00      	cmp	r3, #0
    2594:	d002      	beq.n	259c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2596:	2380      	movs	r3, #128	; 0x80
    2598:	02db      	lsls	r3, r3, #11
    259a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    259c:	7a4b      	ldrb	r3, [r1, #9]
    259e:	2b00      	cmp	r3, #0
    25a0:	d002      	beq.n	25a8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    25a2:	2380      	movs	r3, #128	; 0x80
    25a4:	031b      	lsls	r3, r3, #12
    25a6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    25a8:	6848      	ldr	r0, [r1, #4]
    25aa:	2801      	cmp	r0, #1
    25ac:	d910      	bls.n	25d0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    25ae:	1e43      	subs	r3, r0, #1
    25b0:	4218      	tst	r0, r3
    25b2:	d134      	bne.n	261e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    25b4:	2802      	cmp	r0, #2
    25b6:	d930      	bls.n	261a <system_gclk_gen_set_config+0x96>
    25b8:	2302      	movs	r3, #2
    25ba:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    25bc:	3201      	adds	r2, #1
						mask <<= 1) {
    25be:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    25c0:	4298      	cmp	r0, r3
    25c2:	d8fb      	bhi.n	25bc <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    25c4:	0212      	lsls	r2, r2, #8
    25c6:	4332      	orrs	r2, r6
    25c8:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    25ca:	2380      	movs	r3, #128	; 0x80
    25cc:	035b      	lsls	r3, r3, #13
    25ce:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    25d0:	7a0b      	ldrb	r3, [r1, #8]
    25d2:	2b00      	cmp	r3, #0
    25d4:	d002      	beq.n	25dc <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    25d6:	2380      	movs	r3, #128	; 0x80
    25d8:	039b      	lsls	r3, r3, #14
    25da:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    25dc:	4a13      	ldr	r2, [pc, #76]	; (262c <system_gclk_gen_set_config+0xa8>)
    25de:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    25e0:	b25b      	sxtb	r3, r3
    25e2:	2b00      	cmp	r3, #0
    25e4:	dbfb      	blt.n	25de <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    25e6:	4b12      	ldr	r3, [pc, #72]	; (2630 <system_gclk_gen_set_config+0xac>)
    25e8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    25ea:	4b12      	ldr	r3, [pc, #72]	; (2634 <system_gclk_gen_set_config+0xb0>)
    25ec:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    25ee:	4a0f      	ldr	r2, [pc, #60]	; (262c <system_gclk_gen_set_config+0xa8>)
    25f0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    25f2:	b25b      	sxtb	r3, r3
    25f4:	2b00      	cmp	r3, #0
    25f6:	dbfb      	blt.n	25f0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    25f8:	4b0c      	ldr	r3, [pc, #48]	; (262c <system_gclk_gen_set_config+0xa8>)
    25fa:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    25fc:	001a      	movs	r2, r3
    25fe:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2600:	b25b      	sxtb	r3, r3
    2602:	2b00      	cmp	r3, #0
    2604:	dbfb      	blt.n	25fe <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2606:	4a09      	ldr	r2, [pc, #36]	; (262c <system_gclk_gen_set_config+0xa8>)
    2608:	6853      	ldr	r3, [r2, #4]
    260a:	2180      	movs	r1, #128	; 0x80
    260c:	0249      	lsls	r1, r1, #9
    260e:	400b      	ands	r3, r1
    2610:	431d      	orrs	r5, r3
    2612:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2614:	4b08      	ldr	r3, [pc, #32]	; (2638 <system_gclk_gen_set_config+0xb4>)
    2616:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2618:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    261a:	2200      	movs	r2, #0
    261c:	e7d2      	b.n	25c4 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    261e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2620:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2622:	2380      	movs	r3, #128	; 0x80
    2624:	029b      	lsls	r3, r3, #10
    2626:	431d      	orrs	r5, r3
    2628:	e7d2      	b.n	25d0 <system_gclk_gen_set_config+0x4c>
    262a:	46c0      	nop			; (mov r8, r8)
    262c:	40000c00 	.word	0x40000c00
    2630:	00002311 	.word	0x00002311
    2634:	40000c08 	.word	0x40000c08
    2638:	00002351 	.word	0x00002351

0000263c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    263c:	b510      	push	{r4, lr}
    263e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2640:	4a0b      	ldr	r2, [pc, #44]	; (2670 <system_gclk_gen_enable+0x34>)
    2642:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2644:	b25b      	sxtb	r3, r3
    2646:	2b00      	cmp	r3, #0
    2648:	dbfb      	blt.n	2642 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    264a:	4b0a      	ldr	r3, [pc, #40]	; (2674 <system_gclk_gen_enable+0x38>)
    264c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    264e:	4b0a      	ldr	r3, [pc, #40]	; (2678 <system_gclk_gen_enable+0x3c>)
    2650:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2652:	4a07      	ldr	r2, [pc, #28]	; (2670 <system_gclk_gen_enable+0x34>)
    2654:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2656:	b25b      	sxtb	r3, r3
    2658:	2b00      	cmp	r3, #0
    265a:	dbfb      	blt.n	2654 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    265c:	4a04      	ldr	r2, [pc, #16]	; (2670 <system_gclk_gen_enable+0x34>)
    265e:	6851      	ldr	r1, [r2, #4]
    2660:	2380      	movs	r3, #128	; 0x80
    2662:	025b      	lsls	r3, r3, #9
    2664:	430b      	orrs	r3, r1
    2666:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2668:	4b04      	ldr	r3, [pc, #16]	; (267c <system_gclk_gen_enable+0x40>)
    266a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    266c:	bd10      	pop	{r4, pc}
    266e:	46c0      	nop			; (mov r8, r8)
    2670:	40000c00 	.word	0x40000c00
    2674:	00002311 	.word	0x00002311
    2678:	40000c04 	.word	0x40000c04
    267c:	00002351 	.word	0x00002351

00002680 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2680:	b570      	push	{r4, r5, r6, lr}
    2682:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2684:	4a1a      	ldr	r2, [pc, #104]	; (26f0 <system_gclk_gen_get_hz+0x70>)
    2686:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2688:	b25b      	sxtb	r3, r3
    268a:	2b00      	cmp	r3, #0
    268c:	dbfb      	blt.n	2686 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    268e:	4b19      	ldr	r3, [pc, #100]	; (26f4 <system_gclk_gen_get_hz+0x74>)
    2690:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2692:	4b19      	ldr	r3, [pc, #100]	; (26f8 <system_gclk_gen_get_hz+0x78>)
    2694:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2696:	4a16      	ldr	r2, [pc, #88]	; (26f0 <system_gclk_gen_get_hz+0x70>)
    2698:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    269a:	b25b      	sxtb	r3, r3
    269c:	2b00      	cmp	r3, #0
    269e:	dbfb      	blt.n	2698 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    26a0:	4e13      	ldr	r6, [pc, #76]	; (26f0 <system_gclk_gen_get_hz+0x70>)
    26a2:	6870      	ldr	r0, [r6, #4]
    26a4:	04c0      	lsls	r0, r0, #19
    26a6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    26a8:	4b14      	ldr	r3, [pc, #80]	; (26fc <system_gclk_gen_get_hz+0x7c>)
    26aa:	4798      	blx	r3
    26ac:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    26ae:	4b12      	ldr	r3, [pc, #72]	; (26f8 <system_gclk_gen_get_hz+0x78>)
    26b0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    26b2:	6876      	ldr	r6, [r6, #4]
    26b4:	02f6      	lsls	r6, r6, #11
    26b6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    26b8:	4b11      	ldr	r3, [pc, #68]	; (2700 <system_gclk_gen_get_hz+0x80>)
    26ba:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    26bc:	4a0c      	ldr	r2, [pc, #48]	; (26f0 <system_gclk_gen_get_hz+0x70>)
    26be:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    26c0:	b25b      	sxtb	r3, r3
    26c2:	2b00      	cmp	r3, #0
    26c4:	dbfb      	blt.n	26be <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    26c6:	4b0a      	ldr	r3, [pc, #40]	; (26f0 <system_gclk_gen_get_hz+0x70>)
    26c8:	689c      	ldr	r4, [r3, #8]
    26ca:	0224      	lsls	r4, r4, #8
    26cc:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    26ce:	4b0d      	ldr	r3, [pc, #52]	; (2704 <system_gclk_gen_get_hz+0x84>)
    26d0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    26d2:	2e00      	cmp	r6, #0
    26d4:	d107      	bne.n	26e6 <system_gclk_gen_get_hz+0x66>
    26d6:	2c01      	cmp	r4, #1
    26d8:	d907      	bls.n	26ea <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    26da:	0021      	movs	r1, r4
    26dc:	0028      	movs	r0, r5
    26de:	4b0a      	ldr	r3, [pc, #40]	; (2708 <system_gclk_gen_get_hz+0x88>)
    26e0:	4798      	blx	r3
    26e2:	0005      	movs	r5, r0
    26e4:	e001      	b.n	26ea <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    26e6:	3401      	adds	r4, #1
    26e8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    26ea:	0028      	movs	r0, r5
    26ec:	bd70      	pop	{r4, r5, r6, pc}
    26ee:	46c0      	nop			; (mov r8, r8)
    26f0:	40000c00 	.word	0x40000c00
    26f4:	00002311 	.word	0x00002311
    26f8:	40000c04 	.word	0x40000c04
    26fc:	00002381 	.word	0x00002381
    2700:	40000c08 	.word	0x40000c08
    2704:	00002351 	.word	0x00002351
    2708:	00003059 	.word	0x00003059

0000270c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    270c:	b510      	push	{r4, lr}
    270e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2710:	4b06      	ldr	r3, [pc, #24]	; (272c <system_gclk_chan_enable+0x20>)
    2712:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2714:	4b06      	ldr	r3, [pc, #24]	; (2730 <system_gclk_chan_enable+0x24>)
    2716:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2718:	4a06      	ldr	r2, [pc, #24]	; (2734 <system_gclk_chan_enable+0x28>)
    271a:	8853      	ldrh	r3, [r2, #2]
    271c:	2180      	movs	r1, #128	; 0x80
    271e:	01c9      	lsls	r1, r1, #7
    2720:	430b      	orrs	r3, r1
    2722:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2724:	4b04      	ldr	r3, [pc, #16]	; (2738 <system_gclk_chan_enable+0x2c>)
    2726:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2728:	bd10      	pop	{r4, pc}
    272a:	46c0      	nop			; (mov r8, r8)
    272c:	00002311 	.word	0x00002311
    2730:	40000c02 	.word	0x40000c02
    2734:	40000c00 	.word	0x40000c00
    2738:	00002351 	.word	0x00002351

0000273c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    273c:	b510      	push	{r4, lr}
    273e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2740:	4b0f      	ldr	r3, [pc, #60]	; (2780 <system_gclk_chan_disable+0x44>)
    2742:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2744:	4b0f      	ldr	r3, [pc, #60]	; (2784 <system_gclk_chan_disable+0x48>)
    2746:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2748:	4a0f      	ldr	r2, [pc, #60]	; (2788 <system_gclk_chan_disable+0x4c>)
    274a:	8853      	ldrh	r3, [r2, #2]
    274c:	051b      	lsls	r3, r3, #20
    274e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2750:	8853      	ldrh	r3, [r2, #2]
    2752:	490e      	ldr	r1, [pc, #56]	; (278c <system_gclk_chan_disable+0x50>)
    2754:	400b      	ands	r3, r1
    2756:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2758:	8853      	ldrh	r3, [r2, #2]
    275a:	490d      	ldr	r1, [pc, #52]	; (2790 <system_gclk_chan_disable+0x54>)
    275c:	400b      	ands	r3, r1
    275e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2760:	0011      	movs	r1, r2
    2762:	2280      	movs	r2, #128	; 0x80
    2764:	01d2      	lsls	r2, r2, #7
    2766:	884b      	ldrh	r3, [r1, #2]
    2768:	4213      	tst	r3, r2
    276a:	d1fc      	bne.n	2766 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    276c:	4906      	ldr	r1, [pc, #24]	; (2788 <system_gclk_chan_disable+0x4c>)
    276e:	884a      	ldrh	r2, [r1, #2]
    2770:	0203      	lsls	r3, r0, #8
    2772:	4806      	ldr	r0, [pc, #24]	; (278c <system_gclk_chan_disable+0x50>)
    2774:	4002      	ands	r2, r0
    2776:	4313      	orrs	r3, r2
    2778:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    277a:	4b06      	ldr	r3, [pc, #24]	; (2794 <system_gclk_chan_disable+0x58>)
    277c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    277e:	bd10      	pop	{r4, pc}
    2780:	00002311 	.word	0x00002311
    2784:	40000c02 	.word	0x40000c02
    2788:	40000c00 	.word	0x40000c00
    278c:	fffff0ff 	.word	0xfffff0ff
    2790:	ffffbfff 	.word	0xffffbfff
    2794:	00002351 	.word	0x00002351

00002798 <system_gclk_chan_set_config>:
{
    2798:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    279a:	780c      	ldrb	r4, [r1, #0]
    279c:	0224      	lsls	r4, r4, #8
    279e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    27a0:	4b02      	ldr	r3, [pc, #8]	; (27ac <system_gclk_chan_set_config+0x14>)
    27a2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    27a4:	b2a4      	uxth	r4, r4
    27a6:	4b02      	ldr	r3, [pc, #8]	; (27b0 <system_gclk_chan_set_config+0x18>)
    27a8:	805c      	strh	r4, [r3, #2]
}
    27aa:	bd10      	pop	{r4, pc}
    27ac:	0000273d 	.word	0x0000273d
    27b0:	40000c00 	.word	0x40000c00

000027b4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    27b4:	b510      	push	{r4, lr}
    27b6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    27b8:	4b06      	ldr	r3, [pc, #24]	; (27d4 <system_gclk_chan_get_hz+0x20>)
    27ba:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    27bc:	4b06      	ldr	r3, [pc, #24]	; (27d8 <system_gclk_chan_get_hz+0x24>)
    27be:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    27c0:	4b06      	ldr	r3, [pc, #24]	; (27dc <system_gclk_chan_get_hz+0x28>)
    27c2:	885c      	ldrh	r4, [r3, #2]
    27c4:	0524      	lsls	r4, r4, #20
    27c6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    27c8:	4b05      	ldr	r3, [pc, #20]	; (27e0 <system_gclk_chan_get_hz+0x2c>)
    27ca:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    27cc:	0020      	movs	r0, r4
    27ce:	4b05      	ldr	r3, [pc, #20]	; (27e4 <system_gclk_chan_get_hz+0x30>)
    27d0:	4798      	blx	r3
}
    27d2:	bd10      	pop	{r4, pc}
    27d4:	00002311 	.word	0x00002311
    27d8:	40000c02 	.word	0x40000c02
    27dc:	40000c00 	.word	0x40000c00
    27e0:	00002351 	.word	0x00002351
    27e4:	00002681 	.word	0x00002681

000027e8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    27e8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    27ea:	78d3      	ldrb	r3, [r2, #3]
    27ec:	2b00      	cmp	r3, #0
    27ee:	d135      	bne.n	285c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    27f0:	7813      	ldrb	r3, [r2, #0]
    27f2:	2b80      	cmp	r3, #128	; 0x80
    27f4:	d029      	beq.n	284a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    27f6:	061b      	lsls	r3, r3, #24
    27f8:	2480      	movs	r4, #128	; 0x80
    27fa:	0264      	lsls	r4, r4, #9
    27fc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    27fe:	7854      	ldrb	r4, [r2, #1]
    2800:	2502      	movs	r5, #2
    2802:	43ac      	bics	r4, r5
    2804:	d106      	bne.n	2814 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2806:	7894      	ldrb	r4, [r2, #2]
    2808:	2c00      	cmp	r4, #0
    280a:	d120      	bne.n	284e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    280c:	2480      	movs	r4, #128	; 0x80
    280e:	02a4      	lsls	r4, r4, #10
    2810:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2812:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2814:	7854      	ldrb	r4, [r2, #1]
    2816:	3c01      	subs	r4, #1
    2818:	2c01      	cmp	r4, #1
    281a:	d91c      	bls.n	2856 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    281c:	040d      	lsls	r5, r1, #16
    281e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2820:	24a0      	movs	r4, #160	; 0xa0
    2822:	05e4      	lsls	r4, r4, #23
    2824:	432c      	orrs	r4, r5
    2826:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2828:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    282a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    282c:	24d0      	movs	r4, #208	; 0xd0
    282e:	0624      	lsls	r4, r4, #24
    2830:	432c      	orrs	r4, r5
    2832:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2834:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2836:	78d4      	ldrb	r4, [r2, #3]
    2838:	2c00      	cmp	r4, #0
    283a:	d122      	bne.n	2882 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    283c:	035b      	lsls	r3, r3, #13
    283e:	d51c      	bpl.n	287a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2840:	7893      	ldrb	r3, [r2, #2]
    2842:	2b01      	cmp	r3, #1
    2844:	d01e      	beq.n	2884 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2846:	6141      	str	r1, [r0, #20]
    2848:	e017      	b.n	287a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    284a:	2300      	movs	r3, #0
    284c:	e7d7      	b.n	27fe <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    284e:	24c0      	movs	r4, #192	; 0xc0
    2850:	02e4      	lsls	r4, r4, #11
    2852:	4323      	orrs	r3, r4
    2854:	e7dd      	b.n	2812 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2856:	4c0d      	ldr	r4, [pc, #52]	; (288c <_system_pinmux_config+0xa4>)
    2858:	4023      	ands	r3, r4
    285a:	e7df      	b.n	281c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    285c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    285e:	040c      	lsls	r4, r1, #16
    2860:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2862:	23a0      	movs	r3, #160	; 0xa0
    2864:	05db      	lsls	r3, r3, #23
    2866:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2868:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    286a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    286c:	23d0      	movs	r3, #208	; 0xd0
    286e:	061b      	lsls	r3, r3, #24
    2870:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2872:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2874:	78d3      	ldrb	r3, [r2, #3]
    2876:	2b00      	cmp	r3, #0
    2878:	d103      	bne.n	2882 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    287a:	7853      	ldrb	r3, [r2, #1]
    287c:	3b01      	subs	r3, #1
    287e:	2b01      	cmp	r3, #1
    2880:	d902      	bls.n	2888 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2882:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2884:	6181      	str	r1, [r0, #24]
    2886:	e7f8      	b.n	287a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2888:	6081      	str	r1, [r0, #8]
}
    288a:	e7fa      	b.n	2882 <_system_pinmux_config+0x9a>
    288c:	fffbffff 	.word	0xfffbffff

00002890 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2890:	b510      	push	{r4, lr}
    2892:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2894:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2896:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2898:	2900      	cmp	r1, #0
    289a:	d104      	bne.n	28a6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    289c:	0943      	lsrs	r3, r0, #5
    289e:	01db      	lsls	r3, r3, #7
    28a0:	4905      	ldr	r1, [pc, #20]	; (28b8 <system_pinmux_pin_set_config+0x28>)
    28a2:	468c      	mov	ip, r1
    28a4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    28a6:	241f      	movs	r4, #31
    28a8:	4020      	ands	r0, r4
    28aa:	2101      	movs	r1, #1
    28ac:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    28ae:	0018      	movs	r0, r3
    28b0:	4b02      	ldr	r3, [pc, #8]	; (28bc <system_pinmux_pin_set_config+0x2c>)
    28b2:	4798      	blx	r3
}
    28b4:	bd10      	pop	{r4, pc}
    28b6:	46c0      	nop			; (mov r8, r8)
    28b8:	41004400 	.word	0x41004400
    28bc:	000027e9 	.word	0x000027e9

000028c0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    28c0:	4770      	bx	lr
	...

000028c4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    28c4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    28c6:	4b05      	ldr	r3, [pc, #20]	; (28dc <system_init+0x18>)
    28c8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    28ca:	4b05      	ldr	r3, [pc, #20]	; (28e0 <system_init+0x1c>)
    28cc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    28ce:	4b05      	ldr	r3, [pc, #20]	; (28e4 <system_init+0x20>)
    28d0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    28d2:	4b05      	ldr	r3, [pc, #20]	; (28e8 <system_init+0x24>)
    28d4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    28d6:	4b05      	ldr	r3, [pc, #20]	; (28ec <system_init+0x28>)
    28d8:	4798      	blx	r3
}
    28da:	bd10      	pop	{r4, pc}
    28dc:	000024c9 	.word	0x000024c9
    28e0:	00002225 	.word	0x00002225
    28e4:	000028c1 	.word	0x000028c1
    28e8:	00000961 	.word	0x00000961
    28ec:	000028c1 	.word	0x000028c1

000028f0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    28f0:	e7fe      	b.n	28f0 <Dummy_Handler>
	...

000028f4 <Reset_Handler>:
{
    28f4:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    28f6:	4a1a      	ldr	r2, [pc, #104]	; (2960 <Reset_Handler+0x6c>)
    28f8:	4b1a      	ldr	r3, [pc, #104]	; (2964 <Reset_Handler+0x70>)
    28fa:	429a      	cmp	r2, r3
    28fc:	d011      	beq.n	2922 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    28fe:	001a      	movs	r2, r3
    2900:	4b19      	ldr	r3, [pc, #100]	; (2968 <Reset_Handler+0x74>)
    2902:	429a      	cmp	r2, r3
    2904:	d20d      	bcs.n	2922 <Reset_Handler+0x2e>
    2906:	4a19      	ldr	r2, [pc, #100]	; (296c <Reset_Handler+0x78>)
    2908:	3303      	adds	r3, #3
    290a:	1a9b      	subs	r3, r3, r2
    290c:	089b      	lsrs	r3, r3, #2
    290e:	3301      	adds	r3, #1
    2910:	009b      	lsls	r3, r3, #2
    2912:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2914:	4813      	ldr	r0, [pc, #76]	; (2964 <Reset_Handler+0x70>)
    2916:	4912      	ldr	r1, [pc, #72]	; (2960 <Reset_Handler+0x6c>)
    2918:	588c      	ldr	r4, [r1, r2]
    291a:	5084      	str	r4, [r0, r2]
    291c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    291e:	429a      	cmp	r2, r3
    2920:	d1fa      	bne.n	2918 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2922:	4a13      	ldr	r2, [pc, #76]	; (2970 <Reset_Handler+0x7c>)
    2924:	4b13      	ldr	r3, [pc, #76]	; (2974 <Reset_Handler+0x80>)
    2926:	429a      	cmp	r2, r3
    2928:	d20a      	bcs.n	2940 <Reset_Handler+0x4c>
    292a:	43d3      	mvns	r3, r2
    292c:	4911      	ldr	r1, [pc, #68]	; (2974 <Reset_Handler+0x80>)
    292e:	185b      	adds	r3, r3, r1
    2930:	2103      	movs	r1, #3
    2932:	438b      	bics	r3, r1
    2934:	3304      	adds	r3, #4
    2936:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2938:	2100      	movs	r1, #0
    293a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    293c:	4293      	cmp	r3, r2
    293e:	d1fc      	bne.n	293a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2940:	4a0d      	ldr	r2, [pc, #52]	; (2978 <Reset_Handler+0x84>)
    2942:	21ff      	movs	r1, #255	; 0xff
    2944:	4b0d      	ldr	r3, [pc, #52]	; (297c <Reset_Handler+0x88>)
    2946:	438b      	bics	r3, r1
    2948:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    294a:	4a0d      	ldr	r2, [pc, #52]	; (2980 <Reset_Handler+0x8c>)
    294c:	6853      	ldr	r3, [r2, #4]
    294e:	397f      	subs	r1, #127	; 0x7f
    2950:	430b      	orrs	r3, r1
    2952:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2954:	4b0b      	ldr	r3, [pc, #44]	; (2984 <Reset_Handler+0x90>)
    2956:	4798      	blx	r3
        main();
    2958:	4b0b      	ldr	r3, [pc, #44]	; (2988 <Reset_Handler+0x94>)
    295a:	4798      	blx	r3
    295c:	e7fe      	b.n	295c <Reset_Handler+0x68>
    295e:	46c0      	nop			; (mov r8, r8)
    2960:	00003e70 	.word	0x00003e70
    2964:	20000000 	.word	0x20000000
    2968:	20000078 	.word	0x20000078
    296c:	20000004 	.word	0x20000004
    2970:	20000078 	.word	0x20000078
    2974:	20000288 	.word	0x20000288
    2978:	e000ed00 	.word	0xe000ed00
    297c:	00000000 	.word	0x00000000
    2980:	41004000 	.word	0x41004000
    2984:	00003399 	.word	0x00003399
    2988:	00002e79 	.word	0x00002e79

0000298c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    298c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    298e:	4a06      	ldr	r2, [pc, #24]	; (29a8 <_sbrk+0x1c>)
    2990:	6812      	ldr	r2, [r2, #0]
    2992:	2a00      	cmp	r2, #0
    2994:	d004      	beq.n	29a0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2996:	4a04      	ldr	r2, [pc, #16]	; (29a8 <_sbrk+0x1c>)
    2998:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    299a:	18c3      	adds	r3, r0, r3
    299c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    299e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    29a0:	4902      	ldr	r1, [pc, #8]	; (29ac <_sbrk+0x20>)
    29a2:	4a01      	ldr	r2, [pc, #4]	; (29a8 <_sbrk+0x1c>)
    29a4:	6011      	str	r1, [r2, #0]
    29a6:	e7f6      	b.n	2996 <_sbrk+0xa>
    29a8:	200000d4 	.word	0x200000d4
    29ac:	20002288 	.word	0x20002288

000029b0 <change_light_mode>:
//=============================================================================
//! \brief  Update the light struct
//=============================================================================
void change_light_mode(E_LIGHT_MODE new_mode)
{
	light_state.mode = new_mode;
    29b0:	4a03      	ldr	r2, [pc, #12]	; (29c0 <change_light_mode+0x10>)
    29b2:	7010      	strb	r0, [r2, #0]
	light_state.led_rising = false;
    29b4:	2300      	movs	r3, #0
    29b6:	7293      	strb	r3, [r2, #10]
	strobe_counter = 0;
    29b8:	4a02      	ldr	r2, [pc, #8]	; (29c4 <change_light_mode+0x14>)
    29ba:	6013      	str	r3, [r2, #0]
}
    29bc:	4770      	bx	lr
    29be:	46c0      	nop			; (mov r8, r8)
    29c0:	2000017c 	.word	0x2000017c
    29c4:	200001bc 	.word	0x200001bc

000029c8 <change_light_freq>:

void change_light_freq(E_LIGHT_FREQ new_freq)
{
	light_state.freq = new_freq;
    29c8:	4b01      	ldr	r3, [pc, #4]	; (29d0 <change_light_freq+0x8>)
    29ca:	7058      	strb	r0, [r3, #1]
}
    29cc:	4770      	bx	lr
    29ce:	46c0      	nop			; (mov r8, r8)
    29d0:	2000017c 	.word	0x2000017c

000029d4 <change_light_bright>:

void change_light_bright(uint16_t perthousand)
{
    29d4:	b510      	push	{r4, lr}
	light_state.led_max_bright = perthousand;
    29d6:	4b04      	ldr	r3, [pc, #16]	; (29e8 <change_light_bright+0x14>)
    29d8:	80d8      	strh	r0, [r3, #6]
	fade_bright_step = light_state.led_max_bright/LIGHT_MIN;
    29da:	2164      	movs	r1, #100	; 0x64
    29dc:	4b03      	ldr	r3, [pc, #12]	; (29ec <change_light_bright+0x18>)
    29de:	4798      	blx	r3
    29e0:	4b03      	ldr	r3, [pc, #12]	; (29f0 <change_light_bright+0x1c>)
    29e2:	8018      	strh	r0, [r3, #0]
}
    29e4:	bd10      	pop	{r4, pc}
    29e6:	46c0      	nop			; (mov r8, r8)
    29e8:	2000017c 	.word	0x2000017c
    29ec:	00003059 	.word	0x00003059
    29f0:	200001c6 	.word	0x200001c6

000029f4 <change_light_threshold>:

void change_light_threshold(uint16_t new_threshold)
{
	light_state.low_power_threshold = new_threshold;
    29f4:	4b01      	ldr	r3, [pc, #4]	; (29fc <change_light_threshold+0x8>)
    29f6:	8058      	strh	r0, [r3, #2]
}
    29f8:	4770      	bx	lr
    29fa:	46c0      	nop			; (mov r8, r8)
    29fc:	2000017c 	.word	0x2000017c

00002a00 <enter_low_power_mode>:

//=============================================================================
//! \brief Low Power functions
//=============================================================================
void enter_low_power_mode()
{
    2a00:	b510      	push	{r4, lr}
	low_power_timer = get_tick;
    2a02:	4a0f      	ldr	r2, [pc, #60]	; (2a40 <enter_low_power_mode+0x40>)
    2a04:	4b0f      	ldr	r3, [pc, #60]	; (2a44 <enter_low_power_mode+0x44>)
    2a06:	601a      	str	r2, [r3, #0]
	
	change_light_mode(E_LIGHT_ON);
    2a08:	2001      	movs	r0, #1
    2a0a:	4b0f      	ldr	r3, [pc, #60]	; (2a48 <enter_low_power_mode+0x48>)
    2a0c:	4798      	blx	r3
	light_state.led_max_bright = perthousand;
    2a0e:	4b0f      	ldr	r3, [pc, #60]	; (2a4c <enter_low_power_mode+0x4c>)
    2a10:	22dc      	movs	r2, #220	; 0xdc
    2a12:	32ff      	adds	r2, #255	; 0xff
    2a14:	80da      	strh	r2, [r3, #6]
	fade_bright_step = light_state.led_max_bright/LIGHT_MIN;
    2a16:	2104      	movs	r1, #4
    2a18:	4a0d      	ldr	r2, [pc, #52]	; (2a50 <enter_low_power_mode+0x50>)
    2a1a:	8011      	strh	r1, [r2, #0]
	light_state.freq = new_freq;
    2a1c:	2203      	movs	r2, #3
    2a1e:	705a      	strb	r2, [r3, #1]
	change_light_bright(LIGHT_MAX / 2);
	change_light_freq(E_LIGHT_MEDIUM);
	light_state.led_low_power_time = LOW_POWER_LIGHT_ON_TIME;
    2a20:	4a0c      	ldr	r2, [pc, #48]	; (2a54 <enter_low_power_mode+0x54>)
    2a22:	811a      	strh	r2, [r3, #8]
	
	batt_reached_low_power = true;
    2a24:	2201      	movs	r2, #1
    2a26:	4b0c      	ldr	r3, [pc, #48]	; (2a58 <enter_low_power_mode+0x58>)
    2a28:	701a      	strb	r2, [r3, #0]
	if (bt_connected)
    2a2a:	4b0c      	ldr	r3, [pc, #48]	; (2a5c <enter_low_power_mode+0x5c>)
    2a2c:	781b      	ldrb	r3, [r3, #0]
    2a2e:	2b00      	cmp	r3, #0
    2a30:	d001      	beq.n	2a36 <enter_low_power_mode+0x36>
	{
		low_power_update_app = true;
    2a32:	4b0b      	ldr	r3, [pc, #44]	; (2a60 <enter_low_power_mode+0x60>)
    2a34:	701a      	strb	r2, [r3, #0]
	}
	
	delay_ms(1);
    2a36:	2001      	movs	r0, #1
    2a38:	4b0a      	ldr	r3, [pc, #40]	; (2a64 <enter_low_power_mode+0x64>)
    2a3a:	4798      	blx	r3
}
    2a3c:	bd10      	pop	{r4, pc}
    2a3e:	46c0      	nop			; (mov r8, r8)
    2a40:	00001ee1 	.word	0x00001ee1
    2a44:	200001b0 	.word	0x200001b0
    2a48:	000029b1 	.word	0x000029b1
    2a4c:	2000017c 	.word	0x2000017c
    2a50:	200001c6 	.word	0x200001c6
    2a54:	00007530 	.word	0x00007530
    2a58:	2000016c 	.word	0x2000016c
    2a5c:	20000280 	.word	0x20000280
    2a60:	20000188 	.word	0x20000188
    2a64:	00000171 	.word	0x00000171

00002a68 <exit_low_power_mode>:

void exit_low_power_mode()
{
    2a68:	b510      	push	{r4, lr}
	change_light_mode(E_LIGHT_ON);
    2a6a:	2001      	movs	r0, #1
    2a6c:	4b0a      	ldr	r3, [pc, #40]	; (2a98 <exit_low_power_mode+0x30>)
    2a6e:	4798      	blx	r3
	light_state.led_max_bright = perthousand;
    2a70:	22dc      	movs	r2, #220	; 0xdc
    2a72:	32ff      	adds	r2, #255	; 0xff
    2a74:	4b09      	ldr	r3, [pc, #36]	; (2a9c <exit_low_power_mode+0x34>)
    2a76:	80da      	strh	r2, [r3, #6]
	fade_bright_step = light_state.led_max_bright/LIGHT_MIN;
    2a78:	3ad8      	subs	r2, #216	; 0xd8
    2a7a:	3aff      	subs	r2, #255	; 0xff
    2a7c:	4b08      	ldr	r3, [pc, #32]	; (2aa0 <exit_low_power_mode+0x38>)
    2a7e:	801a      	strh	r2, [r3, #0]
	change_light_bright(LIGHT_MAX / 2);
	
	batt_reached_low_power = false;
    2a80:	2200      	movs	r2, #0
    2a82:	4b08      	ldr	r3, [pc, #32]	; (2aa4 <exit_low_power_mode+0x3c>)
    2a84:	701a      	strb	r2, [r3, #0]
	if (bt_connected)
    2a86:	4b08      	ldr	r3, [pc, #32]	; (2aa8 <exit_low_power_mode+0x40>)
    2a88:	781b      	ldrb	r3, [r3, #0]
    2a8a:	2b00      	cmp	r3, #0
    2a8c:	d002      	beq.n	2a94 <exit_low_power_mode+0x2c>
	{
		low_power_update_app = true;
    2a8e:	3201      	adds	r2, #1
    2a90:	4b06      	ldr	r3, [pc, #24]	; (2aac <exit_low_power_mode+0x44>)
    2a92:	701a      	strb	r2, [r3, #0]
	}
}
    2a94:	bd10      	pop	{r4, pc}
    2a96:	46c0      	nop			; (mov r8, r8)
    2a98:	000029b1 	.word	0x000029b1
    2a9c:	2000017c 	.word	0x2000017c
    2aa0:	200001c6 	.word	0x200001c6
    2aa4:	2000016c 	.word	0x2000016c
    2aa8:	20000280 	.word	0x20000280
    2aac:	20000188 	.word	0x20000188

00002ab0 <manage_low_power_light>:

void manage_low_power_light()
{
    2ab0:	b510      	push	{r4, lr}
	if (tick_elapsed(low_power_timer) % light_state.led_low_power_time == 0)
    2ab2:	4b14      	ldr	r3, [pc, #80]	; (2b04 <manage_low_power_light+0x54>)
    2ab4:	6818      	ldr	r0, [r3, #0]
    2ab6:	4b14      	ldr	r3, [pc, #80]	; (2b08 <manage_low_power_light+0x58>)
    2ab8:	4798      	blx	r3
    2aba:	4b14      	ldr	r3, [pc, #80]	; (2b0c <manage_low_power_light+0x5c>)
    2abc:	8919      	ldrh	r1, [r3, #8]
    2abe:	4b14      	ldr	r3, [pc, #80]	; (2b10 <manage_low_power_light+0x60>)
    2ac0:	4798      	blx	r3
    2ac2:	2900      	cmp	r1, #0
    2ac4:	d10d      	bne.n	2ae2 <manage_low_power_light+0x32>
	{
		if (light_state.mode == E_LIGHT_ON)
    2ac6:	4b11      	ldr	r3, [pc, #68]	; (2b0c <manage_low_power_light+0x5c>)
    2ac8:	781b      	ldrb	r3, [r3, #0]
    2aca:	2b01      	cmp	r3, #1
    2acc:	d00a      	beq.n	2ae4 <manage_low_power_light+0x34>
		{
			change_light_mode(E_LIGHT_STROBE);
			light_state.led_low_power_time = LOW_POWER_LIGHT_STROBE_TIME;
		}
		else if (light_state.mode == E_LIGHT_STROBE)
    2ace:	2b03      	cmp	r3, #3
    2ad0:	d010      	beq.n	2af4 <manage_low_power_light+0x44>
		{
			change_light_mode(E_LIGHT_ON);
			light_state.led_low_power_time = LOW_POWER_LIGHT_ON_TIME;
		}
		
		low_power_timer = get_tick();
    2ad2:	4b10      	ldr	r3, [pc, #64]	; (2b14 <manage_low_power_light+0x64>)
    2ad4:	4798      	blx	r3
    2ad6:	4b0b      	ldr	r3, [pc, #44]	; (2b04 <manage_low_power_light+0x54>)
    2ad8:	6018      	str	r0, [r3, #0]
		delay_us(500);
    2ada:	20fa      	movs	r0, #250	; 0xfa
    2adc:	0040      	lsls	r0, r0, #1
    2ade:	4b0e      	ldr	r3, [pc, #56]	; (2b18 <manage_low_power_light+0x68>)
    2ae0:	4798      	blx	r3
	}
}
    2ae2:	bd10      	pop	{r4, pc}
			change_light_mode(E_LIGHT_STROBE);
    2ae4:	2003      	movs	r0, #3
    2ae6:	4b0d      	ldr	r3, [pc, #52]	; (2b1c <manage_low_power_light+0x6c>)
    2ae8:	4798      	blx	r3
			light_state.led_low_power_time = LOW_POWER_LIGHT_STROBE_TIME;
    2aea:	22fa      	movs	r2, #250	; 0xfa
    2aec:	00d2      	lsls	r2, r2, #3
    2aee:	4b07      	ldr	r3, [pc, #28]	; (2b0c <manage_low_power_light+0x5c>)
    2af0:	811a      	strh	r2, [r3, #8]
    2af2:	e7ee      	b.n	2ad2 <manage_low_power_light+0x22>
			change_light_mode(E_LIGHT_ON);
    2af4:	2001      	movs	r0, #1
    2af6:	4b09      	ldr	r3, [pc, #36]	; (2b1c <manage_low_power_light+0x6c>)
    2af8:	4798      	blx	r3
			light_state.led_low_power_time = LOW_POWER_LIGHT_ON_TIME;
    2afa:	4a09      	ldr	r2, [pc, #36]	; (2b20 <manage_low_power_light+0x70>)
    2afc:	4b03      	ldr	r3, [pc, #12]	; (2b0c <manage_low_power_light+0x5c>)
    2afe:	811a      	strh	r2, [r3, #8]
    2b00:	e7e7      	b.n	2ad2 <manage_low_power_light+0x22>
    2b02:	46c0      	nop			; (mov r8, r8)
    2b04:	200001b0 	.word	0x200001b0
    2b08:	00001eed 	.word	0x00001eed
    2b0c:	2000017c 	.word	0x2000017c
    2b10:	00003165 	.word	0x00003165
    2b14:	00001ee1 	.word	0x00001ee1
    2b18:	00000145 	.word	0x00000145
    2b1c:	000029b1 	.word	0x000029b1
    2b20:	00007530 	.word	0x00007530

00002b24 <update_bright>:

//=============================================================================
//! \brief Update the level of the brightness
//=============================================================================
bool update_bright()
{
    2b24:	b510      	push	{r4, lr}
	bool cycle_complete = false;
	
	if (light_state.led_rising)
    2b26:	4b11      	ldr	r3, [pc, #68]	; (2b6c <update_bright+0x48>)
    2b28:	7a98      	ldrb	r0, [r3, #10]
    2b2a:	2800      	cmp	r0, #0
    2b2c:	d00d      	beq.n	2b4a <update_bright+0x26>
	{
		light_state.led_bright += fade_bright_step;
    2b2e:	4b10      	ldr	r3, [pc, #64]	; (2b70 <update_bright+0x4c>)
    2b30:	881c      	ldrh	r4, [r3, #0]
    2b32:	490e      	ldr	r1, [pc, #56]	; (2b6c <update_bright+0x48>)
    2b34:	888b      	ldrh	r3, [r1, #4]
    2b36:	18e3      	adds	r3, r4, r3
    2b38:	b29b      	uxth	r3, r3
    2b3a:	808b      	strh	r3, [r1, #4]
		
		if (light_state.led_bright >= light_state.led_max_bright - fade_bright_step)
    2b3c:	88ca      	ldrh	r2, [r1, #6]
    2b3e:	1b12      	subs	r2, r2, r4
    2b40:	4293      	cmp	r3, r2
    2b42:	db10      	blt.n	2b66 <update_bright+0x42>
		{
			light_state.led_rising = false;
    2b44:	2200      	movs	r2, #0
    2b46:	728a      	strb	r2, [r1, #10]
    2b48:	e00c      	b.n	2b64 <update_bright+0x40>
			cycle_complete = true;
		}
	}
	else
	{
		light_state.led_bright -= fade_bright_step;
    2b4a:	4b09      	ldr	r3, [pc, #36]	; (2b70 <update_bright+0x4c>)
    2b4c:	881a      	ldrh	r2, [r3, #0]
    2b4e:	4907      	ldr	r1, [pc, #28]	; (2b6c <update_bright+0x48>)
    2b50:	888b      	ldrh	r3, [r1, #4]
    2b52:	1a9b      	subs	r3, r3, r2
    2b54:	b29b      	uxth	r3, r3
    2b56:	808b      	strh	r3, [r1, #4]
		
		if (light_state.led_bright <= LIGHT_MIN + fade_bright_step)
    2b58:	3264      	adds	r2, #100	; 0x64
    2b5a:	4293      	cmp	r3, r2
    2b5c:	dc02      	bgt.n	2b64 <update_bright+0x40>
		{
			light_state.led_rising = true;
    2b5e:	2201      	movs	r2, #1
    2b60:	728a      	strb	r2, [r1, #10]
			cycle_complete = true;
    2b62:	2001      	movs	r0, #1
		}
	}
	
	return cycle_complete;
}
    2b64:	bd10      	pop	{r4, pc}
	bool cycle_complete = false;
    2b66:	2000      	movs	r0, #0
    2b68:	e7fc      	b.n	2b64 <update_bright+0x40>
    2b6a:	46c0      	nop			; (mov r8, r8)
    2b6c:	2000017c 	.word	0x2000017c
    2b70:	200001c6 	.word	0x200001c6

00002b74 <turn_lights>:
//=============================================================================
//! \brief Turn ON/OFF the LED Stripe
//! \param[in] bool on The on/off - TRUE = ON | FALSE = OFF
//=============================================================================
void turn_lights(bool on)
{
    2b74:	b510      	push	{r4, lr}
	if (on)
    2b76:	2800      	cmp	r0, #0
    2b78:	d103      	bne.n	2b82 <turn_lights+0xe>
	{
		set_led_bright_perthousand(light_state.led_max_bright);
	}
	else
	{
		set_led_bright_perthousand(0);
    2b7a:	2000      	movs	r0, #0
    2b7c:	4b03      	ldr	r3, [pc, #12]	; (2b8c <turn_lights+0x18>)
    2b7e:	4798      	blx	r3
	}
}
    2b80:	bd10      	pop	{r4, pc}
		set_led_bright_perthousand(light_state.led_max_bright);
    2b82:	4b03      	ldr	r3, [pc, #12]	; (2b90 <turn_lights+0x1c>)
    2b84:	88d8      	ldrh	r0, [r3, #6]
    2b86:	4b01      	ldr	r3, [pc, #4]	; (2b8c <turn_lights+0x18>)
    2b88:	4798      	blx	r3
    2b8a:	e7f9      	b.n	2b80 <turn_lights+0xc>
    2b8c:	00001c4d 	.word	0x00001c4d
    2b90:	2000017c 	.word	0x2000017c

00002b94 <drive_light>:
{
    2b94:	b510      	push	{r4, lr}
	if (batt_reached_low_power)
    2b96:	4b25      	ldr	r3, [pc, #148]	; (2c2c <drive_light+0x98>)
    2b98:	781b      	ldrb	r3, [r3, #0]
    2b9a:	2b00      	cmp	r3, #0
    2b9c:	d128      	bne.n	2bf0 <drive_light+0x5c>
	if (light_state.mode == E_LIGHT_ON)
    2b9e:	4b24      	ldr	r3, [pc, #144]	; (2c30 <drive_light+0x9c>)
    2ba0:	781b      	ldrb	r3, [r3, #0]
    2ba2:	2b01      	cmp	r3, #1
    2ba4:	d027      	beq.n	2bf6 <drive_light+0x62>
	else if (light_state.mode == E_LIGHT_OFF)
    2ba6:	2b00      	cmp	r3, #0
    2ba8:	d029      	beq.n	2bfe <drive_light+0x6a>
		if (tick_elapsed(led_timer) % ((light_state.freq * 5) + 9) == 0)
    2baa:	4b22      	ldr	r3, [pc, #136]	; (2c34 <drive_light+0xa0>)
    2bac:	6818      	ldr	r0, [r3, #0]
    2bae:	4b22      	ldr	r3, [pc, #136]	; (2c38 <drive_light+0xa4>)
    2bb0:	4798      	blx	r3
    2bb2:	4b1f      	ldr	r3, [pc, #124]	; (2c30 <drive_light+0x9c>)
    2bb4:	785b      	ldrb	r3, [r3, #1]
    2bb6:	0099      	lsls	r1, r3, #2
    2bb8:	18c9      	adds	r1, r1, r3
    2bba:	3109      	adds	r1, #9
    2bbc:	4b1f      	ldr	r3, [pc, #124]	; (2c3c <drive_light+0xa8>)
    2bbe:	4798      	blx	r3
    2bc0:	2900      	cmp	r1, #0
    2bc2:	d11f      	bne.n	2c04 <drive_light+0x70>
			led_timer = get_tick();
    2bc4:	4b1e      	ldr	r3, [pc, #120]	; (2c40 <drive_light+0xac>)
    2bc6:	4798      	blx	r3
    2bc8:	4b1a      	ldr	r3, [pc, #104]	; (2c34 <drive_light+0xa0>)
    2bca:	6018      	str	r0, [r3, #0]
			if (light_state.mode == E_LIGHT_FADE)
    2bcc:	4b18      	ldr	r3, [pc, #96]	; (2c30 <drive_light+0x9c>)
    2bce:	781b      	ldrb	r3, [r3, #0]
    2bd0:	2b02      	cmp	r3, #2
    2bd2:	d018      	beq.n	2c06 <drive_light+0x72>
			if (light_state.mode == E_LIGHT_STROBE)
    2bd4:	4b16      	ldr	r3, [pc, #88]	; (2c30 <drive_light+0x9c>)
    2bd6:	781b      	ldrb	r3, [r3, #0]
    2bd8:	2b03      	cmp	r3, #3
    2bda:	d113      	bne.n	2c04 <drive_light+0x70>
				if (strobe_counter > LIGHT_MAX/2)
    2bdc:	4b19      	ldr	r3, [pc, #100]	; (2c44 <drive_light+0xb0>)
    2bde:	681b      	ldr	r3, [r3, #0]
    2be0:	22dc      	movs	r2, #220	; 0xdc
    2be2:	32ff      	adds	r2, #255	; 0xff
    2be4:	4293      	cmp	r3, r2
    2be6:	dc15      	bgt.n	2c14 <drive_light+0x80>
					strobe_counter++;
    2be8:	3301      	adds	r3, #1
    2bea:	4a16      	ldr	r2, [pc, #88]	; (2c44 <drive_light+0xb0>)
    2bec:	6013      	str	r3, [r2, #0]
}
    2bee:	e009      	b.n	2c04 <drive_light+0x70>
		manage_low_power_light();
    2bf0:	4b15      	ldr	r3, [pc, #84]	; (2c48 <drive_light+0xb4>)
    2bf2:	4798      	blx	r3
    2bf4:	e7d3      	b.n	2b9e <drive_light+0xa>
		turn_lights(true);
    2bf6:	2001      	movs	r0, #1
    2bf8:	4b14      	ldr	r3, [pc, #80]	; (2c4c <drive_light+0xb8>)
    2bfa:	4798      	blx	r3
    2bfc:	e002      	b.n	2c04 <drive_light+0x70>
		turn_lights(false);
    2bfe:	2000      	movs	r0, #0
    2c00:	4b12      	ldr	r3, [pc, #72]	; (2c4c <drive_light+0xb8>)
    2c02:	4798      	blx	r3
}
    2c04:	bd10      	pop	{r4, pc}
				set_led_bright_perthousand(light_state.led_bright);
    2c06:	4b0a      	ldr	r3, [pc, #40]	; (2c30 <drive_light+0x9c>)
    2c08:	8898      	ldrh	r0, [r3, #4]
    2c0a:	4b11      	ldr	r3, [pc, #68]	; (2c50 <drive_light+0xbc>)
    2c0c:	4798      	blx	r3
				update_bright();
    2c0e:	4b11      	ldr	r3, [pc, #68]	; (2c54 <drive_light+0xc0>)
    2c10:	4798      	blx	r3
    2c12:	e7df      	b.n	2bd4 <drive_light+0x40>
					strobe_counter = 0;
    2c14:	2200      	movs	r2, #0
    2c16:	4b0b      	ldr	r3, [pc, #44]	; (2c44 <drive_light+0xb0>)
    2c18:	601a      	str	r2, [r3, #0]
					light_state.led_rising = !light_state.led_rising;
    2c1a:	4b05      	ldr	r3, [pc, #20]	; (2c30 <drive_light+0x9c>)
    2c1c:	7a98      	ldrb	r0, [r3, #10]
    2c1e:	3201      	adds	r2, #1
    2c20:	4050      	eors	r0, r2
    2c22:	7298      	strb	r0, [r3, #10]
					turn_lights(light_state.led_rising);
    2c24:	4b09      	ldr	r3, [pc, #36]	; (2c4c <drive_light+0xb8>)
    2c26:	4798      	blx	r3
    2c28:	e7ec      	b.n	2c04 <drive_light+0x70>
    2c2a:	46c0      	nop			; (mov r8, r8)
    2c2c:	2000016c 	.word	0x2000016c
    2c30:	2000017c 	.word	0x2000017c
    2c34:	200001b8 	.word	0x200001b8
    2c38:	00001eed 	.word	0x00001eed
    2c3c:	00003165 	.word	0x00003165
    2c40:	00001ee1 	.word	0x00001ee1
    2c44:	200001bc 	.word	0x200001bc
    2c48:	00002ab1 	.word	0x00002ab1
    2c4c:	00002b75 	.word	0x00002b75
    2c50:	00001c4d 	.word	0x00001c4d
    2c54:	00002b25 	.word	0x00002b25

00002c58 <bt_poll_check>:

//=============================================================================
//! \brief Check the BT coonection using a logic related to messages of polling
//=============================================================================
void bt_poll_check()
{
    2c58:	b510      	push	{r4, lr}
	// The poll_requested flag turns false into OCTO_USART.c file
	//when receive the poll response message, when BT connects and is turned off after lose connection
	// If run this function and it stills true, the board didn't received the response
	if (poll_requested)
    2c5a:	4b0b      	ldr	r3, [pc, #44]	; (2c88 <bt_poll_check+0x30>)
    2c5c:	781b      	ldrb	r3, [r3, #0]
    2c5e:	2b00      	cmp	r3, #0
    2c60:	d103      	bne.n	2c6a <bt_poll_check+0x12>
		port_pin_toggle_output_level(LED_RED_PIN);
		port_pin_toggle_output_level(LED_GREEN_PIN);
	}
	else
	{
		poll_requested = true;
    2c62:	2201      	movs	r2, #1
    2c64:	4b08      	ldr	r3, [pc, #32]	; (2c88 <bt_poll_check+0x30>)
    2c66:	701a      	strb	r2, [r3, #0]
	}
}
    2c68:	bd10      	pop	{r4, pc}
		bt_connected = false;
    2c6a:	2200      	movs	r2, #0
    2c6c:	4b07      	ldr	r3, [pc, #28]	; (2c8c <bt_poll_check+0x34>)
    2c6e:	701a      	strb	r2, [r3, #0]
		change_bt_enable(false);
    2c70:	2000      	movs	r0, #0
    2c72:	4b07      	ldr	r3, [pc, #28]	; (2c90 <bt_poll_check+0x38>)
    2c74:	4798      	blx	r3
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    2c76:	4b07      	ldr	r3, [pc, #28]	; (2c94 <bt_poll_check+0x3c>)
    2c78:	2280      	movs	r2, #128	; 0x80
    2c7a:	01d2      	lsls	r2, r2, #7
    2c7c:	61da      	str	r2, [r3, #28]
    2c7e:	2280      	movs	r2, #128	; 0x80
    2c80:	0212      	lsls	r2, r2, #8
    2c82:	61da      	str	r2, [r3, #28]
    2c84:	e7f0      	b.n	2c68 <bt_poll_check+0x10>
    2c86:	46c0      	nop			; (mov r8, r8)
    2c88:	200001c4 	.word	0x200001c4
    2c8c:	20000280 	.word	0x20000280
    2c90:	00002269 	.word	0x00002269
    2c94:	41004400 	.word	0x41004400

00002c98 <get_battery_percent>:

//=============================================================================
//! \brief Get the Battery info
//=============================================================================
uint32_t get_battery_percent()
{
    2c98:	b500      	push	{lr}
    2c9a:	b083      	sub	sp, #12
	uint32_t adc_reading = 0, reading = 0;
    2c9c:	2300      	movs	r3, #0
    2c9e:	9301      	str	r3, [sp, #4]
    2ca0:	9300      	str	r3, [sp, #0]
	uint32_t batt_value = 0;
	
	configure_adc_VMPPT();
    2ca2:	4b20      	ldr	r3, [pc, #128]	; (2d24 <get_battery_percent+0x8c>)
    2ca4:	4798      	blx	r3
	
	get_value_VMPPT(&adc_reading, &reading);
    2ca6:	4669      	mov	r1, sp
    2ca8:	a801      	add	r0, sp, #4
    2caa:	4b1f      	ldr	r3, [pc, #124]	; (2d28 <get_battery_percent+0x90>)
    2cac:	4798      	blx	r3
	
	if (reading > BATT_MAX)
    2cae:	4b1f      	ldr	r3, [pc, #124]	; (2d2c <get_battery_percent+0x94>)
    2cb0:	9a00      	ldr	r2, [sp, #0]
    2cb2:	429a      	cmp	r2, r3
    2cb4:	d914      	bls.n	2ce0 <get_battery_percent+0x48>
	{
		if (!batt_reached_max)
    2cb6:	4b1e      	ldr	r3, [pc, #120]	; (2d30 <get_battery_percent+0x98>)
    2cb8:	781b      	ldrb	r3, [r3, #0]
			pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
			port_pin_set_config(GAUGE_CC_ENABLE_PIN, &pin_conf);
			port_pin_set_output_level(GAUGE_CC_ENABLE_PIN, GAUGE_CC_ENABLE_ACTIVE);
		}
		
		batt_value = 100;
    2cba:	2064      	movs	r0, #100	; 0x64
		if (!batt_reached_max)
    2cbc:	2b00      	cmp	r3, #0
    2cbe:	d001      	beq.n	2cc4 <get_battery_percent+0x2c>
		}
	}
	
	
	return batt_value;
}
    2cc0:	b003      	add	sp, #12
    2cc2:	bd00      	pop	{pc}
			batt_reached_max = true;
    2cc4:	3301      	adds	r3, #1
    2cc6:	4a1a      	ldr	r2, [pc, #104]	; (2d30 <get_battery_percent+0x98>)
    2cc8:	7013      	strb	r3, [r2, #0]
			pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2cca:	491a      	ldr	r1, [pc, #104]	; (2d34 <get_battery_percent+0x9c>)
    2ccc:	700b      	strb	r3, [r1, #0]
			port_pin_set_config(GAUGE_CC_ENABLE_PIN, &pin_conf);
    2cce:	385a      	subs	r0, #90	; 0x5a
    2cd0:	4b19      	ldr	r3, [pc, #100]	; (2d38 <get_battery_percent+0xa0>)
    2cd2:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    2cd4:	2280      	movs	r2, #128	; 0x80
    2cd6:	00d2      	lsls	r2, r2, #3
    2cd8:	4b18      	ldr	r3, [pc, #96]	; (2d3c <get_battery_percent+0xa4>)
    2cda:	619a      	str	r2, [r3, #24]
		batt_value = 100;
    2cdc:	2064      	movs	r0, #100	; 0x64
    2cde:	e7ef      	b.n	2cc0 <get_battery_percent+0x28>
		if (batt_reached_max)
    2ce0:	4b13      	ldr	r3, [pc, #76]	; (2d30 <get_battery_percent+0x98>)
    2ce2:	781b      	ldrb	r3, [r3, #0]
    2ce4:	2b00      	cmp	r3, #0
    2ce6:	d10e      	bne.n	2d06 <get_battery_percent+0x6e>
		if (reading < BATT_MIN)
    2ce8:	9b00      	ldr	r3, [sp, #0]
    2cea:	4a15      	ldr	r2, [pc, #84]	; (2d40 <get_battery_percent+0xa8>)
			batt_value = 0;
    2cec:	2000      	movs	r0, #0
		if (reading < BATT_MIN)
    2cee:	4293      	cmp	r3, r2
    2cf0:	d9e6      	bls.n	2cc0 <get_battery_percent+0x28>
			batt_value = ((reading-BATT_MIN) * 100) / (BATT_MAX - BATT_MIN);
    2cf2:	3064      	adds	r0, #100	; 0x64
    2cf4:	4358      	muls	r0, r3
    2cf6:	4b13      	ldr	r3, [pc, #76]	; (2d44 <get_battery_percent+0xac>)
    2cf8:	469c      	mov	ip, r3
    2cfa:	4460      	add	r0, ip
    2cfc:	2182      	movs	r1, #130	; 0x82
    2cfe:	00c9      	lsls	r1, r1, #3
    2d00:	4b11      	ldr	r3, [pc, #68]	; (2d48 <get_battery_percent+0xb0>)
    2d02:	4798      	blx	r3
    2d04:	e7dc      	b.n	2cc0 <get_battery_percent+0x28>
			batt_reached_max = false;
    2d06:	2200      	movs	r2, #0
    2d08:	4b09      	ldr	r3, [pc, #36]	; (2d30 <get_battery_percent+0x98>)
    2d0a:	701a      	strb	r2, [r3, #0]
			pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2d0c:	4909      	ldr	r1, [pc, #36]	; (2d34 <get_battery_percent+0x9c>)
    2d0e:	2301      	movs	r3, #1
    2d10:	700b      	strb	r3, [r1, #0]
			port_pin_set_config(GAUGE_CC_ENABLE_PIN, &pin_conf);
    2d12:	200a      	movs	r0, #10
    2d14:	4b08      	ldr	r3, [pc, #32]	; (2d38 <get_battery_percent+0xa0>)
    2d16:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    2d18:	2280      	movs	r2, #128	; 0x80
    2d1a:	00d2      	lsls	r2, r2, #3
    2d1c:	4b07      	ldr	r3, [pc, #28]	; (2d3c <get_battery_percent+0xa4>)
    2d1e:	615a      	str	r2, [r3, #20]
    2d20:	e7e2      	b.n	2ce8 <get_battery_percent+0x50>
    2d22:	46c0      	nop			; (mov r8, r8)
    2d24:	00001b15 	.word	0x00001b15
    2d28:	00001b79 	.word	0x00001b79
    2d2c:	000010f4 	.word	0x000010f4
    2d30:	20000178 	.word	0x20000178
    2d34:	200001d8 	.word	0x200001d8
    2d38:	000009cd 	.word	0x000009cd
    2d3c:	41004400 	.word	0x41004400
    2d40:	00000ce3 	.word	0x00000ce3
    2d44:	fffaf6f0 	.word	0xfffaf6f0
    2d48:	00003059 	.word	0x00003059

00002d4c <get_gauge_percent>:

//=============================================================================
//! \brief Get the Gas Gauge's Battery percent info
//=============================================================================
uint32_t get_gauge_percent()
{
    2d4c:	b500      	push	{lr}
    2d4e:	b083      	sub	sp, #12
	uint32_t i2c_reading = 0, percent = 0;
    2d50:	2300      	movs	r3, #0
    2d52:	9301      	str	r3, [sp, #4]
    2d54:	9300      	str	r3, [sp, #0]
	
	gas_gauge_read(&i2c_reading, &percent);
    2d56:	4669      	mov	r1, sp
    2d58:	a801      	add	r0, sp, #4
    2d5a:	4b02      	ldr	r3, [pc, #8]	; (2d64 <get_gauge_percent+0x18>)
    2d5c:	4798      	blx	r3
	
	return percent;
    2d5e:	9800      	ldr	r0, [sp, #0]
    2d60:	b003      	add	sp, #12
    2d62:	bd00      	pop	{pc}
    2d64:	00001e11 	.word	0x00001e11

00002d68 <configure_OCTO_peripheral>:
{
    2d68:	b570      	push	{r4, r5, r6, lr}
	system_board_init_for_battery_measure();
    2d6a:	4b27      	ldr	r3, [pc, #156]	; (2e08 <configure_OCTO_peripheral+0xa0>)
    2d6c:	4798      	blx	r3
	delay_init();
    2d6e:	4b27      	ldr	r3, [pc, #156]	; (2e0c <configure_OCTO_peripheral+0xa4>)
    2d70:	4798      	blx	r3
	cpu_irq_enable();
    2d72:	2501      	movs	r5, #1
    2d74:	4b26      	ldr	r3, [pc, #152]	; (2e10 <configure_OCTO_peripheral+0xa8>)
    2d76:	701d      	strb	r5, [r3, #0]
    2d78:	f3bf 8f5f 	dmb	sy
    2d7c:	b662      	cpsie	i
	battery_level = 0;
    2d7e:	4e25      	ldr	r6, [pc, #148]	; (2e14 <configure_OCTO_peripheral+0xac>)
    2d80:	2400      	movs	r4, #0
    2d82:	6034      	str	r4, [r6, #0]
	bcap_touch_counter = 0;
    2d84:	4b24      	ldr	r3, [pc, #144]	; (2e18 <configure_OCTO_peripheral+0xb0>)
    2d86:	601c      	str	r4, [r3, #0]
	bcap_notouch_counter = 0;
    2d88:	4b24      	ldr	r3, [pc, #144]	; (2e1c <configure_OCTO_peripheral+0xb4>)
    2d8a:	601c      	str	r4, [r3, #0]
	strobe_counter = 0;
    2d8c:	4b24      	ldr	r3, [pc, #144]	; (2e20 <configure_OCTO_peripheral+0xb8>)
    2d8e:	601c      	str	r4, [r3, #0]
	poll_requested = false;
    2d90:	4b24      	ldr	r3, [pc, #144]	; (2e24 <configure_OCTO_peripheral+0xbc>)
    2d92:	701c      	strb	r4, [r3, #0]
	low_power_update_app = false;
    2d94:	4b24      	ldr	r3, [pc, #144]	; (2e28 <configure_OCTO_peripheral+0xc0>)
    2d96:	701c      	strb	r4, [r3, #0]
	bcap_enable = true;
    2d98:	4b24      	ldr	r3, [pc, #144]	; (2e2c <configure_OCTO_peripheral+0xc4>)
    2d9a:	701d      	strb	r5, [r3, #0]
	bcap_update_app = false;
    2d9c:	4b24      	ldr	r3, [pc, #144]	; (2e30 <configure_OCTO_peripheral+0xc8>)
    2d9e:	701c      	strb	r4, [r3, #0]
	batt_reached_max = false;
    2da0:	4b24      	ldr	r3, [pc, #144]	; (2e34 <configure_OCTO_peripheral+0xcc>)
    2da2:	701c      	strb	r4, [r3, #0]
	batt_reached_low_power = false;
    2da4:	4b24      	ldr	r3, [pc, #144]	; (2e38 <configure_OCTO_peripheral+0xd0>)
    2da6:	701c      	strb	r4, [r3, #0]
	sos_mode = false;
    2da8:	4b24      	ldr	r3, [pc, #144]	; (2e3c <configure_OCTO_peripheral+0xd4>)
    2daa:	701c      	strb	r4, [r3, #0]
	activated = false;
    2dac:	4b24      	ldr	r3, [pc, #144]	; (2e40 <configure_OCTO_peripheral+0xd8>)
    2dae:	701c      	strb	r4, [r3, #0]
	configure_dac();
    2db0:	4b24      	ldr	r3, [pc, #144]	; (2e44 <configure_OCTO_peripheral+0xdc>)
    2db2:	4798      	blx	r3
	light_state.mode = E_LIGHT_OFF;
    2db4:	4b24      	ldr	r3, [pc, #144]	; (2e48 <configure_OCTO_peripheral+0xe0>)
    2db6:	701c      	strb	r4, [r3, #0]
	light_state.freq = E_LIGHT_MEDIUM;
    2db8:	2203      	movs	r2, #3
    2dba:	705a      	strb	r2, [r3, #1]
	light_state.low_power_threshold = 10;
    2dbc:	3207      	adds	r2, #7
    2dbe:	805a      	strh	r2, [r3, #2]
	light_state.led_rising = false;
    2dc0:	729c      	strb	r4, [r3, #10]
	light_state.led_bright = LIGHT_MIN;
    2dc2:	325a      	adds	r2, #90	; 0x5a
    2dc4:	809a      	strh	r2, [r3, #4]
	light_state.led_max_bright = LIGHT_MAX/2;
    2dc6:	22dc      	movs	r2, #220	; 0xdc
    2dc8:	32ff      	adds	r2, #255	; 0xff
    2dca:	80da      	strh	r2, [r3, #6]
	light_state.led_low_power_time = LOW_POWER_LIGHT_ON_TIME;
    2dcc:	4a1f      	ldr	r2, [pc, #124]	; (2e4c <configure_OCTO_peripheral+0xe4>)
    2dce:	811a      	strh	r2, [r3, #8]
	light_bcap_previous_mode = E_LIGHT_ON;
    2dd0:	4b1f      	ldr	r3, [pc, #124]	; (2e50 <configure_OCTO_peripheral+0xe8>)
    2dd2:	701d      	strb	r5, [r3, #0]
	fade_bright_step = light_state.led_max_bright/LIGHT_MIN;
    2dd4:	2204      	movs	r2, #4
    2dd6:	4b1f      	ldr	r3, [pc, #124]	; (2e54 <configure_OCTO_peripheral+0xec>)
    2dd8:	801a      	strh	r2, [r3, #0]
	battery_level = get_battery_percent();
    2dda:	4b1f      	ldr	r3, [pc, #124]	; (2e58 <configure_OCTO_peripheral+0xf0>)
    2ddc:	4798      	blx	r3
    2dde:	6030      	str	r0, [r6, #0]
	system_board_init();
    2de0:	4b1e      	ldr	r3, [pc, #120]	; (2e5c <configure_OCTO_peripheral+0xf4>)
    2de2:	4798      	blx	r3
	configure_gas_gauge(battery_level);
    2de4:	6830      	ldr	r0, [r6, #0]
    2de6:	4b1e      	ldr	r3, [pc, #120]	; (2e60 <configure_OCTO_peripheral+0xf8>)
    2de8:	4798      	blx	r3
	battery_level = get_gauge_percent();
    2dea:	4b1e      	ldr	r3, [pc, #120]	; (2e64 <configure_OCTO_peripheral+0xfc>)
    2dec:	4798      	blx	r3
    2dee:	6030      	str	r0, [r6, #0]
	configure_usart();
    2df0:	4b1d      	ldr	r3, [pc, #116]	; (2e68 <configure_OCTO_peripheral+0x100>)
    2df2:	4798      	blx	r3
	configure_usart_callbacks();
    2df4:	4b1d      	ldr	r3, [pc, #116]	; (2e6c <configure_OCTO_peripheral+0x104>)
    2df6:	4798      	blx	r3
	configure_rtc_count();
    2df8:	4b1d      	ldr	r3, [pc, #116]	; (2e70 <configure_OCTO_peripheral+0x108>)
    2dfa:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    2dfc:	4b1d      	ldr	r3, [pc, #116]	; (2e74 <configure_OCTO_peripheral+0x10c>)
    2dfe:	701c      	strb	r4, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2e00:	705d      	strb	r5, [r3, #1]
	config->powersave  = false;
    2e02:	709c      	strb	r4, [r3, #2]
}
    2e04:	bd70      	pop	{r4, r5, r6, pc}
    2e06:	46c0      	nop			; (mov r8, r8)
    2e08:	000022a1 	.word	0x000022a1
    2e0c:	00000105 	.word	0x00000105
    2e10:	20000012 	.word	0x20000012
    2e14:	20000174 	.word	0x20000174
    2e18:	20000164 	.word	0x20000164
    2e1c:	200001d0 	.word	0x200001d0
    2e20:	200001bc 	.word	0x200001bc
    2e24:	200001c4 	.word	0x200001c4
    2e28:	20000188 	.word	0x20000188
    2e2c:	20000161 	.word	0x20000161
    2e30:	200001c5 	.word	0x200001c5
    2e34:	20000178 	.word	0x20000178
    2e38:	2000016c 	.word	0x2000016c
    2e3c:	200001b4 	.word	0x200001b4
    2e40:	2000016d 	.word	0x2000016d
    2e44:	00001c15 	.word	0x00001c15
    2e48:	2000017c 	.word	0x2000017c
    2e4c:	00007530 	.word	0x00007530
    2e50:	20000160 	.word	0x20000160
    2e54:	200001c6 	.word	0x200001c6
    2e58:	00002c99 	.word	0x00002c99
    2e5c:	00002225 	.word	0x00002225
    2e60:	00001d65 	.word	0x00001d65
    2e64:	00002d4d 	.word	0x00002d4d
    2e68:	00001f31 	.word	0x00001f31
    2e6c:	00001fe5 	.word	0x00001fe5
    2e70:	00001e7d 	.word	0x00001e7d
    2e74:	200001d8 	.word	0x200001d8

00002e78 <main>:
{
    2e78:	b570      	push	{r4, r5, r6, lr}
    2e7a:	b082      	sub	sp, #8
	system_init();
    2e7c:	4b55      	ldr	r3, [pc, #340]	; (2fd4 <main+0x15c>)
    2e7e:	4798      	blx	r3
	configure_OCTO_peripheral();
    2e80:	4b55      	ldr	r3, [pc, #340]	; (2fd8 <main+0x160>)
    2e82:	4798      	blx	r3
		drive_light();
    2e84:	4e55      	ldr	r6, [pc, #340]	; (2fdc <main+0x164>)
		bt_usart_receive_job();
    2e86:	4d56      	ldr	r5, [pc, #344]	; (2fe0 <main+0x168>)
		if (tick_elapsed(bt_timer) % 2000 == 0) //1000 ~= 2 secs
    2e88:	4c56      	ldr	r4, [pc, #344]	; (2fe4 <main+0x16c>)
    2e8a:	e029      	b.n	2ee0 <main+0x68>
					enter_low_power_mode();
    2e8c:	4b56      	ldr	r3, [pc, #344]	; (2fe8 <main+0x170>)
    2e8e:	4798      	blx	r3
    2e90:	e044      	b.n	2f1c <main+0xa4>
			else if (batt_reached_low_power)
    2e92:	4b56      	ldr	r3, [pc, #344]	; (2fec <main+0x174>)
    2e94:	781b      	ldrb	r3, [r3, #0]
    2e96:	2b00      	cmp	r3, #0
    2e98:	d040      	beq.n	2f1c <main+0xa4>
				exit_low_power_mode();
    2e9a:	4b55      	ldr	r3, [pc, #340]	; (2ff0 <main+0x178>)
    2e9c:	4798      	blx	r3
    2e9e:	e03d      	b.n	2f1c <main+0xa4>
					low_power_update_app = false;
    2ea0:	2200      	movs	r2, #0
    2ea2:	4b54      	ldr	r3, [pc, #336]	; (2ff4 <main+0x17c>)
    2ea4:	701a      	strb	r2, [r3, #0]
					sprintf(light_update, "<U;P=%1u;>", batt_reached_low_power);
    2ea6:	4b51      	ldr	r3, [pc, #324]	; (2fec <main+0x174>)
    2ea8:	781a      	ldrb	r2, [r3, #0]
    2eaa:	4953      	ldr	r1, [pc, #332]	; (2ff8 <main+0x180>)
    2eac:	4668      	mov	r0, sp
    2eae:	4b53      	ldr	r3, [pc, #332]	; (2ffc <main+0x184>)
    2eb0:	4798      	blx	r3
					bt_usart_write_job(light_update, 8);
    2eb2:	2108      	movs	r1, #8
    2eb4:	4668      	mov	r0, sp
    2eb6:	4b52      	ldr	r3, [pc, #328]	; (3000 <main+0x188>)
    2eb8:	4798      	blx	r3
    2eba:	e00b      	b.n	2ed4 <main+0x5c>
					get_battery_percent();
    2ebc:	4b51      	ldr	r3, [pc, #324]	; (3004 <main+0x18c>)
    2ebe:	4798      	blx	r3
					sprintf(buf, "<B=%3u;>", battery_level);
    2ec0:	4b51      	ldr	r3, [pc, #324]	; (3008 <main+0x190>)
    2ec2:	681a      	ldr	r2, [r3, #0]
    2ec4:	4951      	ldr	r1, [pc, #324]	; (300c <main+0x194>)
    2ec6:	4668      	mov	r0, sp
    2ec8:	4b4c      	ldr	r3, [pc, #304]	; (2ffc <main+0x184>)
    2eca:	4798      	blx	r3
					bt_usart_write_job(buf, 8); //13 //20
    2ecc:	2108      	movs	r1, #8
    2ece:	4668      	mov	r0, sp
    2ed0:	4b4b      	ldr	r3, [pc, #300]	; (3000 <main+0x188>)
    2ed2:	4798      	blx	r3
				bt_poll_check();
    2ed4:	4b4e      	ldr	r3, [pc, #312]	; (3010 <main+0x198>)
    2ed6:	4798      	blx	r3
		if (bcap_enable)
    2ed8:	4b4e      	ldr	r3, [pc, #312]	; (3014 <main+0x19c>)
    2eda:	781b      	ldrb	r3, [r3, #0]
    2edc:	2b00      	cmp	r3, #0
    2ede:	d142      	bne.n	2f66 <main+0xee>
		drive_light();
    2ee0:	47b0      	blx	r6
		bt_usart_receive_job();
    2ee2:	47a8      	blx	r5
		if (tick_elapsed(bt_timer) % 2000 == 0) //1000 ~= 2 secs
    2ee4:	6820      	ldr	r0, [r4, #0]
    2ee6:	4b4c      	ldr	r3, [pc, #304]	; (3018 <main+0x1a0>)
    2ee8:	4798      	blx	r3
    2eea:	21fa      	movs	r1, #250	; 0xfa
    2eec:	00c9      	lsls	r1, r1, #3
    2eee:	4b4b      	ldr	r3, [pc, #300]	; (301c <main+0x1a4>)
    2ef0:	4798      	blx	r3
    2ef2:	2900      	cmp	r1, #0
    2ef4:	d1f0      	bne.n	2ed8 <main+0x60>
			bt_timer = get_tick();
    2ef6:	4b4a      	ldr	r3, [pc, #296]	; (3020 <main+0x1a8>)
    2ef8:	4798      	blx	r3
    2efa:	4b3a      	ldr	r3, [pc, #232]	; (2fe4 <main+0x16c>)
    2efc:	6018      	str	r0, [r3, #0]
			delay_ms(1);
    2efe:	2001      	movs	r0, #1
    2f00:	4b48      	ldr	r3, [pc, #288]	; (3024 <main+0x1ac>)
    2f02:	4798      	blx	r3
			battery_level = get_gauge_percent();
    2f04:	4b48      	ldr	r3, [pc, #288]	; (3028 <main+0x1b0>)
    2f06:	4798      	blx	r3
    2f08:	4b3f      	ldr	r3, [pc, #252]	; (3008 <main+0x190>)
    2f0a:	6018      	str	r0, [r3, #0]
			if (battery_level <= light_state.low_power_threshold)
    2f0c:	4b47      	ldr	r3, [pc, #284]	; (302c <main+0x1b4>)
    2f0e:	885b      	ldrh	r3, [r3, #2]
    2f10:	4298      	cmp	r0, r3
    2f12:	d8be      	bhi.n	2e92 <main+0x1a>
				if (!batt_reached_low_power)
    2f14:	4b35      	ldr	r3, [pc, #212]	; (2fec <main+0x174>)
    2f16:	781b      	ldrb	r3, [r3, #0]
    2f18:	2b00      	cmp	r3, #0
    2f1a:	d0b7      	beq.n	2e8c <main+0x14>
			if (bt_connected)
    2f1c:	4b44      	ldr	r3, [pc, #272]	; (3030 <main+0x1b8>)
    2f1e:	781b      	ldrb	r3, [r3, #0]
    2f20:	2b00      	cmp	r3, #0
    2f22:	d015      	beq.n	2f50 <main+0xd8>
				if (low_power_update_app)
    2f24:	4b33      	ldr	r3, [pc, #204]	; (2ff4 <main+0x17c>)
    2f26:	781b      	ldrb	r3, [r3, #0]
    2f28:	2b00      	cmp	r3, #0
    2f2a:	d1b9      	bne.n	2ea0 <main+0x28>
				else if (bcap_update_app)
    2f2c:	4b41      	ldr	r3, [pc, #260]	; (3034 <main+0x1bc>)
    2f2e:	781b      	ldrb	r3, [r3, #0]
    2f30:	2b00      	cmp	r3, #0
    2f32:	d0c3      	beq.n	2ebc <main+0x44>
					bcap_update_app = false;
    2f34:	2200      	movs	r2, #0
    2f36:	4b3f      	ldr	r3, [pc, #252]	; (3034 <main+0x1bc>)
    2f38:	701a      	strb	r2, [r3, #0]
					sprintf(light_update, "<U;L=%1u;>", light_state.mode);
    2f3a:	4b3c      	ldr	r3, [pc, #240]	; (302c <main+0x1b4>)
    2f3c:	781a      	ldrb	r2, [r3, #0]
    2f3e:	493e      	ldr	r1, [pc, #248]	; (3038 <main+0x1c0>)
    2f40:	4668      	mov	r0, sp
    2f42:	4b2e      	ldr	r3, [pc, #184]	; (2ffc <main+0x184>)
    2f44:	4798      	blx	r3
					bt_usart_write_job(light_update, 8);
    2f46:	2108      	movs	r1, #8
    2f48:	4668      	mov	r0, sp
    2f4a:	4b2d      	ldr	r3, [pc, #180]	; (3000 <main+0x188>)
    2f4c:	4798      	blx	r3
    2f4e:	e7c1      	b.n	2ed4 <main+0x5c>
			} else if (poll_requested)
    2f50:	4b3a      	ldr	r3, [pc, #232]	; (303c <main+0x1c4>)
    2f52:	781b      	ldrb	r3, [r3, #0]
    2f54:	2b00      	cmp	r3, #0
    2f56:	d0bf      	beq.n	2ed8 <main+0x60>
				poll_requested = false;
    2f58:	2200      	movs	r2, #0
    2f5a:	4b38      	ldr	r3, [pc, #224]	; (303c <main+0x1c4>)
    2f5c:	701a      	strb	r2, [r3, #0]
				change_bt_enable(true);
    2f5e:	2001      	movs	r0, #1
    2f60:	4b37      	ldr	r3, [pc, #220]	; (3040 <main+0x1c8>)
    2f62:	4798      	blx	r3
    2f64:	e7b8      	b.n	2ed8 <main+0x60>
			if (tick_elapsed(bcap_timer) % 100 == 0)
    2f66:	4b37      	ldr	r3, [pc, #220]	; (3044 <main+0x1cc>)
    2f68:	6818      	ldr	r0, [r3, #0]
    2f6a:	4b2b      	ldr	r3, [pc, #172]	; (3018 <main+0x1a0>)
    2f6c:	4798      	blx	r3
    2f6e:	2164      	movs	r1, #100	; 0x64
    2f70:	4b2a      	ldr	r3, [pc, #168]	; (301c <main+0x1a4>)
    2f72:	4798      	blx	r3
    2f74:	2900      	cmp	r1, #0
    2f76:	d1b3      	bne.n	2ee0 <main+0x68>
				bcap_timer = get_tick();
    2f78:	4b29      	ldr	r3, [pc, #164]	; (3020 <main+0x1a8>)
    2f7a:	4798      	blx	r3
    2f7c:	4b31      	ldr	r3, [pc, #196]	; (3044 <main+0x1cc>)
    2f7e:	6018      	str	r0, [r3, #0]
				delay_ms(1);
    2f80:	2001      	movs	r0, #1
    2f82:	4b28      	ldr	r3, [pc, #160]	; (3024 <main+0x1ac>)
    2f84:	4798      	blx	r3
	}
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
    2f86:	4b30      	ldr	r3, [pc, #192]	; (3048 <main+0x1d0>)
    2f88:	6a1b      	ldr	r3, [r3, #32]
				if (ioport_get_pin_level(INPUT_BCAP_PIN) == INPUT_BCAP_ACTIVE)
    2f8a:	01db      	lsls	r3, r3, #7
    2f8c:	d51e      	bpl.n	2fcc <main+0x154>
					if (bcap_touch_counter < BCAP_THRESOLD_COUNTER * 2)
    2f8e:	4b2f      	ldr	r3, [pc, #188]	; (304c <main+0x1d4>)
    2f90:	681b      	ldr	r3, [r3, #0]
    2f92:	2b27      	cmp	r3, #39	; 0x27
    2f94:	d8a4      	bhi.n	2ee0 <main+0x68>
						bcap_touch_counter++;
    2f96:	3301      	adds	r3, #1
    2f98:	4a2c      	ldr	r2, [pc, #176]	; (304c <main+0x1d4>)
    2f9a:	6013      	str	r3, [r2, #0]
						if (bcap_touch_counter == BCAP_THRESOLD_COUNTER)
    2f9c:	2b14      	cmp	r3, #20
    2f9e:	d19f      	bne.n	2ee0 <main+0x68>
							if (bt_connected)
    2fa0:	4b23      	ldr	r3, [pc, #140]	; (3030 <main+0x1b8>)
    2fa2:	781b      	ldrb	r3, [r3, #0]
    2fa4:	2b00      	cmp	r3, #0
    2fa6:	d002      	beq.n	2fae <main+0x136>
								bcap_update_app = true;
    2fa8:	2201      	movs	r2, #1
    2faa:	4b22      	ldr	r3, [pc, #136]	; (3034 <main+0x1bc>)
    2fac:	701a      	strb	r2, [r3, #0]
							if (light_state.mode == E_LIGHT_OFF)
    2fae:	4b1f      	ldr	r3, [pc, #124]	; (302c <main+0x1b4>)
    2fb0:	781b      	ldrb	r3, [r3, #0]
    2fb2:	2b00      	cmp	r3, #0
    2fb4:	d104      	bne.n	2fc0 <main+0x148>
								change_light_mode(light_bcap_previous_mode);
    2fb6:	4b26      	ldr	r3, [pc, #152]	; (3050 <main+0x1d8>)
    2fb8:	7818      	ldrb	r0, [r3, #0]
    2fba:	4b26      	ldr	r3, [pc, #152]	; (3054 <main+0x1dc>)
    2fbc:	4798      	blx	r3
    2fbe:	e78f      	b.n	2ee0 <main+0x68>
								light_bcap_previous_mode = light_state.mode;
    2fc0:	4a23      	ldr	r2, [pc, #140]	; (3050 <main+0x1d8>)
    2fc2:	7013      	strb	r3, [r2, #0]
								change_light_mode(E_LIGHT_OFF);
    2fc4:	2000      	movs	r0, #0
    2fc6:	4b23      	ldr	r3, [pc, #140]	; (3054 <main+0x1dc>)
    2fc8:	4798      	blx	r3
    2fca:	e789      	b.n	2ee0 <main+0x68>
					bcap_touch_counter = 0;
    2fcc:	2200      	movs	r2, #0
    2fce:	4b1f      	ldr	r3, [pc, #124]	; (304c <main+0x1d4>)
    2fd0:	601a      	str	r2, [r3, #0]
    2fd2:	e785      	b.n	2ee0 <main+0x68>
    2fd4:	000028c5 	.word	0x000028c5
    2fd8:	00002d69 	.word	0x00002d69
    2fdc:	00002b95 	.word	0x00002b95
    2fe0:	00002031 	.word	0x00002031
    2fe4:	200001d4 	.word	0x200001d4
    2fe8:	00002a01 	.word	0x00002a01
    2fec:	2000016c 	.word	0x2000016c
    2ff0:	00002a69 	.word	0x00002a69
    2ff4:	20000188 	.word	0x20000188
    2ff8:	00003df8 	.word	0x00003df8
    2ffc:	000033f5 	.word	0x000033f5
    3000:	00002019 	.word	0x00002019
    3004:	00002c99 	.word	0x00002c99
    3008:	20000174 	.word	0x20000174
    300c:	00003e10 	.word	0x00003e10
    3010:	00002c59 	.word	0x00002c59
    3014:	20000161 	.word	0x20000161
    3018:	00001eed 	.word	0x00001eed
    301c:	00003165 	.word	0x00003165
    3020:	00001ee1 	.word	0x00001ee1
    3024:	00000171 	.word	0x00000171
    3028:	00002d4d 	.word	0x00002d4d
    302c:	2000017c 	.word	0x2000017c
    3030:	20000280 	.word	0x20000280
    3034:	200001c5 	.word	0x200001c5
    3038:	00003e04 	.word	0x00003e04
    303c:	200001c4 	.word	0x200001c4
    3040:	00002269 	.word	0x00002269
    3044:	200001c8 	.word	0x200001c8
    3048:	41004400 	.word	0x41004400
    304c:	20000164 	.word	0x20000164
    3050:	20000160 	.word	0x20000160
    3054:	000029b1 	.word	0x000029b1

00003058 <__udivsi3>:
    3058:	2200      	movs	r2, #0
    305a:	0843      	lsrs	r3, r0, #1
    305c:	428b      	cmp	r3, r1
    305e:	d374      	bcc.n	314a <__udivsi3+0xf2>
    3060:	0903      	lsrs	r3, r0, #4
    3062:	428b      	cmp	r3, r1
    3064:	d35f      	bcc.n	3126 <__udivsi3+0xce>
    3066:	0a03      	lsrs	r3, r0, #8
    3068:	428b      	cmp	r3, r1
    306a:	d344      	bcc.n	30f6 <__udivsi3+0x9e>
    306c:	0b03      	lsrs	r3, r0, #12
    306e:	428b      	cmp	r3, r1
    3070:	d328      	bcc.n	30c4 <__udivsi3+0x6c>
    3072:	0c03      	lsrs	r3, r0, #16
    3074:	428b      	cmp	r3, r1
    3076:	d30d      	bcc.n	3094 <__udivsi3+0x3c>
    3078:	22ff      	movs	r2, #255	; 0xff
    307a:	0209      	lsls	r1, r1, #8
    307c:	ba12      	rev	r2, r2
    307e:	0c03      	lsrs	r3, r0, #16
    3080:	428b      	cmp	r3, r1
    3082:	d302      	bcc.n	308a <__udivsi3+0x32>
    3084:	1212      	asrs	r2, r2, #8
    3086:	0209      	lsls	r1, r1, #8
    3088:	d065      	beq.n	3156 <__udivsi3+0xfe>
    308a:	0b03      	lsrs	r3, r0, #12
    308c:	428b      	cmp	r3, r1
    308e:	d319      	bcc.n	30c4 <__udivsi3+0x6c>
    3090:	e000      	b.n	3094 <__udivsi3+0x3c>
    3092:	0a09      	lsrs	r1, r1, #8
    3094:	0bc3      	lsrs	r3, r0, #15
    3096:	428b      	cmp	r3, r1
    3098:	d301      	bcc.n	309e <__udivsi3+0x46>
    309a:	03cb      	lsls	r3, r1, #15
    309c:	1ac0      	subs	r0, r0, r3
    309e:	4152      	adcs	r2, r2
    30a0:	0b83      	lsrs	r3, r0, #14
    30a2:	428b      	cmp	r3, r1
    30a4:	d301      	bcc.n	30aa <__udivsi3+0x52>
    30a6:	038b      	lsls	r3, r1, #14
    30a8:	1ac0      	subs	r0, r0, r3
    30aa:	4152      	adcs	r2, r2
    30ac:	0b43      	lsrs	r3, r0, #13
    30ae:	428b      	cmp	r3, r1
    30b0:	d301      	bcc.n	30b6 <__udivsi3+0x5e>
    30b2:	034b      	lsls	r3, r1, #13
    30b4:	1ac0      	subs	r0, r0, r3
    30b6:	4152      	adcs	r2, r2
    30b8:	0b03      	lsrs	r3, r0, #12
    30ba:	428b      	cmp	r3, r1
    30bc:	d301      	bcc.n	30c2 <__udivsi3+0x6a>
    30be:	030b      	lsls	r3, r1, #12
    30c0:	1ac0      	subs	r0, r0, r3
    30c2:	4152      	adcs	r2, r2
    30c4:	0ac3      	lsrs	r3, r0, #11
    30c6:	428b      	cmp	r3, r1
    30c8:	d301      	bcc.n	30ce <__udivsi3+0x76>
    30ca:	02cb      	lsls	r3, r1, #11
    30cc:	1ac0      	subs	r0, r0, r3
    30ce:	4152      	adcs	r2, r2
    30d0:	0a83      	lsrs	r3, r0, #10
    30d2:	428b      	cmp	r3, r1
    30d4:	d301      	bcc.n	30da <__udivsi3+0x82>
    30d6:	028b      	lsls	r3, r1, #10
    30d8:	1ac0      	subs	r0, r0, r3
    30da:	4152      	adcs	r2, r2
    30dc:	0a43      	lsrs	r3, r0, #9
    30de:	428b      	cmp	r3, r1
    30e0:	d301      	bcc.n	30e6 <__udivsi3+0x8e>
    30e2:	024b      	lsls	r3, r1, #9
    30e4:	1ac0      	subs	r0, r0, r3
    30e6:	4152      	adcs	r2, r2
    30e8:	0a03      	lsrs	r3, r0, #8
    30ea:	428b      	cmp	r3, r1
    30ec:	d301      	bcc.n	30f2 <__udivsi3+0x9a>
    30ee:	020b      	lsls	r3, r1, #8
    30f0:	1ac0      	subs	r0, r0, r3
    30f2:	4152      	adcs	r2, r2
    30f4:	d2cd      	bcs.n	3092 <__udivsi3+0x3a>
    30f6:	09c3      	lsrs	r3, r0, #7
    30f8:	428b      	cmp	r3, r1
    30fa:	d301      	bcc.n	3100 <__udivsi3+0xa8>
    30fc:	01cb      	lsls	r3, r1, #7
    30fe:	1ac0      	subs	r0, r0, r3
    3100:	4152      	adcs	r2, r2
    3102:	0983      	lsrs	r3, r0, #6
    3104:	428b      	cmp	r3, r1
    3106:	d301      	bcc.n	310c <__udivsi3+0xb4>
    3108:	018b      	lsls	r3, r1, #6
    310a:	1ac0      	subs	r0, r0, r3
    310c:	4152      	adcs	r2, r2
    310e:	0943      	lsrs	r3, r0, #5
    3110:	428b      	cmp	r3, r1
    3112:	d301      	bcc.n	3118 <__udivsi3+0xc0>
    3114:	014b      	lsls	r3, r1, #5
    3116:	1ac0      	subs	r0, r0, r3
    3118:	4152      	adcs	r2, r2
    311a:	0903      	lsrs	r3, r0, #4
    311c:	428b      	cmp	r3, r1
    311e:	d301      	bcc.n	3124 <__udivsi3+0xcc>
    3120:	010b      	lsls	r3, r1, #4
    3122:	1ac0      	subs	r0, r0, r3
    3124:	4152      	adcs	r2, r2
    3126:	08c3      	lsrs	r3, r0, #3
    3128:	428b      	cmp	r3, r1
    312a:	d301      	bcc.n	3130 <__udivsi3+0xd8>
    312c:	00cb      	lsls	r3, r1, #3
    312e:	1ac0      	subs	r0, r0, r3
    3130:	4152      	adcs	r2, r2
    3132:	0883      	lsrs	r3, r0, #2
    3134:	428b      	cmp	r3, r1
    3136:	d301      	bcc.n	313c <__udivsi3+0xe4>
    3138:	008b      	lsls	r3, r1, #2
    313a:	1ac0      	subs	r0, r0, r3
    313c:	4152      	adcs	r2, r2
    313e:	0843      	lsrs	r3, r0, #1
    3140:	428b      	cmp	r3, r1
    3142:	d301      	bcc.n	3148 <__udivsi3+0xf0>
    3144:	004b      	lsls	r3, r1, #1
    3146:	1ac0      	subs	r0, r0, r3
    3148:	4152      	adcs	r2, r2
    314a:	1a41      	subs	r1, r0, r1
    314c:	d200      	bcs.n	3150 <__udivsi3+0xf8>
    314e:	4601      	mov	r1, r0
    3150:	4152      	adcs	r2, r2
    3152:	4610      	mov	r0, r2
    3154:	4770      	bx	lr
    3156:	e7ff      	b.n	3158 <__udivsi3+0x100>
    3158:	b501      	push	{r0, lr}
    315a:	2000      	movs	r0, #0
    315c:	f000 f8f0 	bl	3340 <__aeabi_idiv0>
    3160:	bd02      	pop	{r1, pc}
    3162:	46c0      	nop			; (mov r8, r8)

00003164 <__aeabi_uidivmod>:
    3164:	2900      	cmp	r1, #0
    3166:	d0f7      	beq.n	3158 <__udivsi3+0x100>
    3168:	e776      	b.n	3058 <__udivsi3>
    316a:	4770      	bx	lr

0000316c <__divsi3>:
    316c:	4603      	mov	r3, r0
    316e:	430b      	orrs	r3, r1
    3170:	d47f      	bmi.n	3272 <__divsi3+0x106>
    3172:	2200      	movs	r2, #0
    3174:	0843      	lsrs	r3, r0, #1
    3176:	428b      	cmp	r3, r1
    3178:	d374      	bcc.n	3264 <__divsi3+0xf8>
    317a:	0903      	lsrs	r3, r0, #4
    317c:	428b      	cmp	r3, r1
    317e:	d35f      	bcc.n	3240 <__divsi3+0xd4>
    3180:	0a03      	lsrs	r3, r0, #8
    3182:	428b      	cmp	r3, r1
    3184:	d344      	bcc.n	3210 <__divsi3+0xa4>
    3186:	0b03      	lsrs	r3, r0, #12
    3188:	428b      	cmp	r3, r1
    318a:	d328      	bcc.n	31de <__divsi3+0x72>
    318c:	0c03      	lsrs	r3, r0, #16
    318e:	428b      	cmp	r3, r1
    3190:	d30d      	bcc.n	31ae <__divsi3+0x42>
    3192:	22ff      	movs	r2, #255	; 0xff
    3194:	0209      	lsls	r1, r1, #8
    3196:	ba12      	rev	r2, r2
    3198:	0c03      	lsrs	r3, r0, #16
    319a:	428b      	cmp	r3, r1
    319c:	d302      	bcc.n	31a4 <__divsi3+0x38>
    319e:	1212      	asrs	r2, r2, #8
    31a0:	0209      	lsls	r1, r1, #8
    31a2:	d065      	beq.n	3270 <__divsi3+0x104>
    31a4:	0b03      	lsrs	r3, r0, #12
    31a6:	428b      	cmp	r3, r1
    31a8:	d319      	bcc.n	31de <__divsi3+0x72>
    31aa:	e000      	b.n	31ae <__divsi3+0x42>
    31ac:	0a09      	lsrs	r1, r1, #8
    31ae:	0bc3      	lsrs	r3, r0, #15
    31b0:	428b      	cmp	r3, r1
    31b2:	d301      	bcc.n	31b8 <__divsi3+0x4c>
    31b4:	03cb      	lsls	r3, r1, #15
    31b6:	1ac0      	subs	r0, r0, r3
    31b8:	4152      	adcs	r2, r2
    31ba:	0b83      	lsrs	r3, r0, #14
    31bc:	428b      	cmp	r3, r1
    31be:	d301      	bcc.n	31c4 <__divsi3+0x58>
    31c0:	038b      	lsls	r3, r1, #14
    31c2:	1ac0      	subs	r0, r0, r3
    31c4:	4152      	adcs	r2, r2
    31c6:	0b43      	lsrs	r3, r0, #13
    31c8:	428b      	cmp	r3, r1
    31ca:	d301      	bcc.n	31d0 <__divsi3+0x64>
    31cc:	034b      	lsls	r3, r1, #13
    31ce:	1ac0      	subs	r0, r0, r3
    31d0:	4152      	adcs	r2, r2
    31d2:	0b03      	lsrs	r3, r0, #12
    31d4:	428b      	cmp	r3, r1
    31d6:	d301      	bcc.n	31dc <__divsi3+0x70>
    31d8:	030b      	lsls	r3, r1, #12
    31da:	1ac0      	subs	r0, r0, r3
    31dc:	4152      	adcs	r2, r2
    31de:	0ac3      	lsrs	r3, r0, #11
    31e0:	428b      	cmp	r3, r1
    31e2:	d301      	bcc.n	31e8 <__divsi3+0x7c>
    31e4:	02cb      	lsls	r3, r1, #11
    31e6:	1ac0      	subs	r0, r0, r3
    31e8:	4152      	adcs	r2, r2
    31ea:	0a83      	lsrs	r3, r0, #10
    31ec:	428b      	cmp	r3, r1
    31ee:	d301      	bcc.n	31f4 <__divsi3+0x88>
    31f0:	028b      	lsls	r3, r1, #10
    31f2:	1ac0      	subs	r0, r0, r3
    31f4:	4152      	adcs	r2, r2
    31f6:	0a43      	lsrs	r3, r0, #9
    31f8:	428b      	cmp	r3, r1
    31fa:	d301      	bcc.n	3200 <__divsi3+0x94>
    31fc:	024b      	lsls	r3, r1, #9
    31fe:	1ac0      	subs	r0, r0, r3
    3200:	4152      	adcs	r2, r2
    3202:	0a03      	lsrs	r3, r0, #8
    3204:	428b      	cmp	r3, r1
    3206:	d301      	bcc.n	320c <__divsi3+0xa0>
    3208:	020b      	lsls	r3, r1, #8
    320a:	1ac0      	subs	r0, r0, r3
    320c:	4152      	adcs	r2, r2
    320e:	d2cd      	bcs.n	31ac <__divsi3+0x40>
    3210:	09c3      	lsrs	r3, r0, #7
    3212:	428b      	cmp	r3, r1
    3214:	d301      	bcc.n	321a <__divsi3+0xae>
    3216:	01cb      	lsls	r3, r1, #7
    3218:	1ac0      	subs	r0, r0, r3
    321a:	4152      	adcs	r2, r2
    321c:	0983      	lsrs	r3, r0, #6
    321e:	428b      	cmp	r3, r1
    3220:	d301      	bcc.n	3226 <__divsi3+0xba>
    3222:	018b      	lsls	r3, r1, #6
    3224:	1ac0      	subs	r0, r0, r3
    3226:	4152      	adcs	r2, r2
    3228:	0943      	lsrs	r3, r0, #5
    322a:	428b      	cmp	r3, r1
    322c:	d301      	bcc.n	3232 <__divsi3+0xc6>
    322e:	014b      	lsls	r3, r1, #5
    3230:	1ac0      	subs	r0, r0, r3
    3232:	4152      	adcs	r2, r2
    3234:	0903      	lsrs	r3, r0, #4
    3236:	428b      	cmp	r3, r1
    3238:	d301      	bcc.n	323e <__divsi3+0xd2>
    323a:	010b      	lsls	r3, r1, #4
    323c:	1ac0      	subs	r0, r0, r3
    323e:	4152      	adcs	r2, r2
    3240:	08c3      	lsrs	r3, r0, #3
    3242:	428b      	cmp	r3, r1
    3244:	d301      	bcc.n	324a <__divsi3+0xde>
    3246:	00cb      	lsls	r3, r1, #3
    3248:	1ac0      	subs	r0, r0, r3
    324a:	4152      	adcs	r2, r2
    324c:	0883      	lsrs	r3, r0, #2
    324e:	428b      	cmp	r3, r1
    3250:	d301      	bcc.n	3256 <__divsi3+0xea>
    3252:	008b      	lsls	r3, r1, #2
    3254:	1ac0      	subs	r0, r0, r3
    3256:	4152      	adcs	r2, r2
    3258:	0843      	lsrs	r3, r0, #1
    325a:	428b      	cmp	r3, r1
    325c:	d301      	bcc.n	3262 <__divsi3+0xf6>
    325e:	004b      	lsls	r3, r1, #1
    3260:	1ac0      	subs	r0, r0, r3
    3262:	4152      	adcs	r2, r2
    3264:	1a41      	subs	r1, r0, r1
    3266:	d200      	bcs.n	326a <__divsi3+0xfe>
    3268:	4601      	mov	r1, r0
    326a:	4152      	adcs	r2, r2
    326c:	4610      	mov	r0, r2
    326e:	4770      	bx	lr
    3270:	e05d      	b.n	332e <__divsi3+0x1c2>
    3272:	0fca      	lsrs	r2, r1, #31
    3274:	d000      	beq.n	3278 <__divsi3+0x10c>
    3276:	4249      	negs	r1, r1
    3278:	1003      	asrs	r3, r0, #32
    327a:	d300      	bcc.n	327e <__divsi3+0x112>
    327c:	4240      	negs	r0, r0
    327e:	4053      	eors	r3, r2
    3280:	2200      	movs	r2, #0
    3282:	469c      	mov	ip, r3
    3284:	0903      	lsrs	r3, r0, #4
    3286:	428b      	cmp	r3, r1
    3288:	d32d      	bcc.n	32e6 <__divsi3+0x17a>
    328a:	0a03      	lsrs	r3, r0, #8
    328c:	428b      	cmp	r3, r1
    328e:	d312      	bcc.n	32b6 <__divsi3+0x14a>
    3290:	22fc      	movs	r2, #252	; 0xfc
    3292:	0189      	lsls	r1, r1, #6
    3294:	ba12      	rev	r2, r2
    3296:	0a03      	lsrs	r3, r0, #8
    3298:	428b      	cmp	r3, r1
    329a:	d30c      	bcc.n	32b6 <__divsi3+0x14a>
    329c:	0189      	lsls	r1, r1, #6
    329e:	1192      	asrs	r2, r2, #6
    32a0:	428b      	cmp	r3, r1
    32a2:	d308      	bcc.n	32b6 <__divsi3+0x14a>
    32a4:	0189      	lsls	r1, r1, #6
    32a6:	1192      	asrs	r2, r2, #6
    32a8:	428b      	cmp	r3, r1
    32aa:	d304      	bcc.n	32b6 <__divsi3+0x14a>
    32ac:	0189      	lsls	r1, r1, #6
    32ae:	d03a      	beq.n	3326 <__divsi3+0x1ba>
    32b0:	1192      	asrs	r2, r2, #6
    32b2:	e000      	b.n	32b6 <__divsi3+0x14a>
    32b4:	0989      	lsrs	r1, r1, #6
    32b6:	09c3      	lsrs	r3, r0, #7
    32b8:	428b      	cmp	r3, r1
    32ba:	d301      	bcc.n	32c0 <__divsi3+0x154>
    32bc:	01cb      	lsls	r3, r1, #7
    32be:	1ac0      	subs	r0, r0, r3
    32c0:	4152      	adcs	r2, r2
    32c2:	0983      	lsrs	r3, r0, #6
    32c4:	428b      	cmp	r3, r1
    32c6:	d301      	bcc.n	32cc <__divsi3+0x160>
    32c8:	018b      	lsls	r3, r1, #6
    32ca:	1ac0      	subs	r0, r0, r3
    32cc:	4152      	adcs	r2, r2
    32ce:	0943      	lsrs	r3, r0, #5
    32d0:	428b      	cmp	r3, r1
    32d2:	d301      	bcc.n	32d8 <__divsi3+0x16c>
    32d4:	014b      	lsls	r3, r1, #5
    32d6:	1ac0      	subs	r0, r0, r3
    32d8:	4152      	adcs	r2, r2
    32da:	0903      	lsrs	r3, r0, #4
    32dc:	428b      	cmp	r3, r1
    32de:	d301      	bcc.n	32e4 <__divsi3+0x178>
    32e0:	010b      	lsls	r3, r1, #4
    32e2:	1ac0      	subs	r0, r0, r3
    32e4:	4152      	adcs	r2, r2
    32e6:	08c3      	lsrs	r3, r0, #3
    32e8:	428b      	cmp	r3, r1
    32ea:	d301      	bcc.n	32f0 <__divsi3+0x184>
    32ec:	00cb      	lsls	r3, r1, #3
    32ee:	1ac0      	subs	r0, r0, r3
    32f0:	4152      	adcs	r2, r2
    32f2:	0883      	lsrs	r3, r0, #2
    32f4:	428b      	cmp	r3, r1
    32f6:	d301      	bcc.n	32fc <__divsi3+0x190>
    32f8:	008b      	lsls	r3, r1, #2
    32fa:	1ac0      	subs	r0, r0, r3
    32fc:	4152      	adcs	r2, r2
    32fe:	d2d9      	bcs.n	32b4 <__divsi3+0x148>
    3300:	0843      	lsrs	r3, r0, #1
    3302:	428b      	cmp	r3, r1
    3304:	d301      	bcc.n	330a <__divsi3+0x19e>
    3306:	004b      	lsls	r3, r1, #1
    3308:	1ac0      	subs	r0, r0, r3
    330a:	4152      	adcs	r2, r2
    330c:	1a41      	subs	r1, r0, r1
    330e:	d200      	bcs.n	3312 <__divsi3+0x1a6>
    3310:	4601      	mov	r1, r0
    3312:	4663      	mov	r3, ip
    3314:	4152      	adcs	r2, r2
    3316:	105b      	asrs	r3, r3, #1
    3318:	4610      	mov	r0, r2
    331a:	d301      	bcc.n	3320 <__divsi3+0x1b4>
    331c:	4240      	negs	r0, r0
    331e:	2b00      	cmp	r3, #0
    3320:	d500      	bpl.n	3324 <__divsi3+0x1b8>
    3322:	4249      	negs	r1, r1
    3324:	4770      	bx	lr
    3326:	4663      	mov	r3, ip
    3328:	105b      	asrs	r3, r3, #1
    332a:	d300      	bcc.n	332e <__divsi3+0x1c2>
    332c:	4240      	negs	r0, r0
    332e:	b501      	push	{r0, lr}
    3330:	2000      	movs	r0, #0
    3332:	f000 f805 	bl	3340 <__aeabi_idiv0>
    3336:	bd02      	pop	{r1, pc}

00003338 <__aeabi_idivmod>:
    3338:	2900      	cmp	r1, #0
    333a:	d0f8      	beq.n	332e <__divsi3+0x1c2>
    333c:	e716      	b.n	316c <__divsi3>
    333e:	4770      	bx	lr

00003340 <__aeabi_idiv0>:
    3340:	4770      	bx	lr
    3342:	46c0      	nop			; (mov r8, r8)

00003344 <__aeabi_lmul>:
    3344:	b5f0      	push	{r4, r5, r6, r7, lr}
    3346:	46ce      	mov	lr, r9
    3348:	4647      	mov	r7, r8
    334a:	0415      	lsls	r5, r2, #16
    334c:	0c2d      	lsrs	r5, r5, #16
    334e:	002e      	movs	r6, r5
    3350:	b580      	push	{r7, lr}
    3352:	0407      	lsls	r7, r0, #16
    3354:	0c14      	lsrs	r4, r2, #16
    3356:	0c3f      	lsrs	r7, r7, #16
    3358:	4699      	mov	r9, r3
    335a:	0c03      	lsrs	r3, r0, #16
    335c:	437e      	muls	r6, r7
    335e:	435d      	muls	r5, r3
    3360:	4367      	muls	r7, r4
    3362:	4363      	muls	r3, r4
    3364:	197f      	adds	r7, r7, r5
    3366:	0c34      	lsrs	r4, r6, #16
    3368:	19e4      	adds	r4, r4, r7
    336a:	469c      	mov	ip, r3
    336c:	42a5      	cmp	r5, r4
    336e:	d903      	bls.n	3378 <__aeabi_lmul+0x34>
    3370:	2380      	movs	r3, #128	; 0x80
    3372:	025b      	lsls	r3, r3, #9
    3374:	4698      	mov	r8, r3
    3376:	44c4      	add	ip, r8
    3378:	464b      	mov	r3, r9
    337a:	4351      	muls	r1, r2
    337c:	4343      	muls	r3, r0
    337e:	0436      	lsls	r6, r6, #16
    3380:	0c36      	lsrs	r6, r6, #16
    3382:	0c25      	lsrs	r5, r4, #16
    3384:	0424      	lsls	r4, r4, #16
    3386:	4465      	add	r5, ip
    3388:	19a4      	adds	r4, r4, r6
    338a:	1859      	adds	r1, r3, r1
    338c:	1949      	adds	r1, r1, r5
    338e:	0020      	movs	r0, r4
    3390:	bc0c      	pop	{r2, r3}
    3392:	4690      	mov	r8, r2
    3394:	4699      	mov	r9, r3
    3396:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003398 <__libc_init_array>:
    3398:	b570      	push	{r4, r5, r6, lr}
    339a:	2600      	movs	r6, #0
    339c:	4d0c      	ldr	r5, [pc, #48]	; (33d0 <__libc_init_array+0x38>)
    339e:	4c0d      	ldr	r4, [pc, #52]	; (33d4 <__libc_init_array+0x3c>)
    33a0:	1b64      	subs	r4, r4, r5
    33a2:	10a4      	asrs	r4, r4, #2
    33a4:	42a6      	cmp	r6, r4
    33a6:	d109      	bne.n	33bc <__libc_init_array+0x24>
    33a8:	2600      	movs	r6, #0
    33aa:	f000 fd51 	bl	3e50 <_init>
    33ae:	4d0a      	ldr	r5, [pc, #40]	; (33d8 <__libc_init_array+0x40>)
    33b0:	4c0a      	ldr	r4, [pc, #40]	; (33dc <__libc_init_array+0x44>)
    33b2:	1b64      	subs	r4, r4, r5
    33b4:	10a4      	asrs	r4, r4, #2
    33b6:	42a6      	cmp	r6, r4
    33b8:	d105      	bne.n	33c6 <__libc_init_array+0x2e>
    33ba:	bd70      	pop	{r4, r5, r6, pc}
    33bc:	00b3      	lsls	r3, r6, #2
    33be:	58eb      	ldr	r3, [r5, r3]
    33c0:	4798      	blx	r3
    33c2:	3601      	adds	r6, #1
    33c4:	e7ee      	b.n	33a4 <__libc_init_array+0xc>
    33c6:	00b3      	lsls	r3, r6, #2
    33c8:	58eb      	ldr	r3, [r5, r3]
    33ca:	4798      	blx	r3
    33cc:	3601      	adds	r6, #1
    33ce:	e7f2      	b.n	33b6 <__libc_init_array+0x1e>
    33d0:	00003e5c 	.word	0x00003e5c
    33d4:	00003e5c 	.word	0x00003e5c
    33d8:	00003e5c 	.word	0x00003e5c
    33dc:	00003e60 	.word	0x00003e60

000033e0 <memcpy>:
    33e0:	2300      	movs	r3, #0
    33e2:	b510      	push	{r4, lr}
    33e4:	429a      	cmp	r2, r3
    33e6:	d100      	bne.n	33ea <memcpy+0xa>
    33e8:	bd10      	pop	{r4, pc}
    33ea:	5ccc      	ldrb	r4, [r1, r3]
    33ec:	54c4      	strb	r4, [r0, r3]
    33ee:	3301      	adds	r3, #1
    33f0:	e7f8      	b.n	33e4 <memcpy+0x4>
	...

000033f4 <siprintf>:
    33f4:	b40e      	push	{r1, r2, r3}
    33f6:	b510      	push	{r4, lr}
    33f8:	b09d      	sub	sp, #116	; 0x74
    33fa:	a902      	add	r1, sp, #8
    33fc:	9002      	str	r0, [sp, #8]
    33fe:	6108      	str	r0, [r1, #16]
    3400:	480b      	ldr	r0, [pc, #44]	; (3430 <siprintf+0x3c>)
    3402:	2482      	movs	r4, #130	; 0x82
    3404:	6088      	str	r0, [r1, #8]
    3406:	6148      	str	r0, [r1, #20]
    3408:	2001      	movs	r0, #1
    340a:	4240      	negs	r0, r0
    340c:	ab1f      	add	r3, sp, #124	; 0x7c
    340e:	81c8      	strh	r0, [r1, #14]
    3410:	4808      	ldr	r0, [pc, #32]	; (3434 <siprintf+0x40>)
    3412:	cb04      	ldmia	r3!, {r2}
    3414:	00a4      	lsls	r4, r4, #2
    3416:	6800      	ldr	r0, [r0, #0]
    3418:	9301      	str	r3, [sp, #4]
    341a:	818c      	strh	r4, [r1, #12]
    341c:	f000 f878 	bl	3510 <_svfiprintf_r>
    3420:	2300      	movs	r3, #0
    3422:	9a02      	ldr	r2, [sp, #8]
    3424:	7013      	strb	r3, [r2, #0]
    3426:	b01d      	add	sp, #116	; 0x74
    3428:	bc10      	pop	{r4}
    342a:	bc08      	pop	{r3}
    342c:	b003      	add	sp, #12
    342e:	4718      	bx	r3
    3430:	7fffffff 	.word	0x7fffffff
    3434:	20000014 	.word	0x20000014

00003438 <strcmp>:
    3438:	7802      	ldrb	r2, [r0, #0]
    343a:	780b      	ldrb	r3, [r1, #0]
    343c:	2a00      	cmp	r2, #0
    343e:	d003      	beq.n	3448 <strcmp+0x10>
    3440:	3001      	adds	r0, #1
    3442:	3101      	adds	r1, #1
    3444:	429a      	cmp	r2, r3
    3446:	d0f7      	beq.n	3438 <strcmp>
    3448:	1ad0      	subs	r0, r2, r3
    344a:	4770      	bx	lr

0000344c <__ssputs_r>:
    344c:	b5f0      	push	{r4, r5, r6, r7, lr}
    344e:	688e      	ldr	r6, [r1, #8]
    3450:	b085      	sub	sp, #20
    3452:	0007      	movs	r7, r0
    3454:	000c      	movs	r4, r1
    3456:	9203      	str	r2, [sp, #12]
    3458:	9301      	str	r3, [sp, #4]
    345a:	429e      	cmp	r6, r3
    345c:	d839      	bhi.n	34d2 <__ssputs_r+0x86>
    345e:	2390      	movs	r3, #144	; 0x90
    3460:	898a      	ldrh	r2, [r1, #12]
    3462:	00db      	lsls	r3, r3, #3
    3464:	421a      	tst	r2, r3
    3466:	d034      	beq.n	34d2 <__ssputs_r+0x86>
    3468:	2503      	movs	r5, #3
    346a:	6909      	ldr	r1, [r1, #16]
    346c:	6823      	ldr	r3, [r4, #0]
    346e:	1a5b      	subs	r3, r3, r1
    3470:	9302      	str	r3, [sp, #8]
    3472:	6963      	ldr	r3, [r4, #20]
    3474:	9802      	ldr	r0, [sp, #8]
    3476:	435d      	muls	r5, r3
    3478:	0feb      	lsrs	r3, r5, #31
    347a:	195d      	adds	r5, r3, r5
    347c:	9b01      	ldr	r3, [sp, #4]
    347e:	106d      	asrs	r5, r5, #1
    3480:	3301      	adds	r3, #1
    3482:	181b      	adds	r3, r3, r0
    3484:	42ab      	cmp	r3, r5
    3486:	d900      	bls.n	348a <__ssputs_r+0x3e>
    3488:	001d      	movs	r5, r3
    348a:	0553      	lsls	r3, r2, #21
    348c:	d532      	bpl.n	34f4 <__ssputs_r+0xa8>
    348e:	0029      	movs	r1, r5
    3490:	0038      	movs	r0, r7
    3492:	f000 fb31 	bl	3af8 <_malloc_r>
    3496:	1e06      	subs	r6, r0, #0
    3498:	d109      	bne.n	34ae <__ssputs_r+0x62>
    349a:	230c      	movs	r3, #12
    349c:	603b      	str	r3, [r7, #0]
    349e:	2340      	movs	r3, #64	; 0x40
    34a0:	2001      	movs	r0, #1
    34a2:	89a2      	ldrh	r2, [r4, #12]
    34a4:	4240      	negs	r0, r0
    34a6:	4313      	orrs	r3, r2
    34a8:	81a3      	strh	r3, [r4, #12]
    34aa:	b005      	add	sp, #20
    34ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34ae:	9a02      	ldr	r2, [sp, #8]
    34b0:	6921      	ldr	r1, [r4, #16]
    34b2:	f7ff ff95 	bl	33e0 <memcpy>
    34b6:	89a3      	ldrh	r3, [r4, #12]
    34b8:	4a14      	ldr	r2, [pc, #80]	; (350c <__ssputs_r+0xc0>)
    34ba:	401a      	ands	r2, r3
    34bc:	2380      	movs	r3, #128	; 0x80
    34be:	4313      	orrs	r3, r2
    34c0:	81a3      	strh	r3, [r4, #12]
    34c2:	9b02      	ldr	r3, [sp, #8]
    34c4:	6126      	str	r6, [r4, #16]
    34c6:	18f6      	adds	r6, r6, r3
    34c8:	6026      	str	r6, [r4, #0]
    34ca:	6165      	str	r5, [r4, #20]
    34cc:	9e01      	ldr	r6, [sp, #4]
    34ce:	1aed      	subs	r5, r5, r3
    34d0:	60a5      	str	r5, [r4, #8]
    34d2:	9b01      	ldr	r3, [sp, #4]
    34d4:	42b3      	cmp	r3, r6
    34d6:	d200      	bcs.n	34da <__ssputs_r+0x8e>
    34d8:	001e      	movs	r6, r3
    34da:	0032      	movs	r2, r6
    34dc:	9903      	ldr	r1, [sp, #12]
    34de:	6820      	ldr	r0, [r4, #0]
    34e0:	f000 faad 	bl	3a3e <memmove>
    34e4:	68a3      	ldr	r3, [r4, #8]
    34e6:	2000      	movs	r0, #0
    34e8:	1b9b      	subs	r3, r3, r6
    34ea:	60a3      	str	r3, [r4, #8]
    34ec:	6823      	ldr	r3, [r4, #0]
    34ee:	199e      	adds	r6, r3, r6
    34f0:	6026      	str	r6, [r4, #0]
    34f2:	e7da      	b.n	34aa <__ssputs_r+0x5e>
    34f4:	002a      	movs	r2, r5
    34f6:	0038      	movs	r0, r7
    34f8:	f000 fb5c 	bl	3bb4 <_realloc_r>
    34fc:	1e06      	subs	r6, r0, #0
    34fe:	d1e0      	bne.n	34c2 <__ssputs_r+0x76>
    3500:	6921      	ldr	r1, [r4, #16]
    3502:	0038      	movs	r0, r7
    3504:	f000 faae 	bl	3a64 <_free_r>
    3508:	e7c7      	b.n	349a <__ssputs_r+0x4e>
    350a:	46c0      	nop			; (mov r8, r8)
    350c:	fffffb7f 	.word	0xfffffb7f

00003510 <_svfiprintf_r>:
    3510:	b5f0      	push	{r4, r5, r6, r7, lr}
    3512:	b09f      	sub	sp, #124	; 0x7c
    3514:	9002      	str	r0, [sp, #8]
    3516:	9305      	str	r3, [sp, #20]
    3518:	898b      	ldrh	r3, [r1, #12]
    351a:	000f      	movs	r7, r1
    351c:	0016      	movs	r6, r2
    351e:	061b      	lsls	r3, r3, #24
    3520:	d511      	bpl.n	3546 <_svfiprintf_r+0x36>
    3522:	690b      	ldr	r3, [r1, #16]
    3524:	2b00      	cmp	r3, #0
    3526:	d10e      	bne.n	3546 <_svfiprintf_r+0x36>
    3528:	2140      	movs	r1, #64	; 0x40
    352a:	f000 fae5 	bl	3af8 <_malloc_r>
    352e:	6038      	str	r0, [r7, #0]
    3530:	6138      	str	r0, [r7, #16]
    3532:	2800      	cmp	r0, #0
    3534:	d105      	bne.n	3542 <_svfiprintf_r+0x32>
    3536:	230c      	movs	r3, #12
    3538:	9a02      	ldr	r2, [sp, #8]
    353a:	3801      	subs	r0, #1
    353c:	6013      	str	r3, [r2, #0]
    353e:	b01f      	add	sp, #124	; 0x7c
    3540:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3542:	2340      	movs	r3, #64	; 0x40
    3544:	617b      	str	r3, [r7, #20]
    3546:	2300      	movs	r3, #0
    3548:	ad06      	add	r5, sp, #24
    354a:	616b      	str	r3, [r5, #20]
    354c:	3320      	adds	r3, #32
    354e:	766b      	strb	r3, [r5, #25]
    3550:	3310      	adds	r3, #16
    3552:	76ab      	strb	r3, [r5, #26]
    3554:	0034      	movs	r4, r6
    3556:	7823      	ldrb	r3, [r4, #0]
    3558:	2b00      	cmp	r3, #0
    355a:	d147      	bne.n	35ec <_svfiprintf_r+0xdc>
    355c:	1ba3      	subs	r3, r4, r6
    355e:	9304      	str	r3, [sp, #16]
    3560:	d00d      	beq.n	357e <_svfiprintf_r+0x6e>
    3562:	1ba3      	subs	r3, r4, r6
    3564:	0032      	movs	r2, r6
    3566:	0039      	movs	r1, r7
    3568:	9802      	ldr	r0, [sp, #8]
    356a:	f7ff ff6f 	bl	344c <__ssputs_r>
    356e:	1c43      	adds	r3, r0, #1
    3570:	d100      	bne.n	3574 <_svfiprintf_r+0x64>
    3572:	e0b5      	b.n	36e0 <_svfiprintf_r+0x1d0>
    3574:	696a      	ldr	r2, [r5, #20]
    3576:	9b04      	ldr	r3, [sp, #16]
    3578:	4694      	mov	ip, r2
    357a:	4463      	add	r3, ip
    357c:	616b      	str	r3, [r5, #20]
    357e:	7823      	ldrb	r3, [r4, #0]
    3580:	2b00      	cmp	r3, #0
    3582:	d100      	bne.n	3586 <_svfiprintf_r+0x76>
    3584:	e0ac      	b.n	36e0 <_svfiprintf_r+0x1d0>
    3586:	2201      	movs	r2, #1
    3588:	2300      	movs	r3, #0
    358a:	4252      	negs	r2, r2
    358c:	606a      	str	r2, [r5, #4]
    358e:	a902      	add	r1, sp, #8
    3590:	3254      	adds	r2, #84	; 0x54
    3592:	1852      	adds	r2, r2, r1
    3594:	3401      	adds	r4, #1
    3596:	602b      	str	r3, [r5, #0]
    3598:	60eb      	str	r3, [r5, #12]
    359a:	60ab      	str	r3, [r5, #8]
    359c:	7013      	strb	r3, [r2, #0]
    359e:	65ab      	str	r3, [r5, #88]	; 0x58
    35a0:	4e58      	ldr	r6, [pc, #352]	; (3704 <_svfiprintf_r+0x1f4>)
    35a2:	2205      	movs	r2, #5
    35a4:	7821      	ldrb	r1, [r4, #0]
    35a6:	0030      	movs	r0, r6
    35a8:	f000 fa3e 	bl	3a28 <memchr>
    35ac:	1c62      	adds	r2, r4, #1
    35ae:	2800      	cmp	r0, #0
    35b0:	d120      	bne.n	35f4 <_svfiprintf_r+0xe4>
    35b2:	6829      	ldr	r1, [r5, #0]
    35b4:	06cb      	lsls	r3, r1, #27
    35b6:	d504      	bpl.n	35c2 <_svfiprintf_r+0xb2>
    35b8:	2353      	movs	r3, #83	; 0x53
    35ba:	ae02      	add	r6, sp, #8
    35bc:	3020      	adds	r0, #32
    35be:	199b      	adds	r3, r3, r6
    35c0:	7018      	strb	r0, [r3, #0]
    35c2:	070b      	lsls	r3, r1, #28
    35c4:	d504      	bpl.n	35d0 <_svfiprintf_r+0xc0>
    35c6:	2353      	movs	r3, #83	; 0x53
    35c8:	202b      	movs	r0, #43	; 0x2b
    35ca:	ae02      	add	r6, sp, #8
    35cc:	199b      	adds	r3, r3, r6
    35ce:	7018      	strb	r0, [r3, #0]
    35d0:	7823      	ldrb	r3, [r4, #0]
    35d2:	2b2a      	cmp	r3, #42	; 0x2a
    35d4:	d016      	beq.n	3604 <_svfiprintf_r+0xf4>
    35d6:	2000      	movs	r0, #0
    35d8:	210a      	movs	r1, #10
    35da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    35dc:	7822      	ldrb	r2, [r4, #0]
    35de:	3a30      	subs	r2, #48	; 0x30
    35e0:	2a09      	cmp	r2, #9
    35e2:	d955      	bls.n	3690 <_svfiprintf_r+0x180>
    35e4:	2800      	cmp	r0, #0
    35e6:	d015      	beq.n	3614 <_svfiprintf_r+0x104>
    35e8:	9309      	str	r3, [sp, #36]	; 0x24
    35ea:	e013      	b.n	3614 <_svfiprintf_r+0x104>
    35ec:	2b25      	cmp	r3, #37	; 0x25
    35ee:	d0b5      	beq.n	355c <_svfiprintf_r+0x4c>
    35f0:	3401      	adds	r4, #1
    35f2:	e7b0      	b.n	3556 <_svfiprintf_r+0x46>
    35f4:	2301      	movs	r3, #1
    35f6:	1b80      	subs	r0, r0, r6
    35f8:	4083      	lsls	r3, r0
    35fa:	6829      	ldr	r1, [r5, #0]
    35fc:	0014      	movs	r4, r2
    35fe:	430b      	orrs	r3, r1
    3600:	602b      	str	r3, [r5, #0]
    3602:	e7cd      	b.n	35a0 <_svfiprintf_r+0x90>
    3604:	9b05      	ldr	r3, [sp, #20]
    3606:	1d18      	adds	r0, r3, #4
    3608:	681b      	ldr	r3, [r3, #0]
    360a:	9005      	str	r0, [sp, #20]
    360c:	2b00      	cmp	r3, #0
    360e:	db39      	blt.n	3684 <_svfiprintf_r+0x174>
    3610:	9309      	str	r3, [sp, #36]	; 0x24
    3612:	0014      	movs	r4, r2
    3614:	7823      	ldrb	r3, [r4, #0]
    3616:	2b2e      	cmp	r3, #46	; 0x2e
    3618:	d10b      	bne.n	3632 <_svfiprintf_r+0x122>
    361a:	7863      	ldrb	r3, [r4, #1]
    361c:	1c62      	adds	r2, r4, #1
    361e:	2b2a      	cmp	r3, #42	; 0x2a
    3620:	d13e      	bne.n	36a0 <_svfiprintf_r+0x190>
    3622:	9b05      	ldr	r3, [sp, #20]
    3624:	3402      	adds	r4, #2
    3626:	1d1a      	adds	r2, r3, #4
    3628:	681b      	ldr	r3, [r3, #0]
    362a:	9205      	str	r2, [sp, #20]
    362c:	2b00      	cmp	r3, #0
    362e:	db34      	blt.n	369a <_svfiprintf_r+0x18a>
    3630:	9307      	str	r3, [sp, #28]
    3632:	4e35      	ldr	r6, [pc, #212]	; (3708 <_svfiprintf_r+0x1f8>)
    3634:	7821      	ldrb	r1, [r4, #0]
    3636:	2203      	movs	r2, #3
    3638:	0030      	movs	r0, r6
    363a:	f000 f9f5 	bl	3a28 <memchr>
    363e:	2800      	cmp	r0, #0
    3640:	d006      	beq.n	3650 <_svfiprintf_r+0x140>
    3642:	2340      	movs	r3, #64	; 0x40
    3644:	1b80      	subs	r0, r0, r6
    3646:	4083      	lsls	r3, r0
    3648:	682a      	ldr	r2, [r5, #0]
    364a:	3401      	adds	r4, #1
    364c:	4313      	orrs	r3, r2
    364e:	602b      	str	r3, [r5, #0]
    3650:	7821      	ldrb	r1, [r4, #0]
    3652:	2206      	movs	r2, #6
    3654:	482d      	ldr	r0, [pc, #180]	; (370c <_svfiprintf_r+0x1fc>)
    3656:	1c66      	adds	r6, r4, #1
    3658:	7629      	strb	r1, [r5, #24]
    365a:	f000 f9e5 	bl	3a28 <memchr>
    365e:	2800      	cmp	r0, #0
    3660:	d046      	beq.n	36f0 <_svfiprintf_r+0x1e0>
    3662:	4b2b      	ldr	r3, [pc, #172]	; (3710 <_svfiprintf_r+0x200>)
    3664:	2b00      	cmp	r3, #0
    3666:	d12f      	bne.n	36c8 <_svfiprintf_r+0x1b8>
    3668:	6829      	ldr	r1, [r5, #0]
    366a:	9b05      	ldr	r3, [sp, #20]
    366c:	2207      	movs	r2, #7
    366e:	05c9      	lsls	r1, r1, #23
    3670:	d528      	bpl.n	36c4 <_svfiprintf_r+0x1b4>
    3672:	189b      	adds	r3, r3, r2
    3674:	4393      	bics	r3, r2
    3676:	3308      	adds	r3, #8
    3678:	9305      	str	r3, [sp, #20]
    367a:	696b      	ldr	r3, [r5, #20]
    367c:	9a03      	ldr	r2, [sp, #12]
    367e:	189b      	adds	r3, r3, r2
    3680:	616b      	str	r3, [r5, #20]
    3682:	e767      	b.n	3554 <_svfiprintf_r+0x44>
    3684:	425b      	negs	r3, r3
    3686:	60eb      	str	r3, [r5, #12]
    3688:	2302      	movs	r3, #2
    368a:	430b      	orrs	r3, r1
    368c:	602b      	str	r3, [r5, #0]
    368e:	e7c0      	b.n	3612 <_svfiprintf_r+0x102>
    3690:	434b      	muls	r3, r1
    3692:	3401      	adds	r4, #1
    3694:	189b      	adds	r3, r3, r2
    3696:	2001      	movs	r0, #1
    3698:	e7a0      	b.n	35dc <_svfiprintf_r+0xcc>
    369a:	2301      	movs	r3, #1
    369c:	425b      	negs	r3, r3
    369e:	e7c7      	b.n	3630 <_svfiprintf_r+0x120>
    36a0:	2300      	movs	r3, #0
    36a2:	0014      	movs	r4, r2
    36a4:	200a      	movs	r0, #10
    36a6:	001a      	movs	r2, r3
    36a8:	606b      	str	r3, [r5, #4]
    36aa:	7821      	ldrb	r1, [r4, #0]
    36ac:	3930      	subs	r1, #48	; 0x30
    36ae:	2909      	cmp	r1, #9
    36b0:	d903      	bls.n	36ba <_svfiprintf_r+0x1aa>
    36b2:	2b00      	cmp	r3, #0
    36b4:	d0bd      	beq.n	3632 <_svfiprintf_r+0x122>
    36b6:	9207      	str	r2, [sp, #28]
    36b8:	e7bb      	b.n	3632 <_svfiprintf_r+0x122>
    36ba:	4342      	muls	r2, r0
    36bc:	3401      	adds	r4, #1
    36be:	1852      	adds	r2, r2, r1
    36c0:	2301      	movs	r3, #1
    36c2:	e7f2      	b.n	36aa <_svfiprintf_r+0x19a>
    36c4:	3307      	adds	r3, #7
    36c6:	e7d5      	b.n	3674 <_svfiprintf_r+0x164>
    36c8:	ab05      	add	r3, sp, #20
    36ca:	9300      	str	r3, [sp, #0]
    36cc:	003a      	movs	r2, r7
    36ce:	4b11      	ldr	r3, [pc, #68]	; (3714 <_svfiprintf_r+0x204>)
    36d0:	0029      	movs	r1, r5
    36d2:	9802      	ldr	r0, [sp, #8]
    36d4:	e000      	b.n	36d8 <_svfiprintf_r+0x1c8>
    36d6:	bf00      	nop
    36d8:	9003      	str	r0, [sp, #12]
    36da:	9b03      	ldr	r3, [sp, #12]
    36dc:	3301      	adds	r3, #1
    36de:	d1cc      	bne.n	367a <_svfiprintf_r+0x16a>
    36e0:	89bb      	ldrh	r3, [r7, #12]
    36e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    36e4:	065b      	lsls	r3, r3, #25
    36e6:	d400      	bmi.n	36ea <_svfiprintf_r+0x1da>
    36e8:	e729      	b.n	353e <_svfiprintf_r+0x2e>
    36ea:	2001      	movs	r0, #1
    36ec:	4240      	negs	r0, r0
    36ee:	e726      	b.n	353e <_svfiprintf_r+0x2e>
    36f0:	ab05      	add	r3, sp, #20
    36f2:	9300      	str	r3, [sp, #0]
    36f4:	003a      	movs	r2, r7
    36f6:	4b07      	ldr	r3, [pc, #28]	; (3714 <_svfiprintf_r+0x204>)
    36f8:	0029      	movs	r1, r5
    36fa:	9802      	ldr	r0, [sp, #8]
    36fc:	f000 f87a 	bl	37f4 <_printf_i>
    3700:	e7ea      	b.n	36d8 <_svfiprintf_r+0x1c8>
    3702:	46c0      	nop			; (mov r8, r8)
    3704:	00003e1c 	.word	0x00003e1c
    3708:	00003e22 	.word	0x00003e22
    370c:	00003e26 	.word	0x00003e26
    3710:	00000000 	.word	0x00000000
    3714:	0000344d 	.word	0x0000344d

00003718 <_printf_common>:
    3718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    371a:	0015      	movs	r5, r2
    371c:	9301      	str	r3, [sp, #4]
    371e:	688a      	ldr	r2, [r1, #8]
    3720:	690b      	ldr	r3, [r1, #16]
    3722:	9000      	str	r0, [sp, #0]
    3724:	000c      	movs	r4, r1
    3726:	4293      	cmp	r3, r2
    3728:	da00      	bge.n	372c <_printf_common+0x14>
    372a:	0013      	movs	r3, r2
    372c:	0022      	movs	r2, r4
    372e:	602b      	str	r3, [r5, #0]
    3730:	3243      	adds	r2, #67	; 0x43
    3732:	7812      	ldrb	r2, [r2, #0]
    3734:	2a00      	cmp	r2, #0
    3736:	d001      	beq.n	373c <_printf_common+0x24>
    3738:	3301      	adds	r3, #1
    373a:	602b      	str	r3, [r5, #0]
    373c:	6823      	ldr	r3, [r4, #0]
    373e:	069b      	lsls	r3, r3, #26
    3740:	d502      	bpl.n	3748 <_printf_common+0x30>
    3742:	682b      	ldr	r3, [r5, #0]
    3744:	3302      	adds	r3, #2
    3746:	602b      	str	r3, [r5, #0]
    3748:	2706      	movs	r7, #6
    374a:	6823      	ldr	r3, [r4, #0]
    374c:	401f      	ands	r7, r3
    374e:	d027      	beq.n	37a0 <_printf_common+0x88>
    3750:	0023      	movs	r3, r4
    3752:	3343      	adds	r3, #67	; 0x43
    3754:	781b      	ldrb	r3, [r3, #0]
    3756:	1e5a      	subs	r2, r3, #1
    3758:	4193      	sbcs	r3, r2
    375a:	6822      	ldr	r2, [r4, #0]
    375c:	0692      	lsls	r2, r2, #26
    375e:	d430      	bmi.n	37c2 <_printf_common+0xaa>
    3760:	0022      	movs	r2, r4
    3762:	9901      	ldr	r1, [sp, #4]
    3764:	3243      	adds	r2, #67	; 0x43
    3766:	9800      	ldr	r0, [sp, #0]
    3768:	9e08      	ldr	r6, [sp, #32]
    376a:	47b0      	blx	r6
    376c:	1c43      	adds	r3, r0, #1
    376e:	d025      	beq.n	37bc <_printf_common+0xa4>
    3770:	2306      	movs	r3, #6
    3772:	6820      	ldr	r0, [r4, #0]
    3774:	682a      	ldr	r2, [r5, #0]
    3776:	68e1      	ldr	r1, [r4, #12]
    3778:	4003      	ands	r3, r0
    377a:	2500      	movs	r5, #0
    377c:	2b04      	cmp	r3, #4
    377e:	d103      	bne.n	3788 <_printf_common+0x70>
    3780:	1a8d      	subs	r5, r1, r2
    3782:	43eb      	mvns	r3, r5
    3784:	17db      	asrs	r3, r3, #31
    3786:	401d      	ands	r5, r3
    3788:	68a3      	ldr	r3, [r4, #8]
    378a:	6922      	ldr	r2, [r4, #16]
    378c:	4293      	cmp	r3, r2
    378e:	dd01      	ble.n	3794 <_printf_common+0x7c>
    3790:	1a9b      	subs	r3, r3, r2
    3792:	18ed      	adds	r5, r5, r3
    3794:	2700      	movs	r7, #0
    3796:	42bd      	cmp	r5, r7
    3798:	d120      	bne.n	37dc <_printf_common+0xc4>
    379a:	2000      	movs	r0, #0
    379c:	e010      	b.n	37c0 <_printf_common+0xa8>
    379e:	3701      	adds	r7, #1
    37a0:	68e3      	ldr	r3, [r4, #12]
    37a2:	682a      	ldr	r2, [r5, #0]
    37a4:	1a9b      	subs	r3, r3, r2
    37a6:	429f      	cmp	r7, r3
    37a8:	dad2      	bge.n	3750 <_printf_common+0x38>
    37aa:	0022      	movs	r2, r4
    37ac:	2301      	movs	r3, #1
    37ae:	3219      	adds	r2, #25
    37b0:	9901      	ldr	r1, [sp, #4]
    37b2:	9800      	ldr	r0, [sp, #0]
    37b4:	9e08      	ldr	r6, [sp, #32]
    37b6:	47b0      	blx	r6
    37b8:	1c43      	adds	r3, r0, #1
    37ba:	d1f0      	bne.n	379e <_printf_common+0x86>
    37bc:	2001      	movs	r0, #1
    37be:	4240      	negs	r0, r0
    37c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    37c2:	2030      	movs	r0, #48	; 0x30
    37c4:	18e1      	adds	r1, r4, r3
    37c6:	3143      	adds	r1, #67	; 0x43
    37c8:	7008      	strb	r0, [r1, #0]
    37ca:	0021      	movs	r1, r4
    37cc:	1c5a      	adds	r2, r3, #1
    37ce:	3145      	adds	r1, #69	; 0x45
    37d0:	7809      	ldrb	r1, [r1, #0]
    37d2:	18a2      	adds	r2, r4, r2
    37d4:	3243      	adds	r2, #67	; 0x43
    37d6:	3302      	adds	r3, #2
    37d8:	7011      	strb	r1, [r2, #0]
    37da:	e7c1      	b.n	3760 <_printf_common+0x48>
    37dc:	0022      	movs	r2, r4
    37de:	2301      	movs	r3, #1
    37e0:	321a      	adds	r2, #26
    37e2:	9901      	ldr	r1, [sp, #4]
    37e4:	9800      	ldr	r0, [sp, #0]
    37e6:	9e08      	ldr	r6, [sp, #32]
    37e8:	47b0      	blx	r6
    37ea:	1c43      	adds	r3, r0, #1
    37ec:	d0e6      	beq.n	37bc <_printf_common+0xa4>
    37ee:	3701      	adds	r7, #1
    37f0:	e7d1      	b.n	3796 <_printf_common+0x7e>
	...

000037f4 <_printf_i>:
    37f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    37f6:	b08b      	sub	sp, #44	; 0x2c
    37f8:	9206      	str	r2, [sp, #24]
    37fa:	000a      	movs	r2, r1
    37fc:	3243      	adds	r2, #67	; 0x43
    37fe:	9307      	str	r3, [sp, #28]
    3800:	9005      	str	r0, [sp, #20]
    3802:	9204      	str	r2, [sp, #16]
    3804:	7e0a      	ldrb	r2, [r1, #24]
    3806:	000c      	movs	r4, r1
    3808:	9b10      	ldr	r3, [sp, #64]	; 0x40
    380a:	2a6e      	cmp	r2, #110	; 0x6e
    380c:	d100      	bne.n	3810 <_printf_i+0x1c>
    380e:	e08f      	b.n	3930 <_printf_i+0x13c>
    3810:	d817      	bhi.n	3842 <_printf_i+0x4e>
    3812:	2a63      	cmp	r2, #99	; 0x63
    3814:	d02c      	beq.n	3870 <_printf_i+0x7c>
    3816:	d808      	bhi.n	382a <_printf_i+0x36>
    3818:	2a00      	cmp	r2, #0
    381a:	d100      	bne.n	381e <_printf_i+0x2a>
    381c:	e099      	b.n	3952 <_printf_i+0x15e>
    381e:	2a58      	cmp	r2, #88	; 0x58
    3820:	d054      	beq.n	38cc <_printf_i+0xd8>
    3822:	0026      	movs	r6, r4
    3824:	3642      	adds	r6, #66	; 0x42
    3826:	7032      	strb	r2, [r6, #0]
    3828:	e029      	b.n	387e <_printf_i+0x8a>
    382a:	2a64      	cmp	r2, #100	; 0x64
    382c:	d001      	beq.n	3832 <_printf_i+0x3e>
    382e:	2a69      	cmp	r2, #105	; 0x69
    3830:	d1f7      	bne.n	3822 <_printf_i+0x2e>
    3832:	6821      	ldr	r1, [r4, #0]
    3834:	681a      	ldr	r2, [r3, #0]
    3836:	0608      	lsls	r0, r1, #24
    3838:	d523      	bpl.n	3882 <_printf_i+0x8e>
    383a:	1d11      	adds	r1, r2, #4
    383c:	6019      	str	r1, [r3, #0]
    383e:	6815      	ldr	r5, [r2, #0]
    3840:	e025      	b.n	388e <_printf_i+0x9a>
    3842:	2a73      	cmp	r2, #115	; 0x73
    3844:	d100      	bne.n	3848 <_printf_i+0x54>
    3846:	e088      	b.n	395a <_printf_i+0x166>
    3848:	d808      	bhi.n	385c <_printf_i+0x68>
    384a:	2a6f      	cmp	r2, #111	; 0x6f
    384c:	d029      	beq.n	38a2 <_printf_i+0xae>
    384e:	2a70      	cmp	r2, #112	; 0x70
    3850:	d1e7      	bne.n	3822 <_printf_i+0x2e>
    3852:	2220      	movs	r2, #32
    3854:	6809      	ldr	r1, [r1, #0]
    3856:	430a      	orrs	r2, r1
    3858:	6022      	str	r2, [r4, #0]
    385a:	e003      	b.n	3864 <_printf_i+0x70>
    385c:	2a75      	cmp	r2, #117	; 0x75
    385e:	d020      	beq.n	38a2 <_printf_i+0xae>
    3860:	2a78      	cmp	r2, #120	; 0x78
    3862:	d1de      	bne.n	3822 <_printf_i+0x2e>
    3864:	0022      	movs	r2, r4
    3866:	2178      	movs	r1, #120	; 0x78
    3868:	3245      	adds	r2, #69	; 0x45
    386a:	7011      	strb	r1, [r2, #0]
    386c:	4a6c      	ldr	r2, [pc, #432]	; (3a20 <_printf_i+0x22c>)
    386e:	e030      	b.n	38d2 <_printf_i+0xde>
    3870:	000e      	movs	r6, r1
    3872:	681a      	ldr	r2, [r3, #0]
    3874:	3642      	adds	r6, #66	; 0x42
    3876:	1d11      	adds	r1, r2, #4
    3878:	6019      	str	r1, [r3, #0]
    387a:	6813      	ldr	r3, [r2, #0]
    387c:	7033      	strb	r3, [r6, #0]
    387e:	2301      	movs	r3, #1
    3880:	e079      	b.n	3976 <_printf_i+0x182>
    3882:	0649      	lsls	r1, r1, #25
    3884:	d5d9      	bpl.n	383a <_printf_i+0x46>
    3886:	1d11      	adds	r1, r2, #4
    3888:	6019      	str	r1, [r3, #0]
    388a:	2300      	movs	r3, #0
    388c:	5ed5      	ldrsh	r5, [r2, r3]
    388e:	2d00      	cmp	r5, #0
    3890:	da03      	bge.n	389a <_printf_i+0xa6>
    3892:	232d      	movs	r3, #45	; 0x2d
    3894:	9a04      	ldr	r2, [sp, #16]
    3896:	426d      	negs	r5, r5
    3898:	7013      	strb	r3, [r2, #0]
    389a:	4b62      	ldr	r3, [pc, #392]	; (3a24 <_printf_i+0x230>)
    389c:	270a      	movs	r7, #10
    389e:	9303      	str	r3, [sp, #12]
    38a0:	e02f      	b.n	3902 <_printf_i+0x10e>
    38a2:	6820      	ldr	r0, [r4, #0]
    38a4:	6819      	ldr	r1, [r3, #0]
    38a6:	0605      	lsls	r5, r0, #24
    38a8:	d503      	bpl.n	38b2 <_printf_i+0xbe>
    38aa:	1d08      	adds	r0, r1, #4
    38ac:	6018      	str	r0, [r3, #0]
    38ae:	680d      	ldr	r5, [r1, #0]
    38b0:	e005      	b.n	38be <_printf_i+0xca>
    38b2:	0640      	lsls	r0, r0, #25
    38b4:	d5f9      	bpl.n	38aa <_printf_i+0xb6>
    38b6:	680d      	ldr	r5, [r1, #0]
    38b8:	1d08      	adds	r0, r1, #4
    38ba:	6018      	str	r0, [r3, #0]
    38bc:	b2ad      	uxth	r5, r5
    38be:	4b59      	ldr	r3, [pc, #356]	; (3a24 <_printf_i+0x230>)
    38c0:	2708      	movs	r7, #8
    38c2:	9303      	str	r3, [sp, #12]
    38c4:	2a6f      	cmp	r2, #111	; 0x6f
    38c6:	d018      	beq.n	38fa <_printf_i+0x106>
    38c8:	270a      	movs	r7, #10
    38ca:	e016      	b.n	38fa <_printf_i+0x106>
    38cc:	3145      	adds	r1, #69	; 0x45
    38ce:	700a      	strb	r2, [r1, #0]
    38d0:	4a54      	ldr	r2, [pc, #336]	; (3a24 <_printf_i+0x230>)
    38d2:	9203      	str	r2, [sp, #12]
    38d4:	681a      	ldr	r2, [r3, #0]
    38d6:	6821      	ldr	r1, [r4, #0]
    38d8:	1d10      	adds	r0, r2, #4
    38da:	6018      	str	r0, [r3, #0]
    38dc:	6815      	ldr	r5, [r2, #0]
    38de:	0608      	lsls	r0, r1, #24
    38e0:	d522      	bpl.n	3928 <_printf_i+0x134>
    38e2:	07cb      	lsls	r3, r1, #31
    38e4:	d502      	bpl.n	38ec <_printf_i+0xf8>
    38e6:	2320      	movs	r3, #32
    38e8:	4319      	orrs	r1, r3
    38ea:	6021      	str	r1, [r4, #0]
    38ec:	2710      	movs	r7, #16
    38ee:	2d00      	cmp	r5, #0
    38f0:	d103      	bne.n	38fa <_printf_i+0x106>
    38f2:	2320      	movs	r3, #32
    38f4:	6822      	ldr	r2, [r4, #0]
    38f6:	439a      	bics	r2, r3
    38f8:	6022      	str	r2, [r4, #0]
    38fa:	0023      	movs	r3, r4
    38fc:	2200      	movs	r2, #0
    38fe:	3343      	adds	r3, #67	; 0x43
    3900:	701a      	strb	r2, [r3, #0]
    3902:	6863      	ldr	r3, [r4, #4]
    3904:	60a3      	str	r3, [r4, #8]
    3906:	2b00      	cmp	r3, #0
    3908:	db5c      	blt.n	39c4 <_printf_i+0x1d0>
    390a:	2204      	movs	r2, #4
    390c:	6821      	ldr	r1, [r4, #0]
    390e:	4391      	bics	r1, r2
    3910:	6021      	str	r1, [r4, #0]
    3912:	2d00      	cmp	r5, #0
    3914:	d158      	bne.n	39c8 <_printf_i+0x1d4>
    3916:	9e04      	ldr	r6, [sp, #16]
    3918:	2b00      	cmp	r3, #0
    391a:	d064      	beq.n	39e6 <_printf_i+0x1f2>
    391c:	0026      	movs	r6, r4
    391e:	9b03      	ldr	r3, [sp, #12]
    3920:	3642      	adds	r6, #66	; 0x42
    3922:	781b      	ldrb	r3, [r3, #0]
    3924:	7033      	strb	r3, [r6, #0]
    3926:	e05e      	b.n	39e6 <_printf_i+0x1f2>
    3928:	0648      	lsls	r0, r1, #25
    392a:	d5da      	bpl.n	38e2 <_printf_i+0xee>
    392c:	b2ad      	uxth	r5, r5
    392e:	e7d8      	b.n	38e2 <_printf_i+0xee>
    3930:	6809      	ldr	r1, [r1, #0]
    3932:	681a      	ldr	r2, [r3, #0]
    3934:	0608      	lsls	r0, r1, #24
    3936:	d505      	bpl.n	3944 <_printf_i+0x150>
    3938:	1d11      	adds	r1, r2, #4
    393a:	6019      	str	r1, [r3, #0]
    393c:	6813      	ldr	r3, [r2, #0]
    393e:	6962      	ldr	r2, [r4, #20]
    3940:	601a      	str	r2, [r3, #0]
    3942:	e006      	b.n	3952 <_printf_i+0x15e>
    3944:	0649      	lsls	r1, r1, #25
    3946:	d5f7      	bpl.n	3938 <_printf_i+0x144>
    3948:	1d11      	adds	r1, r2, #4
    394a:	6019      	str	r1, [r3, #0]
    394c:	6813      	ldr	r3, [r2, #0]
    394e:	8aa2      	ldrh	r2, [r4, #20]
    3950:	801a      	strh	r2, [r3, #0]
    3952:	2300      	movs	r3, #0
    3954:	9e04      	ldr	r6, [sp, #16]
    3956:	6123      	str	r3, [r4, #16]
    3958:	e054      	b.n	3a04 <_printf_i+0x210>
    395a:	681a      	ldr	r2, [r3, #0]
    395c:	1d11      	adds	r1, r2, #4
    395e:	6019      	str	r1, [r3, #0]
    3960:	6816      	ldr	r6, [r2, #0]
    3962:	2100      	movs	r1, #0
    3964:	6862      	ldr	r2, [r4, #4]
    3966:	0030      	movs	r0, r6
    3968:	f000 f85e 	bl	3a28 <memchr>
    396c:	2800      	cmp	r0, #0
    396e:	d001      	beq.n	3974 <_printf_i+0x180>
    3970:	1b80      	subs	r0, r0, r6
    3972:	6060      	str	r0, [r4, #4]
    3974:	6863      	ldr	r3, [r4, #4]
    3976:	6123      	str	r3, [r4, #16]
    3978:	2300      	movs	r3, #0
    397a:	9a04      	ldr	r2, [sp, #16]
    397c:	7013      	strb	r3, [r2, #0]
    397e:	e041      	b.n	3a04 <_printf_i+0x210>
    3980:	6923      	ldr	r3, [r4, #16]
    3982:	0032      	movs	r2, r6
    3984:	9906      	ldr	r1, [sp, #24]
    3986:	9805      	ldr	r0, [sp, #20]
    3988:	9d07      	ldr	r5, [sp, #28]
    398a:	47a8      	blx	r5
    398c:	1c43      	adds	r3, r0, #1
    398e:	d043      	beq.n	3a18 <_printf_i+0x224>
    3990:	6823      	ldr	r3, [r4, #0]
    3992:	2500      	movs	r5, #0
    3994:	079b      	lsls	r3, r3, #30
    3996:	d40f      	bmi.n	39b8 <_printf_i+0x1c4>
    3998:	9b09      	ldr	r3, [sp, #36]	; 0x24
    399a:	68e0      	ldr	r0, [r4, #12]
    399c:	4298      	cmp	r0, r3
    399e:	da3d      	bge.n	3a1c <_printf_i+0x228>
    39a0:	0018      	movs	r0, r3
    39a2:	e03b      	b.n	3a1c <_printf_i+0x228>
    39a4:	0022      	movs	r2, r4
    39a6:	2301      	movs	r3, #1
    39a8:	3219      	adds	r2, #25
    39aa:	9906      	ldr	r1, [sp, #24]
    39ac:	9805      	ldr	r0, [sp, #20]
    39ae:	9e07      	ldr	r6, [sp, #28]
    39b0:	47b0      	blx	r6
    39b2:	1c43      	adds	r3, r0, #1
    39b4:	d030      	beq.n	3a18 <_printf_i+0x224>
    39b6:	3501      	adds	r5, #1
    39b8:	68e3      	ldr	r3, [r4, #12]
    39ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
    39bc:	1a9b      	subs	r3, r3, r2
    39be:	429d      	cmp	r5, r3
    39c0:	dbf0      	blt.n	39a4 <_printf_i+0x1b0>
    39c2:	e7e9      	b.n	3998 <_printf_i+0x1a4>
    39c4:	2d00      	cmp	r5, #0
    39c6:	d0a9      	beq.n	391c <_printf_i+0x128>
    39c8:	9e04      	ldr	r6, [sp, #16]
    39ca:	0028      	movs	r0, r5
    39cc:	0039      	movs	r1, r7
    39ce:	f7ff fbc9 	bl	3164 <__aeabi_uidivmod>
    39d2:	9b03      	ldr	r3, [sp, #12]
    39d4:	3e01      	subs	r6, #1
    39d6:	5c5b      	ldrb	r3, [r3, r1]
    39d8:	0028      	movs	r0, r5
    39da:	7033      	strb	r3, [r6, #0]
    39dc:	0039      	movs	r1, r7
    39de:	f7ff fb3b 	bl	3058 <__udivsi3>
    39e2:	1e05      	subs	r5, r0, #0
    39e4:	d1f1      	bne.n	39ca <_printf_i+0x1d6>
    39e6:	2f08      	cmp	r7, #8
    39e8:	d109      	bne.n	39fe <_printf_i+0x20a>
    39ea:	6823      	ldr	r3, [r4, #0]
    39ec:	07db      	lsls	r3, r3, #31
    39ee:	d506      	bpl.n	39fe <_printf_i+0x20a>
    39f0:	6863      	ldr	r3, [r4, #4]
    39f2:	6922      	ldr	r2, [r4, #16]
    39f4:	4293      	cmp	r3, r2
    39f6:	dc02      	bgt.n	39fe <_printf_i+0x20a>
    39f8:	2330      	movs	r3, #48	; 0x30
    39fa:	3e01      	subs	r6, #1
    39fc:	7033      	strb	r3, [r6, #0]
    39fe:	9b04      	ldr	r3, [sp, #16]
    3a00:	1b9b      	subs	r3, r3, r6
    3a02:	6123      	str	r3, [r4, #16]
    3a04:	9b07      	ldr	r3, [sp, #28]
    3a06:	aa09      	add	r2, sp, #36	; 0x24
    3a08:	9300      	str	r3, [sp, #0]
    3a0a:	0021      	movs	r1, r4
    3a0c:	9b06      	ldr	r3, [sp, #24]
    3a0e:	9805      	ldr	r0, [sp, #20]
    3a10:	f7ff fe82 	bl	3718 <_printf_common>
    3a14:	1c43      	adds	r3, r0, #1
    3a16:	d1b3      	bne.n	3980 <_printf_i+0x18c>
    3a18:	2001      	movs	r0, #1
    3a1a:	4240      	negs	r0, r0
    3a1c:	b00b      	add	sp, #44	; 0x2c
    3a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a20:	00003e3e 	.word	0x00003e3e
    3a24:	00003e2d 	.word	0x00003e2d

00003a28 <memchr>:
    3a28:	b2c9      	uxtb	r1, r1
    3a2a:	1882      	adds	r2, r0, r2
    3a2c:	4290      	cmp	r0, r2
    3a2e:	d101      	bne.n	3a34 <memchr+0xc>
    3a30:	2000      	movs	r0, #0
    3a32:	4770      	bx	lr
    3a34:	7803      	ldrb	r3, [r0, #0]
    3a36:	428b      	cmp	r3, r1
    3a38:	d0fb      	beq.n	3a32 <memchr+0xa>
    3a3a:	3001      	adds	r0, #1
    3a3c:	e7f6      	b.n	3a2c <memchr+0x4>

00003a3e <memmove>:
    3a3e:	b510      	push	{r4, lr}
    3a40:	4288      	cmp	r0, r1
    3a42:	d902      	bls.n	3a4a <memmove+0xc>
    3a44:	188b      	adds	r3, r1, r2
    3a46:	4298      	cmp	r0, r3
    3a48:	d308      	bcc.n	3a5c <memmove+0x1e>
    3a4a:	2300      	movs	r3, #0
    3a4c:	429a      	cmp	r2, r3
    3a4e:	d007      	beq.n	3a60 <memmove+0x22>
    3a50:	5ccc      	ldrb	r4, [r1, r3]
    3a52:	54c4      	strb	r4, [r0, r3]
    3a54:	3301      	adds	r3, #1
    3a56:	e7f9      	b.n	3a4c <memmove+0xe>
    3a58:	5c8b      	ldrb	r3, [r1, r2]
    3a5a:	5483      	strb	r3, [r0, r2]
    3a5c:	3a01      	subs	r2, #1
    3a5e:	d2fb      	bcs.n	3a58 <memmove+0x1a>
    3a60:	bd10      	pop	{r4, pc}
	...

00003a64 <_free_r>:
    3a64:	b570      	push	{r4, r5, r6, lr}
    3a66:	0005      	movs	r5, r0
    3a68:	2900      	cmp	r1, #0
    3a6a:	d010      	beq.n	3a8e <_free_r+0x2a>
    3a6c:	1f0c      	subs	r4, r1, #4
    3a6e:	6823      	ldr	r3, [r4, #0]
    3a70:	2b00      	cmp	r3, #0
    3a72:	da00      	bge.n	3a76 <_free_r+0x12>
    3a74:	18e4      	adds	r4, r4, r3
    3a76:	0028      	movs	r0, r5
    3a78:	f000 f8d4 	bl	3c24 <__malloc_lock>
    3a7c:	4a1d      	ldr	r2, [pc, #116]	; (3af4 <_free_r+0x90>)
    3a7e:	6813      	ldr	r3, [r2, #0]
    3a80:	2b00      	cmp	r3, #0
    3a82:	d105      	bne.n	3a90 <_free_r+0x2c>
    3a84:	6063      	str	r3, [r4, #4]
    3a86:	6014      	str	r4, [r2, #0]
    3a88:	0028      	movs	r0, r5
    3a8a:	f000 f8cc 	bl	3c26 <__malloc_unlock>
    3a8e:	bd70      	pop	{r4, r5, r6, pc}
    3a90:	42a3      	cmp	r3, r4
    3a92:	d909      	bls.n	3aa8 <_free_r+0x44>
    3a94:	6821      	ldr	r1, [r4, #0]
    3a96:	1860      	adds	r0, r4, r1
    3a98:	4283      	cmp	r3, r0
    3a9a:	d1f3      	bne.n	3a84 <_free_r+0x20>
    3a9c:	6818      	ldr	r0, [r3, #0]
    3a9e:	685b      	ldr	r3, [r3, #4]
    3aa0:	1841      	adds	r1, r0, r1
    3aa2:	6021      	str	r1, [r4, #0]
    3aa4:	e7ee      	b.n	3a84 <_free_r+0x20>
    3aa6:	0013      	movs	r3, r2
    3aa8:	685a      	ldr	r2, [r3, #4]
    3aaa:	2a00      	cmp	r2, #0
    3aac:	d001      	beq.n	3ab2 <_free_r+0x4e>
    3aae:	42a2      	cmp	r2, r4
    3ab0:	d9f9      	bls.n	3aa6 <_free_r+0x42>
    3ab2:	6819      	ldr	r1, [r3, #0]
    3ab4:	1858      	adds	r0, r3, r1
    3ab6:	42a0      	cmp	r0, r4
    3ab8:	d10b      	bne.n	3ad2 <_free_r+0x6e>
    3aba:	6820      	ldr	r0, [r4, #0]
    3abc:	1809      	adds	r1, r1, r0
    3abe:	1858      	adds	r0, r3, r1
    3ac0:	6019      	str	r1, [r3, #0]
    3ac2:	4282      	cmp	r2, r0
    3ac4:	d1e0      	bne.n	3a88 <_free_r+0x24>
    3ac6:	6810      	ldr	r0, [r2, #0]
    3ac8:	6852      	ldr	r2, [r2, #4]
    3aca:	1841      	adds	r1, r0, r1
    3acc:	6019      	str	r1, [r3, #0]
    3ace:	605a      	str	r2, [r3, #4]
    3ad0:	e7da      	b.n	3a88 <_free_r+0x24>
    3ad2:	42a0      	cmp	r0, r4
    3ad4:	d902      	bls.n	3adc <_free_r+0x78>
    3ad6:	230c      	movs	r3, #12
    3ad8:	602b      	str	r3, [r5, #0]
    3ada:	e7d5      	b.n	3a88 <_free_r+0x24>
    3adc:	6821      	ldr	r1, [r4, #0]
    3ade:	1860      	adds	r0, r4, r1
    3ae0:	4282      	cmp	r2, r0
    3ae2:	d103      	bne.n	3aec <_free_r+0x88>
    3ae4:	6810      	ldr	r0, [r2, #0]
    3ae6:	6852      	ldr	r2, [r2, #4]
    3ae8:	1841      	adds	r1, r0, r1
    3aea:	6021      	str	r1, [r4, #0]
    3aec:	6062      	str	r2, [r4, #4]
    3aee:	605c      	str	r4, [r3, #4]
    3af0:	e7ca      	b.n	3a88 <_free_r+0x24>
    3af2:	46c0      	nop			; (mov r8, r8)
    3af4:	200000d8 	.word	0x200000d8

00003af8 <_malloc_r>:
    3af8:	2303      	movs	r3, #3
    3afa:	b570      	push	{r4, r5, r6, lr}
    3afc:	1ccd      	adds	r5, r1, #3
    3afe:	439d      	bics	r5, r3
    3b00:	3508      	adds	r5, #8
    3b02:	0006      	movs	r6, r0
    3b04:	2d0c      	cmp	r5, #12
    3b06:	d21e      	bcs.n	3b46 <_malloc_r+0x4e>
    3b08:	250c      	movs	r5, #12
    3b0a:	42a9      	cmp	r1, r5
    3b0c:	d81d      	bhi.n	3b4a <_malloc_r+0x52>
    3b0e:	0030      	movs	r0, r6
    3b10:	f000 f888 	bl	3c24 <__malloc_lock>
    3b14:	4a25      	ldr	r2, [pc, #148]	; (3bac <_malloc_r+0xb4>)
    3b16:	6814      	ldr	r4, [r2, #0]
    3b18:	0021      	movs	r1, r4
    3b1a:	2900      	cmp	r1, #0
    3b1c:	d119      	bne.n	3b52 <_malloc_r+0x5a>
    3b1e:	4c24      	ldr	r4, [pc, #144]	; (3bb0 <_malloc_r+0xb8>)
    3b20:	6823      	ldr	r3, [r4, #0]
    3b22:	2b00      	cmp	r3, #0
    3b24:	d103      	bne.n	3b2e <_malloc_r+0x36>
    3b26:	0030      	movs	r0, r6
    3b28:	f000 f86a 	bl	3c00 <_sbrk_r>
    3b2c:	6020      	str	r0, [r4, #0]
    3b2e:	0029      	movs	r1, r5
    3b30:	0030      	movs	r0, r6
    3b32:	f000 f865 	bl	3c00 <_sbrk_r>
    3b36:	1c43      	adds	r3, r0, #1
    3b38:	d12c      	bne.n	3b94 <_malloc_r+0x9c>
    3b3a:	230c      	movs	r3, #12
    3b3c:	0030      	movs	r0, r6
    3b3e:	6033      	str	r3, [r6, #0]
    3b40:	f000 f871 	bl	3c26 <__malloc_unlock>
    3b44:	e003      	b.n	3b4e <_malloc_r+0x56>
    3b46:	2d00      	cmp	r5, #0
    3b48:	dadf      	bge.n	3b0a <_malloc_r+0x12>
    3b4a:	230c      	movs	r3, #12
    3b4c:	6033      	str	r3, [r6, #0]
    3b4e:	2000      	movs	r0, #0
    3b50:	bd70      	pop	{r4, r5, r6, pc}
    3b52:	680b      	ldr	r3, [r1, #0]
    3b54:	1b5b      	subs	r3, r3, r5
    3b56:	d41a      	bmi.n	3b8e <_malloc_r+0x96>
    3b58:	2b0b      	cmp	r3, #11
    3b5a:	d903      	bls.n	3b64 <_malloc_r+0x6c>
    3b5c:	600b      	str	r3, [r1, #0]
    3b5e:	18cc      	adds	r4, r1, r3
    3b60:	6025      	str	r5, [r4, #0]
    3b62:	e003      	b.n	3b6c <_malloc_r+0x74>
    3b64:	428c      	cmp	r4, r1
    3b66:	d10e      	bne.n	3b86 <_malloc_r+0x8e>
    3b68:	6863      	ldr	r3, [r4, #4]
    3b6a:	6013      	str	r3, [r2, #0]
    3b6c:	0030      	movs	r0, r6
    3b6e:	f000 f85a 	bl	3c26 <__malloc_unlock>
    3b72:	0020      	movs	r0, r4
    3b74:	2207      	movs	r2, #7
    3b76:	300b      	adds	r0, #11
    3b78:	1d23      	adds	r3, r4, #4
    3b7a:	4390      	bics	r0, r2
    3b7c:	1ac3      	subs	r3, r0, r3
    3b7e:	d0e7      	beq.n	3b50 <_malloc_r+0x58>
    3b80:	425a      	negs	r2, r3
    3b82:	50e2      	str	r2, [r4, r3]
    3b84:	e7e4      	b.n	3b50 <_malloc_r+0x58>
    3b86:	684b      	ldr	r3, [r1, #4]
    3b88:	6063      	str	r3, [r4, #4]
    3b8a:	000c      	movs	r4, r1
    3b8c:	e7ee      	b.n	3b6c <_malloc_r+0x74>
    3b8e:	000c      	movs	r4, r1
    3b90:	6849      	ldr	r1, [r1, #4]
    3b92:	e7c2      	b.n	3b1a <_malloc_r+0x22>
    3b94:	2303      	movs	r3, #3
    3b96:	1cc4      	adds	r4, r0, #3
    3b98:	439c      	bics	r4, r3
    3b9a:	42a0      	cmp	r0, r4
    3b9c:	d0e0      	beq.n	3b60 <_malloc_r+0x68>
    3b9e:	1a21      	subs	r1, r4, r0
    3ba0:	0030      	movs	r0, r6
    3ba2:	f000 f82d 	bl	3c00 <_sbrk_r>
    3ba6:	1c43      	adds	r3, r0, #1
    3ba8:	d1da      	bne.n	3b60 <_malloc_r+0x68>
    3baa:	e7c6      	b.n	3b3a <_malloc_r+0x42>
    3bac:	200000d8 	.word	0x200000d8
    3bb0:	200000dc 	.word	0x200000dc

00003bb4 <_realloc_r>:
    3bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bb6:	0007      	movs	r7, r0
    3bb8:	000d      	movs	r5, r1
    3bba:	0016      	movs	r6, r2
    3bbc:	2900      	cmp	r1, #0
    3bbe:	d105      	bne.n	3bcc <_realloc_r+0x18>
    3bc0:	0011      	movs	r1, r2
    3bc2:	f7ff ff99 	bl	3af8 <_malloc_r>
    3bc6:	0004      	movs	r4, r0
    3bc8:	0020      	movs	r0, r4
    3bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3bcc:	2a00      	cmp	r2, #0
    3bce:	d103      	bne.n	3bd8 <_realloc_r+0x24>
    3bd0:	f7ff ff48 	bl	3a64 <_free_r>
    3bd4:	0034      	movs	r4, r6
    3bd6:	e7f7      	b.n	3bc8 <_realloc_r+0x14>
    3bd8:	f000 f826 	bl	3c28 <_malloc_usable_size_r>
    3bdc:	002c      	movs	r4, r5
    3bde:	4286      	cmp	r6, r0
    3be0:	d9f2      	bls.n	3bc8 <_realloc_r+0x14>
    3be2:	0031      	movs	r1, r6
    3be4:	0038      	movs	r0, r7
    3be6:	f7ff ff87 	bl	3af8 <_malloc_r>
    3bea:	1e04      	subs	r4, r0, #0
    3bec:	d0ec      	beq.n	3bc8 <_realloc_r+0x14>
    3bee:	0029      	movs	r1, r5
    3bf0:	0032      	movs	r2, r6
    3bf2:	f7ff fbf5 	bl	33e0 <memcpy>
    3bf6:	0029      	movs	r1, r5
    3bf8:	0038      	movs	r0, r7
    3bfa:	f7ff ff33 	bl	3a64 <_free_r>
    3bfe:	e7e3      	b.n	3bc8 <_realloc_r+0x14>

00003c00 <_sbrk_r>:
    3c00:	2300      	movs	r3, #0
    3c02:	b570      	push	{r4, r5, r6, lr}
    3c04:	4c06      	ldr	r4, [pc, #24]	; (3c20 <_sbrk_r+0x20>)
    3c06:	0005      	movs	r5, r0
    3c08:	0008      	movs	r0, r1
    3c0a:	6023      	str	r3, [r4, #0]
    3c0c:	f7fe febe 	bl	298c <_sbrk>
    3c10:	1c43      	adds	r3, r0, #1
    3c12:	d103      	bne.n	3c1c <_sbrk_r+0x1c>
    3c14:	6823      	ldr	r3, [r4, #0]
    3c16:	2b00      	cmp	r3, #0
    3c18:	d000      	beq.n	3c1c <_sbrk_r+0x1c>
    3c1a:	602b      	str	r3, [r5, #0]
    3c1c:	bd70      	pop	{r4, r5, r6, pc}
    3c1e:	46c0      	nop			; (mov r8, r8)
    3c20:	20000284 	.word	0x20000284

00003c24 <__malloc_lock>:
    3c24:	4770      	bx	lr

00003c26 <__malloc_unlock>:
    3c26:	4770      	bx	lr

00003c28 <_malloc_usable_size_r>:
    3c28:	1f0b      	subs	r3, r1, #4
    3c2a:	681b      	ldr	r3, [r3, #0]
    3c2c:	1f18      	subs	r0, r3, #4
    3c2e:	2b00      	cmp	r3, #0
    3c30:	da01      	bge.n	3c36 <_malloc_usable_size_r+0xe>
    3c32:	580b      	ldr	r3, [r1, r0]
    3c34:	18c0      	adds	r0, r0, r3
    3c36:	4770      	bx	lr
    3c38:	000003d8 	.word	0x000003d8
    3c3c:	0000062a 	.word	0x0000062a
    3c40:	0000062a 	.word	0x0000062a
    3c44:	0000062a 	.word	0x0000062a
    3c48:	0000062a 	.word	0x0000062a
    3c4c:	0000062a 	.word	0x0000062a
    3c50:	0000062a 	.word	0x0000062a
    3c54:	0000062a 	.word	0x0000062a
    3c58:	0000062a 	.word	0x0000062a
    3c5c:	0000062a 	.word	0x0000062a
    3c60:	0000062a 	.word	0x0000062a
    3c64:	0000062a 	.word	0x0000062a
    3c68:	0000062a 	.word	0x0000062a
    3c6c:	0000062a 	.word	0x0000062a
    3c70:	0000062a 	.word	0x0000062a
    3c74:	0000062a 	.word	0x0000062a
    3c78:	000003b8 	.word	0x000003b8
    3c7c:	0000062a 	.word	0x0000062a
    3c80:	0000062a 	.word	0x0000062a
    3c84:	0000062a 	.word	0x0000062a
    3c88:	0000062a 	.word	0x0000062a
    3c8c:	0000062a 	.word	0x0000062a
    3c90:	0000062a 	.word	0x0000062a
    3c94:	0000062a 	.word	0x0000062a
    3c98:	0000062a 	.word	0x0000062a
    3c9c:	0000062a 	.word	0x0000062a
    3ca0:	0000062a 	.word	0x0000062a
    3ca4:	0000062a 	.word	0x0000062a
    3ca8:	0000062a 	.word	0x0000062a
    3cac:	0000062a 	.word	0x0000062a
    3cb0:	0000062a 	.word	0x0000062a
    3cb4:	0000062a 	.word	0x0000062a
    3cb8:	000003d0 	.word	0x000003d0
    3cbc:	0000062a 	.word	0x0000062a
    3cc0:	0000062a 	.word	0x0000062a
    3cc4:	0000062a 	.word	0x0000062a
    3cc8:	0000062a 	.word	0x0000062a
    3ccc:	0000062a 	.word	0x0000062a
    3cd0:	0000062a 	.word	0x0000062a
    3cd4:	0000062a 	.word	0x0000062a
    3cd8:	0000062a 	.word	0x0000062a
    3cdc:	0000062a 	.word	0x0000062a
    3ce0:	0000062a 	.word	0x0000062a
    3ce4:	0000062a 	.word	0x0000062a
    3ce8:	0000062a 	.word	0x0000062a
    3cec:	0000062a 	.word	0x0000062a
    3cf0:	0000062a 	.word	0x0000062a
    3cf4:	0000062a 	.word	0x0000062a
    3cf8:	000003c8 	.word	0x000003c8
    3cfc:	00000408 	.word	0x00000408
    3d00:	00000398 	.word	0x00000398
    3d04:	000003a8 	.word	0x000003a8
    3d08:	000003a0 	.word	0x000003a0
    3d0c:	00000002 	.word	0x00000002
    3d10:	00000003 	.word	0x00000003
    3d14:	0000ffff 	.word	0x0000ffff
    3d18:	0000ffff 	.word	0x0000ffff
    3d1c:	00000004 	.word	0x00000004
    3d20:	00000005 	.word	0x00000005
    3d24:	00000006 	.word	0x00000006
    3d28:	00000007 	.word	0x00000007
    3d2c:	0000ffff 	.word	0x0000ffff
    3d30:	0000ffff 	.word	0x0000ffff
    3d34:	0000ffff 	.word	0x0000ffff
    3d38:	0000ffff 	.word	0x0000ffff
    3d3c:	0000ffff 	.word	0x0000ffff
    3d40:	0000ffff 	.word	0x0000ffff
    3d44:	0000ffff 	.word	0x0000ffff
    3d48:	0000ffff 	.word	0x0000ffff
    3d4c:	00000008 	.word	0x00000008
    3d50:	00000009 	.word	0x00000009
    3d54:	0000000a 	.word	0x0000000a
    3d58:	0000000b 	.word	0x0000000b
    3d5c:	42000800 	.word	0x42000800
    3d60:	42000c00 	.word	0x42000c00
    3d64:	42001000 	.word	0x42001000
    3d68:	42001400 	.word	0x42001400
    3d6c:	00020064 	.word	0x00020064
    3d70:	200000a8 	.word	0x200000a8
    3d74:	00000000 	.word	0x00000000
    3d78:	00020064 	.word	0x00020064
    3d7c:	20000010 	.word	0x20000010
    3d80:	00000000 	.word	0x00000000
    3d84:	00020064 	.word	0x00020064
    3d88:	2000000c 	.word	0x2000000c
    3d8c:	00000000 	.word	0x00000000
    3d90:	00040064 	.word	0x00040064
    3d94:	200000ac 	.word	0x200000ac
    3d98:	00000000 	.word	0x00000000
    3d9c:	4f54434f 	.word	0x4f54434f
    3da0:	00000000 	.word	0x00000000
    3da4:	3e4b4f3c 	.word	0x3e4b4f3c
    3da8:	00000000 	.word	0x00000000
    3dac:	00004b4f 	.word	0x00004b4f
    3db0:	414f423c 	.word	0x414f423c
    3db4:	003e4452 	.word	0x003e4452
    3db8:	00002392 	.word	0x00002392
    3dbc:	0000238e 	.word	0x0000238e
    3dc0:	0000238e 	.word	0x0000238e
    3dc4:	000023de 	.word	0x000023de
    3dc8:	000023de 	.word	0x000023de
    3dcc:	000023a6 	.word	0x000023a6
    3dd0:	00002398 	.word	0x00002398
    3dd4:	000023ac 	.word	0x000023ac
    3dd8:	00002464 	.word	0x00002464
    3ddc:	00002444 	.word	0x00002444
    3de0:	00002444 	.word	0x00002444
    3de4:	000024b4 	.word	0x000024b4
    3de8:	00002456 	.word	0x00002456
    3dec:	00002472 	.word	0x00002472
    3df0:	00002448 	.word	0x00002448
    3df4:	00002480 	.word	0x00002480
    3df8:	503b553c 	.word	0x503b553c
    3dfc:	7531253d 	.word	0x7531253d
    3e00:	00003e3b 	.word	0x00003e3b
    3e04:	4c3b553c 	.word	0x4c3b553c
    3e08:	7531253d 	.word	0x7531253d
    3e0c:	00003e3b 	.word	0x00003e3b
    3e10:	253d423c 	.word	0x253d423c
    3e14:	3e3b7533 	.word	0x3e3b7533
    3e18:	00000000 	.word	0x00000000
    3e1c:	2b302d23 	.word	0x2b302d23
    3e20:	6c680020 	.word	0x6c680020
    3e24:	6665004c 	.word	0x6665004c
    3e28:	47464567 	.word	0x47464567
    3e2c:	00          	.byte	0x00
    3e2d:	30          	.byte	0x30
    3e2e:	3231      	.short	0x3231
    3e30:	36353433 	.word	0x36353433
    3e34:	41393837 	.word	0x41393837
    3e38:	45444342 	.word	0x45444342
    3e3c:	31300046 	.word	0x31300046
    3e40:	35343332 	.word	0x35343332
    3e44:	39383736 	.word	0x39383736
    3e48:	64636261 	.word	0x64636261
    3e4c:	00006665 	.word	0x00006665

00003e50 <_init>:
    3e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e52:	46c0      	nop			; (mov r8, r8)
    3e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3e56:	bc08      	pop	{r3}
    3e58:	469e      	mov	lr, r3
    3e5a:	4770      	bx	lr

00003e5c <__init_array_start>:
    3e5c:	000000cd 	.word	0x000000cd

00003e60 <_fini>:
    3e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e62:	46c0      	nop			; (mov r8, r8)
    3e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3e66:	bc08      	pop	{r3}
    3e68:	469e      	mov	lr, r3
    3e6a:	4770      	bx	lr

00003e6c <__fini_array_start>:
    3e6c:	000000a5 	.word	0x000000a5
